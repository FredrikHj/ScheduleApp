{"version":3,"sources":["Components/Data/RouteNames.js","Components/CommonFunctions.js","Components/Data/LocalStorage.js","Components/Storage.js","Components/Data/runAppUrls.js","Components/Data/Spinner.js","Components/Data/Axios.js","Components/Structure/ListSQLData.js","Components/Style/MainStyle.js","Components/Style/SpecificStyleBtn.js","Components/Style/CommonStyle.js","Components/Data/SubmitBtn.js","Components/Structure/SearchBar.js","Components/Data/TableHeadline.js","Components/Structure/TableHead.js","Components/Style/LogedInStyle.js","Components/Data/CellInput.js","Components/Structure/ListAddForm.js","Components/Structure/HeadTable.js","Components/Style/AuthStyle.js","Components/Data/Authorization.js","Components/Structure/Headbar.js","Components/Structure/LogedInStatus.js","Components/Style/LoginFormStyle.js","Components/Data/LoginForm.js","Components/Data/LogInOut.js","Components/Structure/RegUser.js","MainPage.js","Components/Data/CommonFunction.js","LogedIn.js","Components/Structure/AddRecords.js","MainApp.js","serviceWorker.js","index.js"],"names":["routeName","jwt","require","getLocalStorageData","getData","console","log","window","localStorage","JSON","parse","getItem","token","inlogedUserFullName$","BehaviorSubject","headName$","userData$","incommingSQLDataArr$","optionColListArr$","gotoPage$","updateLocalstorage","saveLoginData","setItem","stringify","updateInlogedUserFullName","next","inlogData","tokenData","verify","error","loginName","getTokenData","updateSavedSQLData","incommingSQLDataArr","updateGotoPage","gotoPage","localPubAppUrls","correctDomain","domainHostname","location","hostname","appUrlHostname","hash","split","Spinner","props","str","className","savedSQLDataArr","backendURL","axiosGet","getType","tokenStr","routes","axios","get","headers","Authorization","then","response","incommingSQLResArr","status","data","SQLData","optionColListArr","updateOptionColList","structuringCols","push","catch","axiosPost","postType","bodyData","type","sendToSqlBackend","post","logedInUserInfoObj","responsType","logInMess","statusText","loginData","ListSQLData","useState","setAppUrl","updateRoutes","incommingNewSQLData","updateIncommingNewSQLData","updateErroLoadingSQLData","countGetMethod","useEffect","getSQLData","subscribe","SQLDataArr","correctRoutes","Promise","success","setTimeout","result","length","map","sqlDataObj","rowCounter","key","date","activity","state","concerned","place","content","GenerallyStyle","body__contents","styled","section","askMarkMove","HeadbarStyle","header","headContainer","headline","specificBtnLStyleLogin","btn","marginRight","marginTop","marginLeft","text","width","height","left","top","specificStyleLogout","specificStyleGotTo","CommonBtnStyle","button","CommonTexStyle","btnHeadline","p","SubmitBtn","style","name","onClick={","id","SearchBar","tableHeadline","TableHead","item","index","LogedInStyle","statusContainer","logedInUser","btnSubmitLogoutInTopUp","UserInputForm","UserInputSelect","container","CellInput","options","dataType","cellIndex","inputOnChange","sOonClick={","placeholder","cellStr","data-type","data-typenr","onChange","optionIndex","value","ListAddForm","structuredSQLDataArr","updateStructuredSQLDataArr","addedRecordData","updateAddedRecordData","addedRecords","updateAddedRecords","SQLColListArr","setStrsType","e","puschToAddedRecordData","target","inputStr","dataset","typenr","chooseSelectOption","getChoosedSelectOption","undefined","pushToAddedRecords","HeadTable","redirectToPage","updateRedirectToPage","tableHead","tableBody","addRecordsBtn","to","path","component","AuthStyle","logInSpinnerMove","Auth","appName","setAppName","headName","Helmet","charSet","appStatus","Headbar","appUrl","setInlogMess","setInlogStatus","gotoIntoPage","updateGotoIntoPage","userDispalyingObj","LogedInStatus","inlogedUser","functionLogOut","sumbitBtnGotTo","LoginFormStyle","usernameContainer","passwordContainer","labelFormatUsernamePassword","inputFormatUsernamePassword","input","btnLoginContainer","userInfoContainer","userErrorMess","regLink","LoginForm","onChangeUserName","onChangeUserPwd","userNameStr","userPwdStr","runAuth","runReg","inlogStatus","inlogMess","RegUser","setUserFullName","setUserName","setUserPWD","sendUserReg","MainPage","updateUserNameStr","updateUserPwdStr","returningUserDispalyingObj","targetUserName","targetUserPwd","targetBtnId","userName","userPassWord","exact","runLogOut","clear","runAddRecord","runReturnFromAddRecord","LogedIn","updateInlogedUser","inlogedUserFullName","AddRecords","updateHeadName","MainApp","basename","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1eee196.chunk.js","sourcesContent":["export const routeName = {\r\n    mainPage: '/',\r\n    userReg: 'Registrera',\r\n    auth: 'Auth',\r\n    login: 'Inloggad',\r\n    addRecords: 'Add',\r\n  };","let jwt = require('jsonwebtoken');\r\n\r\nexport let getTokenData = (token, inlogData) => {\r\n    console.log(\"getTokenData -> token\", token)\r\n    let tokenData = jwt.verify( token, 'inlogSecretKey', (error, token) => token);\r\n    if (inlogData === 'fullName') return tokenData.loginName;\r\n}\r\n","export let LocalStorageObj =  {\r\n    logedInState: false,\r\n    fullName: ''\r\n};\r\n\r\nexport function getLocalStorageData(getData){\r\n    console.log(\"getLocalStorageData -> window.localStorage.length\", window.localStorage)\r\n    // Run if a data i saved into the localstorage else no run\r\n    getData = JSON.parse(window.localStorage.getItem(\"loginData\")).token;\r\n    console.log(\"getLocalStorageData -> getData\", getData)\r\n    \r\n    return getData;\r\n}","import {BehaviorSubject} from \"rxjs\";\r\n\r\nimport {getTokenData} from './CommonFunctions';\r\nimport {getLocalStorageData} from './Data/LocalStorage';\r\nconst inlogedUserFullName = '';\r\nconst incommingSQLDataArr = [];\r\nconst optionColListArr = [];\r\nconst headName = '';\r\nconst userData = '';\r\nconst gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const userData$ = new BehaviorSubject(userData);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\nexport const optionColListArr$ = new BehaviorSubject(optionColListArr);\r\n\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\n\r\nexport const LocalStorage$ = new BehaviorSubject('');\r\n\r\n/* The functions are triggered in another place and send in its data\r\nThe incomming data is stored in a new object and the object is then, in the last function, save too localstorage \r\n*/\r\nexport function updateUserData(loginData){\r\n    updateLocalstorage(loginData);\r\n    if(loginData) {\r\n        userData$.next(loginData);\r\n    }\r\n}\r\nexport const updateLocalstorage = (saveLoginData) =>{\r\n    localStorage.setItem('loginData', JSON.stringify(saveLoginData));\r\n}\r\nexport function getLogStatus(){\r\n    // Run if a data i saved into the localstorage else no run\r\n    if (window.localStorage.length !== 0) {\r\n        \r\n        const getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n        const getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n        \r\n        const logInStatus = {\r\n            type: getStatusType,\r\n            mess: getLogInMess\r\n        };\r\n        //;\r\n        \r\n        return logInStatus;\r\n    }\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    if (updateInlogedUserFullName) inlogedUserFullName$.next(getTokenData(getLocalStorageData('token'), 'fullName'));\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    if(incommingSQLDataArr) {\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\nexport function updateOptionColList(optionColListArr){\r\n    if(optionColListArr) {\r\n        optionColListArr$.next(optionColListArr);\r\n    }\r\n}\r\nexport function updateGotoPage(gotoPage){\r\nconsole.log(\"updateGotoPage -> gotoPage\", gotoPage)\r\n    \r\n    if(gotoPage) {\r\n        gotoPage$.next(gotoPage);\r\n    }\r\n    return gotoPage;\r\n}\r\n\r\n","export let localPubAppUrls = () => {\r\n  let correctDomain = '';\r\n\r\n  let domainHostname = window.location.hostname;\r\n  let appUrlHostname = window.location.hash.split('')[1];\r\n  console.log(\"localPubAppUrls -> appUrlDomain\", domainHostname)\r\n  console.log(\"localPubAppUrl -> appUrlHostname\", appUrlHostname);\r\n  \r\n  // Check if in local or pub mode \r\n  if (domainHostname === 'localhost' || domainHostname === 'fredrikhj.github.io') correctDomain = '/'; \r\n \r\n  return correctDomain;\r\n}\r\nexport let correctRoutes = () => {\r\n  let correctRouteName = '';\r\n  let routeName = window.location.hash.split('#')[1];\r\n  console.log(\"runAppUrls -> appUrl\", routeName)\r\n\r\n\r\n  \r\n  ////console.log(appUrl.pathname.split('/')[1]);\r\n  \r\n  // Check if ther is any components that can be reuse\r\n  //if(appUrl.pathname.split('/')[1] === 'LogIn') localPubUrl = appUrl.pathname.split('/')[1];\r\n  \r\n  // Check if in dev or pub mode´; \r\n/*   if (appUrlHostname === 'localhost') correctRouteName = routeName;\r\n  if (appUrlHostname === 'fredrikhj.github.io') correctRouteName = `/ScheduleApp${routeName}`;\r\n */ \r\n  return routeName;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../Style/Spinner.scss';\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n            { props.str } <span className=\"spinner spinner-dark\"></span>\r\n        </>\r\n    );\r\n}\r\nexport default Spinner;\r\n","import axios from 'axios';\r\nimport { updateSavedSQLData, updateOptionColList, updateUserData, updateGotoPage } from '../Storage.js';\r\nimport { setTimeout } from 'timers';\r\nimport { log } from 'util';\r\n\r\nlet savedSQLDataArr = [];\r\n\r\nlet backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Heroku Backend\r\n//let backendURL = 'http://localhost:3001'; // Local Backend \r\n\r\nexport let axiosGet = (getType, tokenStr) => {\r\n    console.log(\"axiosGet -> getType\", getType)\r\n        let routes = '';\r\n\r\n    // Type of post method\r\n    if (getType === 'default') routes = '/SQLData';\r\n    if (getType === 'userSpec') routes = `/SQLData/${ 'fredde' }`;\r\n    \r\n    \r\n    // Get the user inloged User and send into the backend for getting the correct user records \r\n     \r\n    axios.get(backendURL + routes, {headers: {Authorization: `bearer ${tokenStr}`}}).then(response => {\r\n    console.log(\"axiosGet -> response\", response)\r\n        updateSavedSQLData([]);\r\n        let incommingSQLResArr = []\r\n        /* Store the incomming API data in a variables - \r\n        Note that the data structure deppending on the conditions\r\n        */\r\n        if (response.status === 200 && getType === 'default') incommingSQLResArr = response.data[0];\r\n        if (response.status === 200 && getType === 'userSpec') {\r\n            incommingSQLResArr = response.data.SQLData[0];\r\n            updateOptionColList(response.data.structuringCols)\r\n        }\r\n         //;\r\n        /*  If incomming status of 200 = OK\r\n            Data i push into a arry too  Storage\r\n            The array is holding the data until the webbbrowser is closed \r\n          \r\n        Default get\r\n        */\r\n          updateSavedSQLData(incommingSQLResArr);\r\n        \r\n        /*  If incomming status of 201 = Created:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        */\r\n        if (response.status === 201) {\r\n            \r\n            savedSQLDataArr[0].push(incommingSQLResArr[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n        else{\r\n        }\r\n    }).\r\n    catch(error => {\r\n        ////;\r\n    });\r\n}\r\nlet getUserId = () => {\r\n    let getUserId = JSON.parse(window.localStorage.getItem(\"userData\")).userId;\r\n    return getUserId;\r\n}\r\nexport let axiosPost = (postType, bodyData) => {  \r\n    console.log(\"axiosPost -> bodyData\", bodyData)\r\n    //;\r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    ////;\r\n    // Type of post method\r\n    if (postType === 'Auth') type = 'Auth';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    if (postType === 'userReg') type = 'UserReg';\r\n    \r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).then(response => {\r\n            console.log(\"axiosPost -> response\", response)\r\n            if (postType === 'Auth'){\r\n                // Incomming userdata. T\r\n                \r\n                let logedInUserInfoObj = {\r\n                    responsType: response.status,\r\n                    logInMess: response.statusText, \r\n                    token: response.data,\r\n                    //getTokenData(response.data),\r\n                };\r\n                //;\r\n                \r\n                //Send the incomming data for displaying the user login status\r\n                updateUserData(logedInUserInfoObj);\r\n\r\n                if (response.status === 200) updateGotoPage(postType);\r\n            }\r\n        }).catch(error => {\r\n            ////;\r\n        });\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Spinner from '../Data/Spinner.js';\r\nimport { correctRoutes } from '../Data/runAppUrls';\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\nimport { incommingSQLDataArr$ } from '../Storage';\r\nimport { axiosGet } from '../Data/Axios';\r\nimport { getLocalStorageData } from '../Data/LocalStorage';\r\nexport let ListSQLData = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ routes, updateRoutes ] = useState('');\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ erroLoadingSQLData, updateErroLoadingSQLData ] = useState(false);\r\n\r\n    let countGetMethod = 1;\r\n    useEffect(() =>{\r\n        setAppUrl(localPubAppUrls());\r\n        getSQLData();        \r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure\r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n        updateRoutes(correctRoutes());\r\n    },[routes])\r\n    let getSQLData = () => {\r\n        let axiosUntilGettingData = new Promise((success, error) => {\r\n            if (countGetMethod === 1) {\r\n                success();\r\n                countGetMethod++;\r\n            }\r\n            if (countGetMethod === 2) {\r\n                setTimeout(() => {\r\n                    updateErroLoadingSQLData(true)\r\n                }, 1000);\r\n            }\r\n            \r\n            //else error('Kunde inte ladda datan :(');\r\n        });\r\n        \r\n        // Run default SQL list\r\n         axiosUntilGettingData.then((result) => {            \r\n            if(routes === '/') axiosGet('default', '');\r\n            if(routes === '/Inloggad' || routes === '/Add') axiosGet('userSpec', getLocalStorageData('token'));\r\n        }).catch((result) =>{\r\n            updateErroLoadingSQLData(result);\r\n        })\r\n    }\r\n    return(\r\n        <>\r\n            {(incommingNewSQLData.length !== 0) \r\n                ?\r\n                incommingNewSQLData.map((sqlDataObj, rowCounter) => {\r\n                    return(\r\n                        <tr key={ rowCounter }>\r\n                            <td>{ sqlDataObj.date }</td>\r\n                            <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                            <td>{ sqlDataObj.state }</td>\r\n                            <td>{ sqlDataObj.concerned }</td>\r\n                            <td>{ sqlDataObj.type }</td>\r\n                            <td>{ sqlDataObj.place }</td>\r\n                            <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            :   \r\n                <>\r\n                    <tr><td>\r\n                        <Spinner str={'Tabellen laddas'}/>\r\n                    </td></tr>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== GenerallyStyle ==============================\r\nconst commonColorBlue =  'rgb(68, 68, 223)';\r\nexport let GenerallyStyle = {\r\n  body__contents: styled.section`\r\n    width: 1024px;\r\n    margin-left: calc(50% - 512px);\r\n  `,\r\n  askMarkMove: styled.section`\r\n    float: right;\r\n    margin-top: -7px;\r\n  `,\r\n}\r\n// ============================== Headbar ==============================\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: -39px 0px 0px -5px;\r\n    `,\r\n  headContainer: styled.section`\r\n    width: 1400px;\r\n    height: 103px;\r\n    margin-left: calc(50% - 700px);\r\n    background: #FFFFFF;\r\n  `,\r\n  headline: styled.section`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 32px;\r\n    margin-top: 46px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    line-height: 80px;\r\n    color: #AE0B05;\r\n  `,\r\n}","export const specificBtnLStyleLogin = {\r\n    btn: {\r\n        marginRight: '108px',\r\n        marginTop: '20px',\r\n        marginLeft: '0',\r\n    },\r\n    text: {\r\n        width: '133px',\r\n        height: '32px',\r\n        left: '-6px',\r\n        top: '-9px',\r\n    }\r\n}\r\nexport const specificStyleLogout = {\r\n    btn: {\r\n        marginLeft: '1269px',\r\n        marginTop: '-25px',\r\n    },\r\n    text: {\r\n        width: '133px',\r\n        height: '32px',\r\n        left: '0px',\r\n        top: '-10px',\r\n    }\r\n}\r\nexport const specificStyleGotTo = {\r\n    btn: {\r\n        marginLeft: '1060px',\r\n        marginTop: '73px',\r\n    },\r\n    text: {\r\n        marginLeft: '0',\r\n        marginTop: '5px',\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== Common Style ==============================\r\nexport let CommonBtnStyle = {\r\n    btn: styled.button`\r\n        width: 141px;\r\n        height: 39px;\r\n        background: #AE0B05;\r\n        border-radius: 4px;\r\n    `,\r\n}\r\nexport let CommonTexStyle = {\r\n    btnHeadline: styled.p`\r\n        display: inline-block;\r\n        position: relative;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        font-family: Roboto;\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 16px;\r\n        color: white;\r\n    `,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { CommonBtnStyle, CommonTexStyle } from '../Style/CommonStyle';\r\n\r\nexport let SubmitBtn = (props) => {\r\n    const { style, name, onClick={, id } = props;\r\n    return(\r\n        <>\r\n            <CommonBtnStyle.btn id={ id } onClick={ onClick={ } style={ style.btn }>\r\n                <CommonTexStyle.btnHeadline id={ id } onClick={ onClick={ } style={ style.text }>{ name }</CommonTexStyle.btnHeadline>\r\n            </CommonBtnStyle.btn> \r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../Storage.js';\r\nimport '../Style/SearchBar.css';\r\n\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <section className=\"searchBar__searchContainer\">\r\n                Komande sökfunktion!!!\r\n            {/* <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n            </button> */}\r\n\r\n        </section>\r\n    );\r\n}","export const tableHeadline = [\r\n    'Datum', 'Akitvitet', 'Status', 'Berörda', 'Typ', 'Plats', 'Innehåll'\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../Style/SQLTable.css';\r\nimport { tableHeadline } from '../Data/TableHeadline';\r\nexport let TableHead = () => {\r\n    return(\r\n        <thead>\r\n            <tr>\r\n                {\r\n                    tableHeadline.map((item, index) => {\r\n                        return(\r\n                            <th key={ index }>{ item } </th> \r\n                        );\r\n                    })\r\n                }\r\n            </tr>\r\n        </thead>\r\n    );\r\n}","import styled from 'styled-components';\r\nimport { CommonBtnStyle } from './CommonStyle';\r\n\r\n// ============================== Already logedIn ==============================\r\nexport let LogedInStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    margin-left: 820px;\r\n    margin-top: -8px;\r\n  `,\r\n  logedInUser: styled.section`\r\n    border: 1px solid red;\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-left: 51px;\r\n    `,\r\n  btnSubmitLogoutInTopUp: styled.section`\r\n    margin-top: -10px;\r\n  `,\r\n}\r\n// ============================== UserSpecificStyle ==============================\r\nexport const UserInputForm = {\r\n  width: \"100%\",\r\n}\r\nexport let UserInputSelect = {\r\n  container: styled.section`\r\n    margin-left: 0;\r\n    margin-top: 0;\r\n  `,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { UserInputForm, UserInputSelect } from '../Style/LogedInStyle'\r\nexport let CellInput = (props) => {\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n    console.log(props.options);\r\nconst { dataType, cellIndex, inputOnChange, sOonClick={, cellStr, placeholder } = props;\r\n    return(\r\n        <>\r\n            <input \r\n                type=\"text\"\r\n                style={ UserInputForm.UserInputForm }\r\n                data-type={ dataType } \r\n                data-typenr={ cellIndex }\r\n                onChange={ inputOnChange } \r\n                placeholder={ placeholder }\r\n            />\r\n            <UserInputSelect.container>\r\n                <select key={ cellIndex } onChange={ sOonClick={ }>\r\n                    <option>Välj</option>\r\n                    {(props.options !== false) \r\n                        ? props.options.map((item, optionIndex) => {\r\n                            return(\r\n                                <option key={ optionIndex } id={ optionIndex } value={ item }>{ item }</option>\r\n                            );\r\n                        })\r\n                        : null\r\n                    } \r\n                </select>\r\n            </UserInputSelect.container>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { tableHeadline } from '../Data/TableHeadline';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { axiosPost } from '../Data/Axios';\r\nimport { CellInput } from '../Data/CellInput';\r\nimport { optionColListArr$ } from '../Storage';\r\n\r\nexport let ListAddForm = (props) => {\r\n    //let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ structuredSQLDataArr, updateStructuredSQLDataArr ] = useState([]);\r\n    //let [ addedCellData, updateAddedCellData ] = useState([]);\r\n    let [ addedRecordData, updateAddedRecordData ] = useState([]);\r\n    let [ addedRecords, updateAddedRecords ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        optionColListArr$.subscribe((SQLColListArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure \r\n            \r\n            if (SQLColListArr) if(structuredSQLDataArr.length === 0) updateStructuredSQLDataArr(SQLColListArr);\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n        //createRecordsBody();\r\n     }, [addedRecordData]);\r\n     \r\n    let setStrsType = (e) => {\r\n        const puschToAddedRecordData = [...addedRecordData];\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        console.log(\"setStrsType -> inputStr\", inputStr)\r\n        \r\n        const {dataset} = type;\r\n    \r\n        for (let index = 0; index < tableHeadline.length; index++) if (dataset.type === tableHeadline[index]) puschToAddedRecordData[dataset.typenr] = inputStr;\r\n        updateAddedRecordData(puschToAddedRecordData);\r\n        \r\n    }\r\n    console.log(\"setStrsType -> addedRecordData\", addedRecordData)\r\n    const chooseSelectOption = (e) => {\r\n        const getChoosedSelectOption = e.target.value;\r\n        \r\n        console.log(\"chooseSelectOption -> getChoosedSelectOption\", getChoosedSelectOption)\r\n    }\r\n    const addCellData = (cellData) => {\r\n        let pushToAddCellData = [...addCellData];\r\n        \r\n    }\r\n    let runAddRow = (e) => {\r\n        const pushToAddedRecords = [...addedRecords];\r\n\r\n        // Gets the element\r\n        let targetBtnId = e.target.id;     \r\n        console.log(\"setStrsType -> addedRecordData\", addedRecordData);\r\n        //let addedRecord = [0, dateStr, activityStr, stateStr, concernedStr, typeStr, placeStr, contentStr];\r\n        pushToAddedRecords.push(addedRecordData);\r\n        updateAddedRecords(pushToAddedRecords);\r\n        //runSendToSQL(addedRecord);\r\n    }\r\n    let runSendToSQL = (sqlBody) => {        \r\n        axiosPost('add', sqlBody);\r\n    }  \r\n    let sendInUserData = (e) => {\r\n        //updateAddedData(true);\r\n        //console.log(dateStr);\r\n        // Created a body for the added data\r\n        \r\n        //console.log(sqlBody);\r\n        \r\n    }\r\n    const mappCols = (itemIndex) => {\r\n        let saveToColsArr = [];\r\n        console.log(\"mappCols -> structuredSQLDataArr[itemIndex]\", structuredSQLDataArr[itemIndex])\r\n    }\r\n    return(\r\n        <>\r\n            <tr>\r\n                {\r\n                    tableHeadline.map((item, cellIndex) => {\r\n                        return(\r\n                            <td key={ cellIndex }>\r\n                                <CellInput \r\n                                    dataType={ item }\r\n                                    cellIndex={ cellIndex }\r\n                                    inputOnChange={ setStrsType }\r\n                                    sOonClick={ chooseSelectOption }\r\n                                    cellStr={ addedRecordData[cellIndex] }\r\n                                    placeholder={ \"  ...\" }\r\n                                    options={ structuredSQLDataArr[cellIndex] !== undefined && structuredSQLDataArr[cellIndex] }\r\n\r\n                               />\r\n                            </td>\r\n                        );\r\n                    })\r\n                }                          \r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <SubmitBtn\r\n                        style={ '' }\r\n                        name={ '+' }\r\n                        onClick={ runAddRow }\r\n                        id={ 'moreRecords' }\r\n                    />\r\n{/*                     <SubmitBtn\r\n                        style={ '' }\r\n                        name={ 'Skicka In' }\r\n                        onClick={ runSendToSQL }\r\n                        id={ 'sendIn' }\r\n                    /> */}\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    Dina Aktiviteter\r\n                </td>\r\n            </tr>\r\n        </>          \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {GenerallyStyle } from '../Style/MainStyle'\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { gotoPage$ } from '../Storage';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\n\r\n//import { axiosGet } from '../Data/Axios';\r\nimport { SearchBar } from './SearchBar';\r\n//import { correctRoutes } from '../Data/runAppUrls';\r\nimport { TableHead } from './TableHead';\r\nimport { ListSQLData } from './ListSQLData';\r\nimport '../Style/SQLTable.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\nimport styled from 'styled-components';\r\nimport { routeName } from '../Data/RouteNames';\r\n//import { localPubAppUrls } from '../Data/runAppUrls.js';\r\nimport { ListAddForm } from '../Structure/ListAddForm';\r\n\r\nexport let HeadTable = (props) => {\r\n    let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n    const { tableHead, tableBody } = props;\r\n    const {addRecordsBtn} = props;    \r\n    useEffect(() => {\r\n        gotoPage$.subscribe((gotoPage) => {\r\n            console.log(\"HeadTable -> gotoPage\", gotoPage)\r\n            updateRedirectToPage(gotoPage);\r\n        });\r\n    },[]); \r\n    return (\r\n        <GenerallyStyle.body__contents>\r\n            {redirectToPage !== routeName.addRecords && <SearchBar/>} \r\n            <section id=\"container__tableSchedule\">\r\n                <table id=\"tableSchedule__body\">\r\n                    <TableHead/>\r\n                    <tbody id=\"tableSchedule__tBody\">\r\n                        {redirectToPage === routeName.addRecords && <Redirect to={ `/${ routeName.addRecords }`} />}\r\n                            <Route path={ '/Add' } component={ ListAddForm }/>\r\n                        <ListSQLData/>\r\n                    </tbody>                    \r\n                </table>\r\n            </section>\r\n        </GenerallyStyle.body__contents>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== Auth ==============================\r\nexport let AuthStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex; nd;\r\n    margin-left: 820px;\r\n    margin-top: -8px;\r\n  `,\r\nlogInSpinnerMove: styled.section`\r\n    margin-left: 3px;\r\n  `,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GenerallyStyle } from '../Style/MainStyle';\r\nimport { AuthStyle } from '../Style/AuthStyle';\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport { headName$, gotoPage$, updateGotoPage } from '../Storage.js';\r\nimport Spinner from './Spinner.js';\r\nimport { Headbar } from '../Structure/Headbar.js';\r\nimport { HeadTable } from '../Structure/HeadTable';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport {axiosGet, axiosPost } from './Axios';\r\nimport { getLocalStorageData } from './LocalStorage';\r\nexport let Auth = () => {\r\n    const [ appName, setAppName ] = useState('');  \r\n    \r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        }); \r\n    }, []);\r\n    let runLogin = () => {\r\n        setTimeout(() => {\r\n            updateGotoPage('Inloggad');\r\n        }, 500)\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n\r\n            <Headbar\r\n                appStatus={\r\n                    <AuthStyle.statusContainer>\r\n                        Du loggas in ...\r\n                        <Spinner/>\r\n                        {runLogin()}\r\n                    </AuthStyle.statusContainer>\r\n                }\r\n                /> \r\n            <HeadTable/>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GenerallyStyle, HeadbarStyle } from '../Style/MainStyle';\r\n\r\nimport { axiosPost } from '../Data/Axios.js';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { userData$, gotoPage$, getLogStatus } from '../Storage.js';\r\nimport { Auth } from '../Data/Authorization';\r\nimport { log } from 'util';\r\n\r\nimport { LogedIn } from '../../LogedIn.js';\r\n\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\n\r\nimport { nfapply } from 'q';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let Headbar = (props) => {\r\n    const { appStatus } = props;\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ appName ] = useState('Årsklockan');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    let [ gotoIntoPage, updateGotoIntoPage ] = useState('');\r\n\r\n    useEffect(() => {\r\n        userData$.subscribe((userDispalyingObj) => {\r\n            setInlogStatus(userDispalyingObj.responsType);\r\n            setInlogMess(userDispalyingObj.logInMess);\r\n        });\r\n        gotoPage$.subscribe((gotoPage) => {\r\n            updateGotoIntoPage(gotoPage);\r\n        });\r\n\r\n        /*         let getGotoPage = JSON.parse(window.localStorage.getItem(\"appData\")).responsType;\r\n        updateGotoPage(getGotoPage);\r\n        */        //if (gotoPage === 'LogedOut') return <Redirect to={`${ appUrl }LogedOut`} />;\r\n    }, [appUrl, gotoIntoPage]);\r\n\r\n    return (\r\n        <>\r\n            <HeadbarStyle.header>\r\n                <HeadbarStyle.headContainer>\r\n                    <HeadbarStyle.headline>{ appName }</HeadbarStyle.headline>\r\n                    {appStatus}\r\n                </HeadbarStyle.headContainer> \r\n                    \r\n                    \r\n                    \r\n                    {/* <GenerallyStyle.askMarkMove><i className=\"material-icons\">contact_support</i></GenerallyStyle.askMarkMove> */}\r\n            </HeadbarStyle.header>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { LogedInStyle } from '../Style/LogedInStyle';\r\nimport { specificStyleLogout } from '../Style/SpecificStyleBtn';\r\nimport Spinner from '../Data/Spinner';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\n\r\nexport let LogedInStatus = (props) => {\r\n    const { inlogedUser, functionLogOut, sumbitBtnGotTo } = props;\r\n    return(\r\n        <>\r\n            <LogedInStyle.statusContainer>\r\n                {(inlogedUser === '' ) \r\n                    ? <>\r\n                            Välkommen in ... <Spinner/>\r\n                        </>\r\n                    : `Välkommen in ${ inlogedUser }`\r\n                }\r\n            </LogedInStyle.statusContainer>\r\n            <LogedInStyle.btnSubmitLogoutInTopUp>\r\n                <SubmitBtn\r\n                    style={ specificStyleLogout }\r\n                    name={ 'Logga Ut' }\r\n                    onClick={ functionLogOut }\r\n                    id={ '/' }\r\n                    />\r\n            </LogedInStyle.btnSubmitLogoutInTopUp> \r\n        \r\n            { sumbitBtnGotTo }\r\n        </>\r\n    );\r\n}","import styled from 'styled-components';\r\nimport { CommonBtnStyle, CommonTexStyle} from './CommonStyle';\r\n\r\n// ============================== Headbar ==============================\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: -39px 0px 0px -5px;\r\n    `,\r\n  headContainer: styled.section`\r\n    width: 1400px;\r\n    height: 103px;\r\n    margin-left: calc(50% - 700px);\r\n    background: #FFFFFF;\r\n  `,\r\n  headline: styled.section`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 32px;\r\n    margin-top: 46px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    line-height: 80px;\r\n    color: #AE0B05;\r\n  `,\r\n  statusContainer: styled.section`\r\n    width: 706px;\r\n    height: 75px;\r\n    margin-left: 770px;\r\n    margin-top: -53px;\r\n  `,\r\n  }\r\n// ============================== LoginForm ==============================\r\nexport let LoginFormStyle = {\r\n  statusContainer: styled.section`\r\n    width: 706px;\r\n    height: 75px;\r\n    margin-left: 770px;\r\n    margin-top: -67px;\r\n`,\r\n  usernameContainer: styled.section`\r\n    margin-left: 10px;\r\n    margin-top: 30px;\r\n    margin-bottom: -25px;\r\n  `,\r\n  passwordContainer: styled.section`\r\n    margin-left: 256px;\r\n    margin-top: -69px;\r\n    margin-bottom: -25px;\r\n    `,\r\n  labelFormatUsernamePassword: styled.p`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 10px;\r\n    margin-bottom: -25px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n    color: #000000;\r\n    `,\r\n  inputFormatUsernamePassword: styled.input`\r\n    width: 228px;\r\n    height: 29px;\r\n    margin-left: 0px;\r\n    margin-top: 0px;\r\n    background: #F5F5F5;\r\n    border: 1px solid #E5E5E5;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n  `,  \r\n  btnLoginContainer: styled.section`\r\n    width: 181px;\r\n    height: 80%;\r\n    margin-left: 499px;\r\n    margin-top: -55px;\r\n  `,\r\n  userInfoContainer: styled.section`\r\n    width: 377px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  `,\r\n  userErrorMess: styled.p`\r\n    margin-top: 14px;\r\n    margin-left: 18px;\r\n    width: 149px;\r\n    font-size: 13.5px;\r\n    color: #AE0B05;\r\n    font-weight: bold;\r\n  `,\r\n  regLink: styled.section`\r\n    margin-right: -50px;\r\n    margin-top: 10px;\r\n    width: 200px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n    text-align: center;\r\n    color: black;\r\n    font-size: 12px;\r\n  `,\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { HeadbarStyle } from '../Style/MainStyle';\r\nimport { LoginFormStyle } from '../Style/LoginFormStyle';\r\nimport { routeName } from '../Data/RouteNames';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { specificBtnLStyleLogin } from '../Style/SpecificStyleBtn';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { from } from 'rxjs';\r\n\r\nexport let LoginForm = (props) => {\r\n    const {appUrl, onChangeUserName, onChangeUserPwd, userNameStr, userPwdStr, runAuth, runReg, inlogStatus, inlogMess} = props;\r\n\r\n    return(\r\n        <LoginFormStyle.statusContainer>\r\n            <LoginFormStyle.usernameContainer>\r\n                <LoginFormStyle.labelFormatUsernamePassword>Användarnamn</LoginFormStyle.labelFormatUsernamePassword>\r\n                <LoginFormStyle.inputFormatUsernamePassword type=\"text\" onChange={ onChangeUserName } value={ userNameStr } placeholder=\"...\"/>\r\n            </LoginFormStyle.usernameContainer> \r\n            <LoginFormStyle.passwordContainer>\r\n                <LoginFormStyle.labelFormatUsernamePassword>Lösenord</LoginFormStyle.labelFormatUsernamePassword>\r\n                <LoginFormStyle.inputFormatUsernamePassword type=\"text\" onChange={ onChangeUserPwd } value={ userPwdStr } placeholder=\"...\"/>\r\n            </LoginFormStyle.passwordContainer>  \r\n\r\n            <LoginFormStyle.btnLoginContainer>\r\n                <SubmitBtn\r\n                    style={ specificBtnLStyleLogin }\r\n                    name={ 'Logga In' }\r\n                    onClick={ runAuth }\r\n                    id={ 'Auth' }\r\n                />\r\n            </LoginFormStyle.btnLoginContainer>\r\n            \r\n            <LoginFormStyle.userInfoContainer>\r\n                <LoginFormStyle.userErrorMess>\r\n                    {(inlogStatus === 203)\r\n                        ? (userNameStr === null && userPwdStr === null ) \r\n                            ? inlogMess : null\r\n                        : null\r\n                    }\r\n                </LoginFormStyle.userErrorMess>\r\n                <LoginFormStyle.regLink>\r\n                    <Link to={ appUrl + routeName.userReg } onClick={ runReg } id=\"Registrera\">\r\n                        Registrera ny användare\r\n                    </Link>\r\n                </LoginFormStyle.regLink>\r\n            </LoginFormStyle.userInfoContainer>\r\n        </LoginFormStyle.statusContainer>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateGotoPage, userData$, getLogStatus } from '../Storage.js';\r\nimport { formInputObj } from '../../MainPage.js';\r\nimport { axiosPost } from './Axios.js';\r\n\r\nimport '../Style/LogInOut.css';\r\nimport { localPubAppUrls } from './runAppUrls.js';\r\n\r\nimport { isArray } from 'util';\r\n\r\n/* export let updatedUserNameStr = ''\r\nexport let updatedUserPwdStr = ''; */\r\nconsole.log(userData$.value);\r\n\r\nexport let runLogInOut = (e) => {\r\n\r\n    let userInformation = {};\r\n    let targetBtn = e.target; \r\n    // Gets the element\r\n    let targetBtnId = targetBtn.id; \r\n    let targetBtnValue = targetBtn;\r\n    console.log(targetBtn);\r\n    // Things happen according to whare I click\r\n    if(targetBtnId === 'LogIn') {\r\n        \r\n        /* Validate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: formInputObj.userNameStr, userPassWord: formInputObj.userPwdStr}\r\n        console.log(userInformation);\r\n        \r\n        axiosPost('userValidate', userInformation);\r\n\r\n        // inkludera en promise så funktionen nedan väntar på att axios har data\r\n        let promiseRunGotoPage = new Promise((run, error) => {\r\n            console.log('promise running :)');\r\n            console.log(getLogStatus.type);\r\n            \r\n            if (getLogStatus.type === 200) {\r\n                \r\n                run();\r\n            }\r\n        });\r\n\r\n        promiseRunGotoPage.then(() => {\r\n            // Check if you are able loggin according to the incomming data\r\n            if (getLogStatus().type === 200){\r\n                console.log('klj');\r\n                \r\n                updateGotoPage(targetBtnId);\r\n                }\r\n            if (getLogStatus().type === 203) return;\r\n            //formInputObj = {};\r\n        });\r\n\r\n    }\r\n    if(targetBtnId === 'LogOut') {\r\n\r\n\r\n        \r\n        return <Redirect to={ localPubAppUrls() }/>;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport { headName$ } from '../Storage.js';\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\n\r\nimport '../Style/RegUser.css';\r\n\r\nlet countRegUser = 0;\r\n\r\nexport let RegUser = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n\r\n    let [ userFullName, setUserFullName ] = useState('');\r\n    let [ userName, setUserName  ] = useState('');\r\n    let [ userPwd, setUserPWD ] = useState('');\r\n\r\n    useEffect(() => {\r\n        \r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n    }, []);\r\n    let setStrsType = (e) => {\r\n        //console.log('nyh');\r\n        \r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n        //console.log(inputStr);\r\n        \r\n\r\n        if (dataset.type === 'fullName') setUserFullName(inputStr);\r\n        if (dataset.type === 'userName') setUserName(inputStr);\r\n        if (dataset.type === 'userPwd') setUserPWD(inputStr);\r\n    };\r\n\r\n     let sendUserReg = (e) => {\r\n        let targetBtnId = e.target.id; \r\n        // Created a body for the added data\r\n        let sqlBody = {\r\n            fullName: userFullName,\r\n            userName: userName,\r\n            userPassWord: userPwd\r\n        }\r\n        //console.log(sqlBody);\r\n        \r\n        axiosPost('userReg', 'targetBtnId', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n    };\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Registrera`}</title>\r\n            </Helmet>\r\n            <section className=\"logInOut__btnRegContainer\">\r\n                <div className=\"btnContainer__cancelReg\">\r\n                    <input type=\"submit\" className=\"btnLogOut__cancelReg\" value=\"\"/>\r\n                    <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                        <p className=\"btnHeadline__cancelReg\">Avbryt</p>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n            <section className=\"regUser__regContainer\">\r\n                <form>\r\n                    <div>\r\n                        <label id=\"userFullName\">Ditt Namn</label>\r\n                        <input type=\"text\" id=\"userFullName\" data-type=\"fullName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userName\">Användarnamn</label>\r\n                        <input type=\"text\" id=\"userName\" data-type=\"userName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userPwd\">Lösenord</label>\r\n                        <input type=\"text\" id=\"userPwd\" data-type=\"userPwd\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"submit\" className=\"regContainer__submitBtn\" value=\"\" onClick={ sendUserReg } id=\"login\"/>\r\n                        <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                            <p className=\"regContainer__headline\" onClick={ sendUserReg } id=\"Login\">Registrera</p>\r\n                        </Link>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n     \r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nimport { routeName } from './Components/Data/RouteNames';\r\n\r\nimport { LoginForm } from './Components/Data/LoginForm'\r\nimport { HeadbarBtn } from './Components/Structure/HeadbarBtn';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { headName$, userData$, getLogStatus, updateGotoPage} from './Components/Storage.js';\r\nimport {axiosGet, axiosPost } from './Components/Data/Axios';\r\n\r\n\r\nimport { runLogInOut } from './Components/Data/LogInOut.js';\r\nimport { LogedIn } from './LogedIn.js';\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\n\r\nimport { Headbar } from './Components/Structure/Headbar.js';\r\nimport { HeadTable } from './Components/Structure/HeadTable';\r\nimport { RegUser } from './Components/Structure/RegUser';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let MainPage = () => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    const [ userNameStr, updateUserNameStr ] = useState('');\r\n    const [ userPwdStr, updateUserPwdStr ] = useState('');\r\n    let [ redirectToPage, updateRedirectToPage ] = useState('Auth');\r\n\r\n    useEffect(() => {   \r\n        //console.log('ecsfv');\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        userData$.subscribe((returningUserDispalyingObj) => {\r\n            //console.log(returningUserDispalyingObj);\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n        if(redirectToPage === '/') return <Redirect to='/' />\r\n        if(redirectToPage === 'RegUser') return <Redirect to='/Auth' />\r\n        \r\n    }, []);\r\n    //console.log(inlogStatus);\r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        //;\r\n        \r\n        updateUserNameStr(targetUserName);\r\n        //formInputObj['userNameStr'] = targetUserName;\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        //;\r\n        updateUserPwdStr(targetUserPwd);\r\n        //formInputObj['userPwdStr'] = targetUserPwd;\r\n    }\r\n    let runAuth = (e) => {\r\n        let userInformation = {};\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n        console.log(\"runAuth -> targetBtnId\", targetBtnId)\r\n  \r\n        /* Authorization with a token as response backValidate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: userNameStr, userPassWord: userPwdStr}\r\n        \r\n        axiosPost(targetBtnId, userInformation);    \r\n        updateGotoPage(targetBtnId);\r\n        //if (inlogStatus === 203) return; \r\n    }\r\n    let runReg = () =>{\r\n\r\n    }    \r\n    return (\r\n        <>  \r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LoginForm\r\n                        appUrl={appUrl}\r\n                        onChangeUserName={onChangeUserName}\r\n                        userNameStr={userNameStr}\r\n                        onChangeUserPwd={onChangeUserPwd}\r\n                        userPwdStr={userPwdStr}\r\n                        runAuth={runAuth}\r\n                        runReg={runReg}\r\n                        inlogStatus={inlogStatus}\r\n                        inlogMess={inlogMess}\r\n                    />\r\n                }\r\n            />\r\n            \r\n            <Route exact path={appUrl} component={ HeadTable }/>\r\n            <Route exact path={ appUrl + routeName.userReg } component={ RegUser }/>   \r\n\r\n        </>\r\n\r\n    );\r\n}","import { updateLocalstorage, updateGotoPage } from '../Storage.js';\r\n\r\nexport let runLogOut = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    console.log(\"runLogOut -> targetBtnId\", targetBtnId)\r\n    updateGotoPage(targetBtnId);\r\n\r\n    updateLocalstorage(window.localStorage.clear());\r\n    //axiosPost('', targetBtnId, '');\r\n}\r\nexport let runAddRecord = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    \r\n    updateGotoPage(targetBtnId);\r\n}\r\nexport let runReturnFromAddRecord = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    \r\n    updateGotoPage(targetBtnId);\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { HeadbarStyle } from './Components/Style/MainStyle';\r\nimport { GenerallyStyle } from './Components/Style/MainStyle'\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport './Components/Style/Spinner.scss';\r\nimport { routeName } from './Components/Data/RouteNames';\r\nimport { specificStyleGotTo } from './Components/Style/SpecificStyleBtn';\r\n\r\nimport { HeadTable } from './Components/Structure/HeadTable';\r\nimport { axiosPost } from './Components/Data/Axios';\r\nimport { Headbar } from './Components/Structure/Headbar';\r\nimport { LogedInStatus } from './Components/Structure/LogedInStatus';\r\nimport { SubmitBtn } from './Components/Data/SubmitBtn';\r\n\r\nimport { MainPage } from './MainPage.js';\r\nimport axios from 'axios';\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$ } from './Components/Storage.js';\r\nimport { runLogOut, runAddRecord } from './Components/Data/CommonFunction';\r\n\r\nimport { log } from 'util';\r\n\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\n\r\nexport let LogedIn = () => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ appName, setAppName ] = useState('');\r\n      let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n\r\n    useEffect(() => {\r\n        //setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        //}, 1000);\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {         \r\n            updateInlogedUser(inlogedUserFullName);\r\n        }); \r\n    }, []);\r\n \r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Inloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LogedInStatus\r\n                        inlogedUser={ inlogedUser }\r\n                        functionLogOut={ runLogOut }\r\n                        sumbitBtnGotTo= {\r\n                            <SubmitBtn\r\n                                style={ specificStyleGotTo }\r\n                                name={ 'Lägga Till' }\r\n                                onClick={ runAddRecord }\r\n                                id={ 'Add' }\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            />\r\n            \r\n            <HeadTable/>\r\n            {/* <Route exact path={appUrl + routeName.login } component={ HeadTable }/> */}\r\n        </>\r\n    );\r\n}\r\n/* <div className=\"btnContainer__btnAdd\">\r\n    <input type=\"submit\" className=\"btnLogOut__input\" onClick={ MainPage.runLogInOut } id=\"add\" value=\"\"/>\r\n    <Link to={ `${ appUrl }/Add`} className=\"btnContainer__inputHeadline\" onClick={ MainPage.runLogInOut } id=\"add\">\r\n        <p className=\"btnHeadline__add\" id='add'>Lägg Till</p>\r\n    </Link>\r\n</div> */","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\nimport { Headbar } from './Headbar';\r\nimport { LogedInStatus } from './LogedInStatus';\r\n\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$ } from '../Storage.js';\r\nimport { runLogOut, runReturnFromAddRecord } from '../Data/CommonFunction';\r\n\r\nimport '../Style/FormAdd.css';\r\nimport {GenerallyStyle } from '../Style/MainStyle'\r\nimport { TableHead } from './TableHead';\r\nimport { HeadTable } from './HeadTable';\r\n\r\n\r\nimport { axiosPost } from '../Data/Axios.js';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { specificStyleGotTo } from '../Style/SpecificStyleBtn';\r\n\r\nexport let AddRecords = (props) => {\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n\r\n    useEffect(() => {\r\n        updateInlogedUserFullName(); \r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {         \r\n            updateInlogedUser(inlogedUserFullName);\r\n        });\r\n     }, []);\r\n   \r\n    \r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Lägg Till`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LogedInStatus\r\n                        inlogedUser={ inlogedUser }\r\n                        functionLogOut={ runLogOut }\r\n                        sumbitBtnGotTo= {\r\n                            <SubmitBtn\r\n                                style={ specificStyleGotTo }\r\n                                name={ 'Återgå' }\r\n                                onClick={ runReturnFromAddRecord }\r\n                                id={ 'Inloggad' }\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            />\r\n            <HeadTable/>\r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { routeName } from './Components/Data/RouteNames';\r\n\r\n// React Router - ES6 modules\r\nimport { \r\n  // BrowserRouter as Router, \r\n  HashRouter, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateHeadName, getLogStatus, gotoPage$ } from './Components/Storage.js';\r\n\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\nimport { SQLTable } from './Components/Structure/ListSQLData.js';\r\nimport { LogedIn } from './LogedIn';\r\nimport { MainPage } from './MainPage.js';\r\nimport { Auth } from './Components/Data/Authorization';\r\nimport { AddRecords } from './Components/Structure/AddRecords';\r\n\r\nupdateHeadName('Årsklockan');\r\n\r\nlet MainApp = () => {\r\n  let [ appUrl, setAppUrl ] = useState('/');\r\n  let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n  console.log(\"MainApp -> redirectToPage\", redirectToPage)\r\n  \r\n  useEffect(() => {\r\n    gotoPage$.subscribe((gotoPage) => {\r\n    console.log(\"MainApp -> gotoPage\", gotoPage)\r\n      updateRedirectToPage(gotoPage);\r\n    });\r\n    \r\n  },[redirectToPage]);\r\n  console.log(\"MainApp -> appUrl\", appUrl)\r\n  console.log(\"MainApp -> redirectToPage\", redirectToPage)\r\n\r\n  return (\r\n    <HashRouter basename='/'>\r\n      {redirectToPage === routeName.mainPage && <Redirect to={ `/`} />} \r\n      {redirectToPage === routeName.auth  && <Redirect to={`/${ routeName.auth }`}/>}  \r\n      {redirectToPage === routeName.login && <Redirect to={ `/${ routeName.login }`} />} \r\n\r\n      <Route exact path={ appUrl } component={ MainPage } />\r\n      <Route exact path={ appUrl + routeName.auth } component={ Auth }/>   \r\n      <Route exact path={ appUrl + routeName.login } component={ LogedIn }/>  \r\n\r\n      {redirectToPage === routeName.addRecords && <Redirect to={ '/Add' } />}\r\n      <Route path={ '/Add' } component={ AddRecords }/>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default MainApp; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Components/Style/Body.css';\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}