{"version":3,"sources":["Components/GlobalProps.js","Components/Data/Axios.js","Components/Data/runAppUrls.js","Components/Data/LogInOut.js","Components/Data/Spinner.js","Components/Structure/SearchBar.js","Components/Structure/HeadContents.js","LogedIn.js","LogedOut.js","Components/Structure/Headbar.js","Components/Structure/FormAdd.js","Components/Structure/RegUser.js","MainApp.js","serviceWorker.js","index.js"],"names":["inlogedUserFullName","inlogedUserFullName$","BehaviorSubject","headName$","returningUserData$","incommingSQLDataArr$","gotoPage$","getLogStatus","window","localStorage","length","type","JSON","parse","getItem","responsType","mess","logInMess","updateInlogedUserFullName","incommingUserData","loginName","next","updateSavedSQLData","incommingSQLDataArr","console","log","updateLocalstorage","saveIntoLocalStorage","setItem","stringify","updateGotoPage","gotoPage","savedSQLDataArr","backendURL","axiosGet","getType","axios","get","then","response","incommingSQLRes","status","data","push","catch","error","axiosPost","postType","login","bodyData","sendToSqlBackend","post","logedInUserInfoObj","statusText","incommingObj","runAppExtUrls","localPubUrl","appUrl","location","hostname","value","runLogInOut","e","userInformation","targetBtn","target","targetBtnId","id","userName","formInputObj","userNameStr","userPassWord","userPwdStr","Promise","run","to","Spinner","props","className","SearchBar","HeadContents","useState","incommingNewSQLData","updateIncommingNewSQLData","erroLoadingSQLData","updateErroLoadingSQLData","countGetMethod","axiosGettingSQLData","success","setTimeout","result","getRedirected","pathname","useEffect","subscribe","SQLDataArr","map","sqlDataObj","rowCounter","key","date","activity","state","concerned","place","content","str","LogedIn","setAppUrl","inlogedUser","updateInlogedUser","appName","setAppName","headName","runLogOut","Helmet","charSet","onClick","LogedOut","inlogMess","setInlogMess","inlogStatus","setInlogStatus","updateUserNameStr","updateUserPwdStr","returningUserDispalyingObj","runLogIn","onChange","targetUserName","placeholder","targetUserPwd","Headbar","gotoIntoPage","updateGotoIntoPage","exact","path","component","class","FormAdd","incommingSQLData","updateIncommingSQLData","updateAddedData","dateStr","updateDateStr","activityStr","updateActivityStr","stateStr","updateStateStr","concernedStr","updateConcernedStr","typeStr","updateTypeStr","placeStr","updatePlaceStr","contentStr","updateContentStr","setStrsType","inputStr","dataset","sendInUserData","data-type","wait","UserReg","userFullName","setUserFullName","setUserName","userPwd","setUserPWD","sendUserReg","fullName","updateHeadName","MainApp","redirectToPage","updateRedirectToPage","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e54dd66a.chunk.js","sourcesContent":["import {BehaviorSubject} from \"rxjs\";\r\nlet headName = '';\r\nlet inlogedUserFullName = '';\r\nlet returningUserData = '';\r\nlet incommingSQLDataArr = [];\r\nlet gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const returningUserData$ = new BehaviorSubject(returningUserData);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\n\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\n\r\nexport const localStorageObj$ = new BehaviorSubject('');\r\n\r\n/* The functions are triggered in another place and send in its data\r\nThe incomming data is stored in a new object and the object is then, in the last function, save too localstorage \r\n*/\r\nexport function getLogStatus(){\r\n    // Run if a data i saved into the localstorage else no run\r\n    if (window.localStorage.length !== 0) {\r\n        \r\n        let getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n        let getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n        \r\n        let logInStatus = {\r\n            type: getStatusType,\r\n            mess: getLogInMess\r\n        };\r\n        //console.log(logInStatus);\r\n        \r\n        return logInStatus;\r\n    }\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    inlogedUserFullName = JSON.parse(window.localStorage.getItem(\"userData\")).incommingUserData.loginName;\r\n    inlogedUserFullName$.next(inlogedUserFullName);\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    console.log(incommingSQLDataArr.length);\r\n    \r\n    if(incommingSQLDataArr) {\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\nexport function updateReturningUserData(incommingObj){\r\n    console.log(incommingObj);\r\n    \r\n    if(incommingObj) {\r\n        returningUserData$.next(incommingObj);\r\n    }\r\n    updateLocalstorage(incommingObj);\r\n}\r\nexport let updateLocalstorage = (saveIntoLocalStorage) =>{\r\n    localStorage.setItem('userData', JSON.stringify(saveIntoLocalStorage));\r\n}\r\nexport function updateGotoPage(gotoPage){\r\n    console.log(gotoPage);\r\n    \r\n    if(gotoPage) {\r\n        gotoPage$.next(gotoPage);\r\n    }\r\n    return gotoPage;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { updateSavedSQLData, updateReturningUserData, updateGotoPage } from '../GlobalProps.js';\r\nimport { setTimeout } from 'timers';\r\n\r\nlet savedSQLDataArr = [];\r\nlet backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Deployat by Heroku \r\n//let backendURL = 'http://localhost:3001'; // Just test the backend \r\n\r\nexport let axiosGet = (getType) => {\r\n    let type = '';\r\n    // Type of post method\r\n    if (getType === 'default') type = '/SQLData';\r\n    if (getType === 'userSpec') type = `/SQLData/${ 'fredde' }`;\r\n    console.log(type);\r\n    \r\n    // Get the user inloged User and send into the backend for getting the correct user records \r\n    \r\n    axios.get(backendURL + type).then(response => {\r\n        let incommingSQLRes = []\r\n        /* Store the incomming API data in a variables - \r\n        Note that the data structure deppending on the conditions\r\n        */\r\n        if (response.status === 200 && getType === 'default') incommingSQLRes = response.data[0];\r\n        if (response.status === 200 && getType === 'userSpec') incommingSQLRes = response.data;\r\n         //console.log(incommingSQLRes);\r\n        /*  If incomming status of 200 = OK\r\n            Data i push into a arry too  GlobalProps\r\n            The array is holding the data until the webbbrowser is closed \r\n          \r\n        Default get\r\n        */\r\n          updateSavedSQLData(incommingSQLRes);\r\n        \r\n        /*  If incomming status of 201 = Created:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        */\r\n        if (response.status === 201) {\r\n            \r\n            savedSQLDataArr[0].push(incommingSQLRes[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n        else{\r\n        }\r\n    }).\r\n    catch(error => {\r\n        ////console.log(error.response);\r\n    });\r\n}\r\nlet getUserId = () => {\r\n    let getUserId = JSON.parse(window.localStorage.getItem(\"userData\")).userId;\r\n    return getUserId;\r\n}\r\nexport let axiosPost = (postType, login, bodyData) => {  \r\n    //console.log(postType);\r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    ////console.log(sendToSqlBackend);\r\n    // Type of post method\r\n    if (postType === 'userValidate') type = 'UserValidate';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    if (postType === 'userReg') type = 'UserReg';\r\n    \r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).\r\n    then(response => {\r\n        console.log(response);\r\n        \r\n        if (postType === 'userValidate'){\r\n            // Incomming userdata. T\r\n            \r\n            let logedInUserInfoObj = {\r\n                responsType: response.status,\r\n                logInMess: response.statusText, \r\n                incommingUserData: response.data,\r\n            };\r\n            console.log(logedInUserInfoObj);\r\n            //console.log(login);\r\n            \r\n            //Send the incomming data for displaying the user login status\r\n            updateReturningUserData(logedInUserInfoObj);\r\n\r\n            if (response.status === 200) updateGotoPage(login);\r\n            //console.log(logedInUserInfoObj);\r\n        }\r\n    }).\r\n    catch(error => {\r\n        ////console.log(error.response);\r\n    });\r\n}\r\n","export let runAppExtUrls = () => {\r\n  let localPubUrl = '';\r\n  let appUrl = window.location;\r\n  console.log(appUrl);\r\n  \r\n  ////console.log(appUrl.pathname.split('/')[1]);\r\n  \r\n  // Check if ther is any components that can be reuse\r\n  //if(appUrl.pathname.split('/')[1] === 'LogIn') localPubUrl = appUrl.pathname.split('/')[1];\r\n  \r\n  // Check if in dev or pub mode´; \r\n  if (appUrl.hostname === 'localhost') localPubUrl = '/';\r\n  if (appUrl.hostname === 'fredrikhj.github.io') localPubUrl = '/ScheduleApp/';\r\n  \r\n  //console.log(localPubUrl);\r\n  \r\n  return localPubUrl;\r\n}\r\nexport let runAppIntUrls = () => {\r\n  let appUrl = window.location;  \r\n  return appUrl;\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateLocalstorage, updateGotoPage, returningUserData$, getLogStatus } from '../GlobalProps.js';\r\nimport { formInputObj } from '../../LogedOut.js';\r\nimport { axiosPost } from './Axios.js';\r\n\r\nimport '../CSS/LogInOut.css';\r\nimport { runAppExtUrls } from './runAppUrls.js';\r\n\r\nimport { isArray } from 'util';\r\n\r\n/* export let updatedUserNameStr = ''\r\nexport let updatedUserPwdStr = ''; */\r\nconsole.log(returningUserData$.value);\r\n\r\nexport let runLogInOut = (e) => {\r\n\r\n    let userInformation = {};\r\n    let targetBtn = e.target; \r\n    // Gets the element\r\n    let targetBtnId = targetBtn.id; \r\n    let targetBtnValue = targetBtn;\r\n    console.log(targetBtn);\r\n    // Things happen according to whare I click\r\n    if(targetBtnId === 'LogIn') {\r\n        \r\n        /* Validate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: formInputObj.userNameStr, userPassWord: formInputObj.userPwdStr}\r\n        console.log(userInformation);\r\n        \r\n        axiosPost('userValidate', userInformation);\r\n\r\n        // inkludera en promise så funktionen nedan väntar på att axios har data\r\n        let promiseRunGotoPage = new Promise((run, error) => {\r\n            console.log('promise running :)');\r\n            console.log(getLogStatus.type);\r\n            \r\n            if (getLogStatus.type === 200) {\r\n                \r\n                run();\r\n            }\r\n        });\r\n\r\n        promiseRunGotoPage.then(() => {\r\n            // Check if you are able loggin according to the incomming data\r\n            if (getLogStatus().type === 200){\r\n                console.log('klj');\r\n                \r\n                updateGotoPage(targetBtnId);\r\n                }\r\n            if (getLogStatus().type === 203) return;\r\n            //formInputObj = {};\r\n        });\r\n\r\n    }\r\n    if(targetBtnId === 'LogOut') {\r\n\r\n\r\n        \r\n        return <Redirect to={ runAppExtUrls() }/>;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/Spinner.scss';\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n            <div className=\"spinner spinner-dark\"></div>\r\n        </>\r\n    );\r\n}\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\nimport '../CSS/SearchBar.css';\r\n\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <section className=\"searchBar__searchContainer\">\r\n                Komande sökfunktion!!!\r\n            {/* <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n            </button> */}\r\n\r\n        </section>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\nimport { LogInOut } from '../Data/LogInOut.js';\r\nimport { axiosGet } from '../Data/Axios.js';\r\nimport { SearchBar } from './SearchBar.js';\r\nimport { runAppIntUrls } from '../Data/runAppUrls.js';\r\nimport '../CSS/SQLTable.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\n\r\nexport let HeadContents = () => {\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ erroLoadingSQLData, updateErroLoadingSQLData ] = useState(false);\r\n\r\n    let [ addForm, setAddForm ] = useState(true);\r\n    //console.log(incommingNewSQLData);\r\n    \r\n    let countGetMethod = 1;\r\n    let axiosGettingSQLData = () => {\r\n        console.log('run');\r\n        let axiosUntilGettingData = new Promise((success, error) => {       \r\n            if (countGetMethod === 1) {\r\n                success();\r\n                countGetMethod++;\r\n            }\r\n            if (countGetMethod === 2) {\r\n                setTimeout(() => {\r\n                    updateErroLoadingSQLData(true)\r\n                }, 1000);\r\n            }\r\n            //console.log(countGetMethod);\r\n            \r\n            //else error('Kunde inte ladda datan :(');\r\n        });\r\n\r\n        // Run default SQL list\r\n        axiosUntilGettingData.then((result) => {\r\n            let getRedirected = runAppIntUrls().pathname;\r\n            if (getRedirected === '/') axiosGet('default');\r\n            if (getRedirected === '/Login') axiosGet('userSpec');\r\n\r\n        }).catch((result) =>{\r\n            updateErroLoadingSQLData(result);\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        axiosGettingSQLData();\r\n        \r\n        //setTimeout(() => {\r\n        //axiosUntilGettingData();\r\n          \r\n        //}, 3000);\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure \r\n            \r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n     },[]); \r\n    let runAdmin = (e) => {\r\n        let targetBtn = e.target.dataset.admin;\r\n        if (targetBtn === 'logIn') setAddForm(true);\r\n        if (targetBtn === 'logOut') setAddForm(false);\r\n    }\r\n    return (\r\n        <main className=\"body__contents\">\r\n            <SearchBar/>\r\n            <section id=\"container__tableSchedule\">\r\n                <table id=\"tableSchedule__body\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Datum</th>\r\n                            <th className=\"tableCol4\">Akitvitet</th>\r\n                            <th>Status</th>\r\n                            <th>Berörda</th>\r\n                            <th>Typ</th>\r\n                            <th>Plats</th>\r\n                            <th className=\"tableCol9\">Innehåll</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody id=\"tableSchedule__tBody\">\r\n                        {(incommingNewSQLData.length !== 0) \r\n                            ?\r\n                            incommingNewSQLData.map((sqlDataObj, rowCounter) => {\r\n                                \r\n                                return(\r\n                                    <tr key={ rowCounter }>\r\n                                        <td>{ sqlDataObj.date }</td>\r\n                                        <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                        <td>{ sqlDataObj.state }</td>\r\n                                        <td>{ sqlDataObj.concerned }</td>\r\n                                        <td>{ sqlDataObj.type }</td>\r\n                                        <td>{ sqlDataObj.place }</td>\r\n                                        <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        :   \r\n                            <>\r\n                                <tr><td>\r\n                                    {(erroLoadingSQLData !== true) \r\n                                        ? <Spinner str={'Data laddas'}/>\r\n                                        : <section>Datan laddades inte ---> Hjälp!</section>\r\n                                    }\r\n                                </td></tr>\r\n                            </>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        </main>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport './Components/CSS/Spinner.scss';\r\nimport './Components/CSS/Generall.css';\r\nimport Spinner from './Components/Data/Spinner.js';\r\nimport { HeadContents } from './Components/Structure/HeadContents.js';\r\nimport { axiosPost } from './Components/Data/Axios.js';\r\n\r\n\r\n//import { LogInOut } from './LogInOut.js';\r\n\r\n//import { runLogInOut } from './Components/Data/LogInOut.js';\r\nimport { LogedOut } from './LogedOut.js';\r\nimport axios from 'axios';\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$, updateLocalstorage, updateGotoPage } from './Components/GlobalProps.js';\r\n\r\nimport { log } from 'util';\r\n\r\nimport { runAppExtUrls } from './Components/Data/runAppUrls.js';\r\n\r\nexport let LogedIn = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ appName, setAppName ] = useState('');   \r\n\r\n    useEffect(() => {\r\n        setAppUrl(runAppExtUrls());\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {         \r\n            updateInlogedUser(inlogedUserFullName);\r\n        }); \r\n        setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        }, 1000);\r\n    }, []);\r\n    let runLogOut = (e) => {\r\n        updateGotoPage('LogOut');\r\n        // Gets the element\r\n        let targetBtnId = e.target.id;     \r\n        updateLocalstorage({\r\n            responsType: null,\r\n            logInMess: null, \r\n            incommingUserData: {\r\n                loginName: null\r\n            }\r\n        });\r\n        //axiosPost('', targetBtnId, '');\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Inloggad`}</title>\r\n            </Helmet>\r\n\r\n            <p className=\"logInOut__logedInUser\">\r\n                {(inlogedUser === '' ) \r\n                ? <>\r\n                    Du loggas in ...\r\n                    <div className=\"logInSpinnerMove\"> <Spinner/></div>\r\n                    </>\r\n                : `Välkommen in ${ inlogedUser }`\r\n                }\r\n            </p>      \r\n            <section className=\"logInOut__btnInContainer\">\r\n                <div className=\"btnContainer__btnLogOut\">\r\n                    <input type=\"submit\" className=\"btnLogOut__input\" onClick={ runLogOut } id=\"LogOut\" value=\"\" />\r\n                    <Link to={ appUrl } className=\"btnContainer__inputHeadline\" onClick={ runLogOut } id=\"LogOut\">\r\n                        <p className=\"btnHeadline__logout\" id=\"LogOut\">Logga Ut</p>\r\n                    </Link>   \r\n                </div>\r\n                <div className=\"btnContainer__btnAdd\">\r\n                    <input type=\"submit\" className=\"btnLogOut__input\" onClick={ LogedOut.runLogInOut } id=\"add\" value=\"\"/>\r\n                    <Link to={ `${ appUrl }/Add`} className=\"btnContainer__inputHeadline\" onClick={ LogedOut.runLogInOut } id=\"add\">\r\n                        <p className=\"btnHeadline__add\" id='add'>Lägg Till</p>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n            \r\n        </>\r\n    );\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nimport './Components/CSS/Generall.css';\r\nimport { axiosPost } from './Components/Data/Axios.js';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { headName$, returningUserData$, getLogStatus, updateGotoPage, updateSavedSQLData} from './Components/GlobalProps.js';\r\n\r\nimport { log } from 'util';\r\n\r\nimport { runLogInOut } from './Components/Data/LogInOut.js';\r\nimport { LogedIn } from './LogedIn.js';\r\nimport { runAppExtUrls } from './Components/Data/runAppUrls.js';\r\n\r\nimport { nfapply } from 'q';\r\nimport { setTimeout } from 'timers';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let LogedOut = () => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    const [ userNameStr, updateUserNameStr ] = useState(null);\r\n    const [ userPwdStr, updateUserPwdStr ] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        setAppUrl(runAppExtUrls());\r\n        //console.log('ecsfv');\r\n        \r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        returningUserData$.subscribe((returningUserDispalyingObj) => {\r\n            //console.log(returningUserDispalyingObj);\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n    }, [inlogStatus]);\r\n    //console.log(inlogStatus);\r\n    \r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        //console.log(targetUserName);\r\n        \r\n        updateUserNameStr(targetUserName);\r\n        //formInputObj['userNameStr'] = targetUserName;\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        //console.log(targetUserPwd);\r\n        updateUserPwdStr(targetUserPwd);\r\n        //formInputObj['userPwdStr'] = targetUserPwd;\r\n    }\r\n    let runLogIn = (e) => {\r\n        \r\n        let userInformation = {};\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n  \r\n        /* Validate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: userNameStr, userPassWord: userPwdStr}\r\n        //console.log(userInformation);\r\n        //updateGotoPage(login);\r\n        axiosPost('userValidate', targetBtnId, userInformation);    \r\n        if (inlogStatus === 203) return;\r\n    }\r\n    //LogedIn.runLogInOut();\r\n    //console.log(LogedIn);\r\n    \r\n    let hideShowLoginMessPromise = () => {   \r\n        let loginMess = getLogStatus().mess;\r\n        /*         let hideShowLoginMessPromise = () => {\r\n            \r\n            let hideShowMess = new Promise((showHide, error) => {       \r\n                showHide()\r\n            });\r\n            \r\n            loginMess = hideShowMess().then(() => {\r\n                setTimeout(() => {\r\n                    let loginMess= '';\r\n                    return loginMess;\r\n                }, 3000);\r\n                \r\n            })\r\n            return loginMess;\r\n        } */\r\n        \r\n    } \r\n    \r\n        return (\r\n            <>  \r\n                <Helmet>\r\n                    <meta charSet=\"utf-8\" />\r\n                    <title>{`${appName} - Utloggad`}</title>\r\n                </Helmet>\r\n                <section className=\"logInOut__usernameContainer\">\r\n                    <p className=\"logInOut__username logInOut__inputLabelFormat\">Användarnamn</p>\r\n                    <input type=\"text\" className=\"username__input\" onChange={ onChangeUserName } value={ userNameStr } placeholder=\"...\"/>\r\n                </section> \r\n                <section className=\"logInOut__passwordContainer\">\r\n                    <p className=\"logInOut__password logInOut__inputLabelFormat\">Lösenord</p>\r\n                    <input type=\"text\" className=\"password__input\" onChange={ onChangeUserPwd } value={ userPwdStr } placeholder=\"...\"/> \r\n                </section>  \r\n                <section className=\"logInOut__btnOutContainer\">\r\n                    <button className=\"btnContainer__submitBtn\" onClick={ runLogIn } id=\"Login\">\r\n                        <p className=\"btnHeadline\" id='Login'  onClick={ runLogIn }>Logga In</p>\r\n                    </button>\r\n                        \r\n                </section>\r\n                <section className=\"logInOut__userInfo\">\r\n                    <p className=\"logInOut__loginErrorMess\">\r\n                        {(inlogStatus === 203)\r\n                            ? (userNameStr === null && userPwdStr === null ) \r\n                                ? inlogMess : null\r\n                            : null\r\n                        }\r\n                    </p>\r\n                    <Link to={ `${ appUrl }UserReg` } className=\"logInOut__regLink\" onClick={ runLogInOut } id=\"logIn\">\r\n                        <p className=\"logInOut__regLink\">Registrera ny användare</p>\r\n                    </Link>   \r\n                </section>\r\n            </>\r\n\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nimport '../CSS/Headbar.css';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { returningUserData$, gotoPage$, getLogStatus } from '../GlobalProps.js';\r\n\r\nimport { log } from 'util';\r\nimport { LogedOut } from '../../LogedOut.js';\r\nimport { LogedIn } from '../../LogedIn.js';\r\n\r\n//import { runLogInOut } from '../Data/LogInOut.js';\r\nimport { runAppExtUrls } from '../Data/runAppUrls.js';\r\n\r\nimport { nfapply } from 'q';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let Headbar = () => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName ] = useState('Årsklockan');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    let [ gotoIntoPage, updateGotoIntoPage ] = useState('');\r\n    \r\n    useEffect(() => {\r\n        console.log('Headbar inne');\r\n        \r\n        setAppUrl(runAppExtUrls());\r\n        returningUserData$.subscribe((returningUserDispalyingObj) => {\r\n            //console.log(returningUserDispalyingObj);\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n        gotoPage$.subscribe((gotoPage) => {\r\n            //console.log(gotoPage);\r\n            updateGotoIntoPage(gotoPage);\r\n        });\r\n/*         let getGotoPage = JSON.parse(window.localStorage.getItem(\"appData\")).responsType;\r\n        updateGotoPage(getGotoPage);\r\n */        //if (gotoPage === 'LogedOut') return <Redirect to={`${ appUrl }LogedOut`} />;\r\n    }, [gotoPage$.value]);\r\n    console.log(gotoPage$.value);\r\n    \r\n        return (\r\n            <>  \r\n\r\n            <header>\r\n                <section className=\"headbar__headContainer\">\r\n                    <p className=\"headContainer__headline\">{ appName }</p>\r\n                    <section className=\"headContainer__userLogInOut\">\r\n                        <Route exact path={`${ appUrl }`} component={ LogedOut } />\r\n                        <Route exact path={`${appUrl}Login`} component={ LogedIn } />\r\n                            {(gotoIntoPage === 'LogIn') ? <Redirect to={`${appUrl}LogIn`}/> : null}\r\n                    </section> \r\n                    {/* <Link to={ `${ appUrl }/HelpContact`} className=\"askMarkLink\"> */}\r\n                        <i class=\"material-icons askMarkMove\">contact_support</i>\r\n                    {/* </Link> */}\r\n                </section>\r\n                    {/* <img src=\"../Data/Img/baseline_contact_support_blacBigg.png\" alt=\"Hjälp och kontakt\"/>*/}                \r\n            </header>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\n\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$, incommingSQLDataArr$ } from '../GlobalProps.js';\r\nimport '../CSS/FormAdd.css';\r\n//import { runLogInOut } from '../Data/LogInOut.js';\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { runAppExtUrls } from '../Data/runAppUrls.js';\r\n\r\nexport let FormAdd = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ incommingSQLDataResponse, updateIncommingSQLDataResponse ] = useState('');\r\n    let [ incommingSQLData, updateIncommingSQLData ] = useState([]);\r\n\r\n    let [ addedData, updateAddedData ] = useState(false);\r\n    let [ quantityOfSqlPosts, updateQuantityOfSqlPosts ] = useState(0);\r\n    let [ incommingSQLDataCols, updateIncommingSQLDataCols ] = useState([]);\r\n\r\n    let [ dateStr, updateDateStr ] = useState('');\r\n    let [ activityStr, updateActivityStr ] = useState('');\r\n    let [ stateStr, updateStateStr ] = useState('');\r\n    let [ concernedStr, updateConcernedStr ] = useState('');\r\n    let [ typeStr, updateTypeStr ] = useState('');\r\n    let [ placeStr, updatePlaceStr ] = useState('');\r\n    let [ contentStr, updateContentStr ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(runAppExtUrls());\r\n        axiosGet('userSpec');\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {\r\n            //console.log(inlogedUserFullName);\r\n            updateInlogedUser(inlogedUserFullName);\r\n        });\r\n        incommingSQLDataArr$.subscribe((incommingSQLDataArr) => {\r\n            //console.log(incommingSQLDataArr);\r\n            if (incommingSQLDataArr.status === 200) updateIncommingSQLData(incommingSQLDataArr.data[0])\r\n        });\r\n        /*\r\n            Update the inloged User after the specific time i millisec...\r\n            Use the name afte a extra millisec...\r\n        */\r\n        setTimeout(() => {\r\n            updateInlogedUserFullName(); \r\n        }, 1000);\r\n    }, []);\r\n    //console.log(incommingSQLData);  \r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n\r\n        if (dataset.type === 'date') updateDateStr(inputStr);\r\n        if (dataset.type === 'activity') updateActivityStr(inputStr);\r\n        if (dataset.type === 'state') updateStateStr(inputStr);\r\n        if (dataset.type === 'concerned') updateConcernedStr(inputStr);\r\n        if (dataset.type === 'type') updateTypeStr(inputStr);\r\n        if (dataset.type === 'place') updatePlaceStr(inputStr);\r\n        if (dataset.type === 'content') updateContentStr(inputStr);\r\n    }\r\n\r\n//console.log(incommingSQLDataCols);\r\n\r\n    let sendInUserData = (e) => {\r\n        updateAddedData(true);\r\n        //console.log(dateStr);\r\n        // Created a body for the added data\r\n        let sqlBody = [0, dateStr, activityStr, stateStr, concernedStr, typeStr, placeStr, contentStr];\r\n        \r\n        //console.log(sqlBody);\r\n        \r\n        axiosPost('add', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n            \r\n        /* //console.log(sqlBodyObj);\r\n        updateSavedSQLData(sqlBodyObj); */\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Lägg Till`}</title>\r\n            </Helmet>\r\n            <header>\r\n                <section className=\"headbar__headContainer\">\r\n                    <p className=\"headContainer__headline\">{ appName }</p>\r\n                    <section className=\"headContainer__logInOut\">\r\n\r\n                        <p className=\"logInOut__logedInUser\">{`Välkommen in ${(inlogedUser === '') ? '...' : inlogedUser }` }</p>       \r\n\r\n                        <section className=\"logInOut__btnInContainer\">\r\n                            <div className=\"btnContainer__btnAddCanceled\">\r\n                                <input type=\"submit\" className=\"btnLogOut__input\" onClick={ '' } id=\"cancelAdd\" value=\"\"/>\r\n                                <Link to={`${ appUrl }/LogIn` }className=\"btnContainer__inputHeadline\" onClick={ '' } id=\"cancelAdd\">\r\n                                    <p className=\"btnHeadline__canceled\" id='cancelAdd'>Avbryt</p>\r\n                                </Link>\r\n                            </div>\r\n                        </section>\r\n                    </section>\r\n                </section>\r\n            </header>\r\n            <button className=\"btnAddedSendContainer__sendBtn\" onClick={ sendInUserData } id=\"sendIn\">\r\n                <p className=\"btnHeadline__sendIn\" id='sendIn' onClick={ sendInUserData }>Skicka In</p>\r\n            </button>  \r\n            <section className=\"formAdd__addContainer\">\r\n                <table className=\"addContainer__body\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Datum</th>\r\n                            <th className=\"tableCol4\">Akitvitet</th>\r\n                            <th>Status</th>\r\n                            <th>Berörda</th>\r\n                            <th>Typ</th>\r\n                            <th>Plats</th>\r\n                            <th className=\"tableCol9\">Innehåll</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody className=\"addContainer__Tbody\">\r\n                        <tr>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"date\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol4\"><input type=\"text\" className=\"addSqlInput\" data-type=\"activity\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"state\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"concerned\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"type\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"place\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol9\"><input type=\"text\" className=\"addSqlInput\" data-type=\"content\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                        </tr>\r\n                        <tr>\r\n                         {(incommingSQLData.length !== 0) \r\n                            ?\r\n                                incommingSQLData.map((sqlDataObj, rowCounter) => {\r\n                                    \r\n                                    return(\r\n                                        <tr key={ rowCounter }>\r\n                                            <td>{ sqlDataObj.date }</td>\r\n                                            <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                            <td>{ sqlDataObj.state }</td>\r\n                                            <td>{ sqlDataObj.concerned }</td>\r\n                                            <td>{ sqlDataObj.type }</td>\r\n                                            <td>{ sqlDataObj.place }</td>\r\n                                            <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            :   <tr><td><Spinner wait={ 'Datan laddas' }/></td></tr>\r\n                        }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport { headName$ } from '../GlobalProps.js';\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\n//import { runLogInOut } from '../Data/LogInOut.js';\r\nimport { runAppExtUrls } from '../Data/runAppUrls.js';\r\n\r\nimport '../CSS/RegUser.css';\r\n\r\nlet countRegUser = 0;\r\n\r\nexport let UserReg = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n\r\n    let [ userFullName, setUserFullName ] = useState('');\r\n    let [ userName, setUserName  ] = useState('');\r\n    let [ userPwd, setUserPWD ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(runAppExtUrls());\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n    }, []);\r\n    let setStrsType = (e) => {\r\n        //console.log('nyh');\r\n        \r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n        //console.log(inputStr);\r\n        \r\n\r\n        if (dataset.type === 'fullName') setUserFullName(inputStr);\r\n        if (dataset.type === 'userName') setUserName(inputStr);\r\n        if (dataset.type === 'userPwd') setUserPWD(inputStr);\r\n    };\r\n\r\n     let sendUserReg = (e) => {\r\n        let targetBtnId = e.target.id; \r\n        // Created a body for the added data\r\n        let sqlBody = {\r\n            fullName: userFullName,\r\n            userName: userName,\r\n            userPassWord: userPwd\r\n        }\r\n        //console.log(sqlBody);\r\n        \r\n        axiosPost('userReg', 'targetBtnId', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n    };\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Registrera`}</title>\r\n            </Helmet>\r\n            <section className=\"logInOut__btnRegContainer\">\r\n                <div className=\"btnContainer__cancelReg\">\r\n                    <input type=\"submit\" className=\"btnLogOut__cancelReg\" value=\"\"/>\r\n                    <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                        <p className=\"btnHeadline__cancelReg\">Avbryt</p>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n            <section className=\"regUser__regContainer\">\r\n                <form>\r\n                    <div>\r\n                        <label id=\"userFullName\">Ditt Namn</label>\r\n                        <input type=\"text\" id=\"userFullName\" data-type=\"fullName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userName\">Användarnamn</label>\r\n                        <input type=\"text\" id=\"userName\" data-type=\"userName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userPwd\">Lösenord</label>\r\n                        <input type=\"text\" id=\"userPwd\" data-type=\"userPwd\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"submit\" className=\"regContainer__submitBtn\" value=\"\" onClick={ sendUserReg } id=\"LogIn\"/>\r\n                        <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                            <p className=\"regContainer__headline\" onClick={ sendUserReg } id=\"LogIn\">Registrera</p>\r\n                        </Link>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n     \r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateHeadName, getLogStatus, gotoPage$ } from './Components/GlobalProps.js';\r\n\r\nimport { Headbar } from './Components/Structure/Headbar.js';\r\nimport { FormAdd } from './Components/Structure/FormAdd.js';\r\nimport { UserReg } from './Components/Structure/RegUser.js';\r\nimport { runAppExtUrls } from './Components/Data/runAppUrls.js';\r\nimport { HeadContents } from './Components/Structure/HeadContents.js';\r\nimport { lastOfType } from 'glamor';\r\nupdateHeadName('Årsklockan');\r\n\r\nlet MainApp = () => {\r\n  let [ appUrl, setAppUrl ] = useState('');\r\n  let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n\r\n  useEffect(() => {\r\n    gotoPage$.subscribe((gotoPage) => {\r\n      updateRedirectToPage(gotoPage);\r\n    });\r\n    setAppUrl(runAppExtUrls());\r\n    \r\n  },[]);\r\n  //console.log(getLogStatus());\r\n  \r\n  //console.log(getLogStatus().mess);\r\n  //console.log(appUrl);\r\n  \r\n  return (\r\n    <>\r\n      <Router>\r\n        <Headbar/>\r\n        <Route exact path={ appUrl } component={ HeadContents }/> \r\n        {redirectToPage === 'Login' && <Redirect to='/Login' />}\r\n          <Route exact path={ `${appUrl}Login` } component={ HeadContents }/>   \r\n        <Route exact path={ `${appUrl}Add` } component={ FormAdd }/>\r\n        <Route path={ `${appUrl}UserReg` } component={ UserReg }/>\r\n      </Router>\r\n      \r\n    </>\r\n  );\r\n} \r\n\r\nexport default MainApp; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Components/CSS/Generall.css';\r\n\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}