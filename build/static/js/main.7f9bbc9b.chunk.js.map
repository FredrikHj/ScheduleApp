{"version":3,"sources":["Components/Data/LocalStorage.js","Components/CommonFunctions.js","Components/Storage.js","Components/Data/RouteNames.js","Components/Style/SpecificStyle.js","Components/Style/RegStyle.js","Components/Style/CommonStyle.js","Components/Data/SubmitBtn.js","Components/Data/BackendURLPath.js","Components/Data/Axios.js","Components/Style/MainStyle.js","Components/Structure/Headbar.js","Components/Structure/RegUser.js","Components/Style/AuthStyle.js","Components/Data/Spinner.js","Components/Data/Authorization.js","Components/Style/SQLTableStyle.js","Components/Data/TableColsHeadline.js","Components/Data/runAppUrls.js","Components/Structure/RunSQLTableHeader.js","Components/Style/LogedInStyle.js","Components/Structure/RunSQLTableData.js","Components/Structure/SearchBar.js","Components/Style/AddFormStyle.js","Components/Data/AddFormCellInput.js","Components/Structure/AddForm.js","Components/Structure/RunSQLTable.js","Components/Data/FunctionsTableToolBtn.js","Components/Style/HeadbarStyle.js","Components/Data/LoginForm.js","MainPage.js","Components/Structure/LogedIn.js","Components/Data/CommonFunction.js","LogedInPage.js","MainApp.js","serviceWorker.js","index.js"],"names":["getLocalStorageData","getData","JSON","parse","window","localStorage","getItem","token","jwt","require","inlogedUserFullName$","BehaviorSubject","incommingSQLDataArr$","incommingSiteLoga$","optionColListArr$","headName$","userData$","gotoPage$","updateLocalstorage","saveLoginData","setItem","stringify","updateInlogedUserFullName","next","inlogData","tokenData","verify","error","loginName","getTokenData","updateSavedSQLData","incommingSQLDataArr","updateGotoPage","gotoPage","routeName","specificStyleBtnIcon","width","height","zIndex","specificStyleLogin","btn","right","marginTop","text","marginLeft","labelFormFocused","position","marginBottom","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","letterSpacing","color","specificStyleLogout","border","boxShadow","background","specificStyleAddRow","textTransform","specificStyleRemoveRecord","specificStyleEditRecord","specificStyleUserReg","specificStyleNewUserSend","specificStyleCancelUserReg","RegStyle","headContainer","styled","section","regStatus","p","CommonBtnStyle","button","CommonTexStyle","btnHeadline","SubmitBtn","props","btnOptional","style","name","onClickFunction","id","onClick","data-optional","backendURL","savedSQLDataArr","axiosGet","getType","tokenStr","routes","axios","get","headers","Authorization","then","response","console","log","optionColListArr","status","incommingSiteLoga","updateSiteLoga","data","storageData","SQLData","structuringCols","push","catch","saveData","axiosPost","postType","bodyData","type","sendToSqlBackend","post","logedInUserInfoObj","responsType","logInMess","statusText","loginData","logaImage","HeadbarStyle","header","headerWidth","siteLogaContainer","appStatusContainer","headline","Headbar","appStatus","useState","inBackendURL","setInBackendUrl","logaNotSet","setLogaNotSet","siteLoga","setSiteLoga","appName","setInlogMess","setInlogStatus","gotoIntoPage","updateGotoIntoPage","useEffect","subscribe","userDispalyingObj","src","alt","RegUser","setAppName","userFullName","setUserFullName","userName","setUserName","userPwd","setUserPWD","headName","setStrsType","e","target","inputStr","value","dataset","Helmet","charSet","className","data-type","onChange","placeholder","targetBtnId","fullName","userPassWord","stopPropagation","AuthStyle","statusContainer","logInSpinnerMove","Spinner","str","Auth","setTimeout","SQLTableStyle","container","toolContainer","col1_3","col2","searchBar","tableHeadline","body__contents","sideTool","sideToolRow1","sideToolRow2","AddSQLDataStyle","addDate","selectContainers","SQLDataSort","sortUpDnContainer","span","arrows","TableColsHeadlineOutloged","input","TableColsHeadlineInloged","correctRoutes","location","hash","split","RunSQLTableHeader","map","item","index","key","class","UserInputForm","general","date","dateIcon","UserInputSelect","RunSQLTableData","setAppUrl","updateRoutes","incommingNewSQLData","updateIncommingNewSQLData","updateErroLoadingSQLData","addedSQLData","updateAddedSQLData","tableColsHeadline","setTableColsHeadline","runHandleRecord","targetBtn","inEditModeSetting","editArr","countGetMethod","correctDomain","domainHostname","hostname","localPubAppUrls","getSQLData","SQLDataArr","length","createAddedRecordDataArr","Promise","success","result","puschToAddedRecordData","timeStamp","data-typenr","activity","concerned","place","content","onclick","SearchBar","AddForm","dateInputContainer","addBtn","AddFormCellInput","dataType","cellIndex","inputOnChange","sOonClick","tableToolBtn","valueStr","options","optionIndex","data-cell","updateOptionColListArr","choosenSelectOption","addArr","SQLColListArr","Object","values","undefined","RunSQLTable","redirectToPage","updateRedirectToPage","updateAddArr","updateEditArr","editMode","setEditMode","editBtn","setEditBtn","createAddArr","pushToAddedRecordData","btnId","selectedOption","selectedStr","selectedIndex","cell","typeId","typenr","to","path","render","optional","targetObj","targetArr","slice","setTargetEditRecord","LoginFormStyle","formContainer","usernameContainer","passwordContainer","labelFormNoFocus","label","inputForm","btnLoginContainer","userInfoContainer","userErrorMess","LogedInStyle","userHelp","inlogedUser","LoginForm","onChangeUserName","onChangeUserPwd","userNameStr","userPwdStr","runAuth","runNewUserReg","inlogStatus","inlogMess","inputFormSpecificFocusStyle","setInputFormSpecificFocusStyle","handleInputForm","inputFormId","MainPage","appUrl","updateUserNameStr","updateUserPwdStr","returningUserDispalyingObj","targetUserName","targetUserPwd","exact","component","LogedIn","functionLogOut","runLogOut","clear","LogedInPage","updateInlogedUser","inlogedUserFullName","updateHeadName","MainApp","basename","Boolean","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f9bbc9b.chunk.js","sourcesContent":["// ================================================== LocalStorage handler ==================================================\r\nexport let LocalStorageObj =  {\r\n    logedInState: false,\r\n    fullName: ''\r\n};\r\nexport function getLocalStorageData(getData){\r\n    // Run if a data i saved into the localstorage else no run\r\n    getData = JSON.parse(window.localStorage.getItem(\"loginData\")).token;\r\n    return getData;\r\n}","/* ================================================== Get token ==================================================\r\nImports module */\r\nlet jwt = require('jsonwebtoken');\r\n\r\nexport let getTokenData = (token, inlogData) => {\r\n    let tokenData = jwt.verify( token, 'inlogSecretKey', (error, token) => token);\r\n    if (inlogData === 'fullName') return tokenData.loginName;\r\n}\r\n","/* ==================================================  Props handler ==================================================\r\nImports module */\r\nimport {BehaviorSubject} from \"rxjs\";\r\n\r\nimport {getLocalStorageData} from './Data/LocalStorage';\r\nimport {getTokenData} from './CommonFunctions';\r\nconst inlogedUserFullName = '';\r\nconst incommingSQLDataArr = [];\r\nconst incommingSiteLoga = '';\r\nconst optionColListArr = [];\r\nconst headName = '';\r\nconst userData = '';\r\nconst gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\nexport const incommingSiteLoga$ = new BehaviorSubject(incommingSiteLoga);\r\nexport const optionColListArr$ = new BehaviorSubject(optionColListArr);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const userData$ = new BehaviorSubject(userData);\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\nexport const LocalStorage$ = new BehaviorSubject('');\r\n\r\nexport function updateUserData(loginData){\r\n    /* The functions are triggered in another place.\r\n        The function updateLocalstorage is triggered together with the incomming data.\r\n        The incomming data is saved for the subscriber.  \r\n    */\r\n    updateLocalstorage(loginData);\r\n    if(loginData) {\r\n        userData$.next(loginData);\r\n    }\r\n}\r\nexport const updateLocalstorage = (saveLoginData) =>{\r\n    // The localstorage is set with the data\r\n    localStorage.setItem('loginData', JSON.stringify(saveLoginData));\r\n}\r\n\r\nexport function getLogStatus(){\r\n    // Run if a data i saved into the localstorage else no run\r\n    if (window.localStorage.length !== 0) {\r\n        const getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n        const getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n        const logInStatus = {\r\n            type: getStatusType,\r\n            mess: getLogInMess\r\n        };\r\n        return logInStatus;\r\n    }\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    if (updateInlogedUserFullName) inlogedUserFullName$.next(getTokenData(getLocalStorageData('token'), 'fullName'));\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSiteLoga(incommingSiteLoga){\r\n    if(incommingSiteLoga) incommingSiteLoga$.next(incommingSiteLoga);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    if(incommingSQLDataArr) incommingSQLDataArr$.next(incommingSQLDataArr);\r\n}\r\nexport function updateOptionColList(optionColListArr){\r\n    if(optionColListArr) optionColListArr$.next(optionColListArr);\r\n}\r\nexport function updateGotoPage(gotoPage){    \r\n    if(gotoPage) gotoPage$.next(gotoPage);\r\n    return gotoPage;\r\n}","// ================================================== Routes Name ==================================================\r\nexport const routeName = {\r\n    mainPage: '/',\r\n    userReg: 'Registrera',\r\n    auth: 'Auth',\r\n    login: 'Inloggad',\r\n    addRecords: 'Add',\r\n  };","// ================================================== Style Rouls for a specific purposes ==================================================\r\nexport const specificStyleBtnIcon = {\r\n    width: '83px',\r\n    height: '30px',\r\n    zIndex: '-1',\r\n}\r\nexport const specificStyleLogin = {\r\n    btn: {\r\n        width: '83px',\r\n        height: '30px',\r\n        right: '0px',\r\n        marginTop: 'calc(50% - 34px/9)',\r\n\r\n    },\r\n    text: {\r\n        marginLeft: '0',\r\n        marginTop: '10px',\r\n    }\r\n}\r\n\r\nexport const labelFormFocused = {\r\n    position:'absolute',\r\n    height: '50px',\r\n    marginLeft: '10px',\r\n    marginBottom : '-25px',\r\n    marginTop: '-25px',\r\n    fontFamily: 'Roboto',\r\n    fontStyle: '500',\r\n    fontWeight: 'normal',\r\n    fontSize: '12px',\r\n    lineHeight: '132%',\r\n    letterSpacing: '0.005em',\r\n    color: '#000000',\r\n}\r\nexport const specificStyleLogout = {\r\n    btn: {\r\n        border: 'none',\r\n        width: '135px',\r\n        marginLeft: '-25px',\r\n        marginTop: '8px',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        fontFamily: 'Roboto',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        fontSize: '18px',\r\n        color: 'black',\r\n    }\r\n}\r\nexport const specificStyleAddRow = {\r\n    btn: {\r\n        width: '83px',\r\n        height: '30px',\r\n        marginLeft: '0',\r\n        marginTop: '15px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n        zIndex: '1',\r\n    },\r\n    text: {\r\n        fontFamily: 'Roboto',\r\n        fontStyle: 'normal',\r\n        fontWeight: '900',\r\n        fontSize: '12px',\r\n        letterSpacing: '0.05em',\r\n        textTransform: 'uppercase',\r\n        color: 'black',\r\n    },\r\n}\r\nexport const specificStyleRemoveRecord = {\r\n    btn: {\r\n        width: '77px',\r\n        height: '34px',\r\n        marginTop: '1.7px',\r\n        marginBottom: '-12px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n        zIndex: '1',\r\n    },\r\n    text: {\r\n        color: 'darkRed',\r\n        fontWeight: 'bold',\r\n        fontSize: '20px', \r\n    }\r\n}\r\nexport const specificStyleEditRecord = {\r\n    btn: {\r\n        width: '77px',\r\n        height: '34px',\r\n        marginTop: '1.7px',\r\n        marginBottom: '-12px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n        zIndex: '1',\r\n    },\r\n    text: {\r\n        color: 'black',\r\n        fontWeight: 'bold',\r\n        fontSize: '20px', \r\n    }\r\n}\r\nexport const specificStyleUserReg = {\r\n    btn: {\r\n        width: '150px',\r\n        height: '21px',\r\n        marginLeft: '15px',\r\n        marginTop: '52px',\r\n        marginBottom: '-12px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        color: 'black',\r\n        fontSize: '18px',\r\n    }\r\n}\r\nexport const specificStyleNewUserSend = {\r\n    btn: {\r\n        width: '141px',\r\n        height: '40px',\r\n        marginLeft: '10px',\r\n        marginBottom: '-12px',\r\n    },\r\n    text: {\r\n        fontSize: '18px',\r\n        marginTop: '20px',\r\n    }\r\n}\r\nexport const specificStyleCancelUserReg = {\r\n    btn: {\r\n        width: '150px',\r\n        height: '21px',\r\n        marginLeft: '22px',\r\n        marginTop: '24px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        color: 'black',\r\n        fontSize: '18px',\r\n    }\r\n}","/* ================================================== Style Rouls for userReg ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== Reg ==============================\r\nexport let RegStyle = {\r\n    headContainer: styled.section`\r\n      width: 400px;\r\n      display: flex;\r\n      margin-left: 505px;\r\n      margin-top: 20px;\r\n    `,\r\n  regStatus: styled.p`\r\n      margin-left: 3px;\r\n    `,\r\n  }","/* ================================================== Style Rouls for Shared rouls ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== Common Style ==============================\r\nexport let CommonBtnStyle = {\r\n    btn: styled.button`\r\n        display: flex;\r\n        flex-direction: row;\r\n        padding: 8px 12px;\r\n        box-shadow: 0px 1px 2px rgba(98, 98, 98, 0.18), 0px 0px 2px rgba(98, 98, 98, 0.18);\r\n        border-radius: 9.5px;\r\n        background: #AE0B05;\r\n    `,\r\n}\r\nexport let CommonTexStyle = {\r\n    btnHeadline: styled.p`\r\n        right: 12px;\r\n        margin-top: -2px;\r\n        font-family: Roboto;\r\n        font-style: normal;\r\n        font-weight: 900;\r\n        font-size: 12px;\r\n        line-height: 150%;\r\n        display: flex;\r\n        align-items: center;\r\n        letter-spacing: 0.05em;\r\n        text-transform: uppercase;\r\n        color: #FFFFFF;\r\n        flex: none;\r\n        order: 0;\r\n        align-self: center;\r\n    `,\r\n}","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import inportant components for the specific page\r\nimport { CommonBtnStyle, CommonTexStyle } from '../Style/CommonStyle';\r\n\r\nexport let SubmitBtn = (props) => {\r\n    const {btnOptional, style, name, onClickFunction, id } = props;\r\n    return(\r\n        <>\r\n            <CommonBtnStyle.btn  id={ id } onClick={ onClickFunction } style={ style.btn }>\r\n                <CommonTexStyle.btnHeadline id={ id } onClick={ onClickFunction } data-optional={ btnOptional } style={ style.text }>{ name }</CommonTexStyle.btnHeadline>\r\n            </CommonBtnStyle.btn>\r\n        </>\r\n    );\r\n}","// Change this for working with the local or published Backend\r\nexport let backendURL = 'http://fredrikipnr.mina-projekt.se:3001'; // Own server\r\n//export let backendURL = 'http://localhost:3001'; // Local Backend ","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport axios from 'axios';\r\nimport { updateSiteLoga, updateSavedSQLData, updateOptionColList, updateUserData, updateGotoPage } from '../Storage.js';\r\n\r\n// Import inportant components for the specific page\r\nimport { backendURL } from './BackendURLPath';\r\n\r\nlet savedSQLDataArr = [];\r\n\r\nexport let axiosGet = (getType, tokenStr) => {\r\n        let routes = '';\r\n\r\n    // Type of post method\r\n    if (getType === 'getLoga') routes = '/SiteLoga';\r\n    if (getType === 'default') routes = '/SQLData';\r\n    // The routes shall content the inlogging user\r\n    if (getType === 'userSpec') routes = `/SQLData/${ 'fredde' }`;\r\n \r\n    axios.get(backendURL + routes, {headers: {Authorization: `bearer ${tokenStr}`}}).then(response => {\r\n        console.log(\"axiosGet -> response\", response)\r\n        updateSavedSQLData([]);\r\n        let incommingSQLResArr = []\r\n        /* Store the incomming API data in a variables - \r\n        Note that the data structure deppending on the conditions*/\r\n        if (response.status === 200 && getType === 'getLoga') updateSiteLoga(response.data);\r\n        if (response.status === 200 && getType === 'default') storageData(response.data[0]);\r\n        if (response.status === 200 && getType === 'userSpec') {\r\n            storageData(response.data.SQLData[0]);\r\n            updateOptionColList(response.data.structuringCols)\r\n        }\r\n       \r\n        //  If incomming status of 201 = Created: The Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        if (response.status === 201) {\r\n            savedSQLDataArr[0].push(incommingSQLResArr[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n    }).\r\n    catch(error => {});\r\n}\r\nconst storageData = (saveData) => {\r\n    updateSavedSQLData(saveData);\r\n}\r\n\r\nexport let axiosPost = (postType, bodyData) => {      \r\n    let type = '';\r\n    if (postType === 'Auth') type = 'Auth';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    if (postType === 'userReg') type = 'UserReg';\r\n    if (postType === 'removeRecord') type = 'RemoveRecord';\r\n    if (postType === 'editRecord') type = 'EditRecord';\r\n\r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).then(response => {\r\n        console.log(\"axiosPost -> response\", response)\r\n            if (postType === 'Auth'){\r\n                // Incomming userdata.         \r\n                let logedInUserInfoObj = {\r\n                    responsType: response.status,\r\n                    logInMess: response.statusText, \r\n                    token: response.data,\r\n                    //getTokenData(response.data),\r\n                };\r\n                //Send the incomming data for displaying the user login status\r\n                updateUserData(logedInUserInfoObj);\r\n                if (response.status === 200) updateGotoPage(postType);\r\n            }\r\n        }).catch(error => {});\r\n}\r\n","/* ================================================== Style Rouls for Generall style ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== GenerallyStyle ==============================\r\nexport let GenerallyStyle = {\r\n  askMarkMove: styled.section`\r\n    float: right;\r\n  `,\r\n}\r\n// ============================== Headbar ==============================\r\nconst headerWidth = 1400;\r\nconst headContainerCenterPoss = headerWidth/2;\r\nexport const logaImage = {\r\n    width: '210px',\r\n    marginTop: '40px',\r\n}\r\n\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    background-color: white;\r\n    width: 100%;\r\n    height: 5vh;\r\n  `,\r\n  headContainer: styled.section`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: ${headerWidth}px;\r\n    margin-left: calc(50% - ${headContainerCenterPoss}px);\r\n    background: #FFFFFF;\r\n  `,\r\n  siteLogaContainer: styled.section`\r\n    margin-top: -23px;\r\n    margin-left: 90px;\r\n    width: 36%;\r\n  `,\r\n  appStatusContainer: styled.section`\r\n    width: 62%;\r\n    margin-top: -21px;\r\n  `,\r\n  headline: styled.section`\r\n    display: flex;\r\n    align-items: flex-end;\r\n    width: 500px;\r\n    height: 18px;\r\n    margin-left: 45px;\r\n    margin-top: -18px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 900;\r\n    font-size: 12px;\r\n    line-height: 150%;\r\n    letter-spacing: 0.05em;\r\n    text-transform: uppercase;\r\n    color: #3D3D3D;\r\n  `,\r\n}","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import inportant components for the specific page\r\nimport { HeadbarStyle, logaImage } from '../Style/MainStyle';\r\n\r\nimport { userData$, gotoPage$, incommingSiteLoga$ } from '../Storage.js';\r\nimport { backendURL } from '../Data/BackendURLPath';\r\nimport { axiosGet } from '../Data/Axios.js';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\n\r\nexport let Headbar = (props) => {\r\n    const { appStatus } = props;\r\n    let [ inBackendURL, setInBackendUrl ] = useState('');\r\n    let [ logaNotSet, setLogaNotSet ] = useState(false);\r\n    let [ siteLoga, setSiteLoga ] = useState('');\r\n    let [ appName ] = useState('');\r\n    //******* ENHETEN • WORKSHOPS\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    let [ gotoIntoPage, updateGotoIntoPage ] = useState('');\r\n\r\n    useEffect(() => {\r\n        //axiosGet('getLoga', '');\r\n        incommingSiteLoga$.subscribe((incommingSiteLoga) => {  \r\n            if (logaNotSet === false) {\r\n                setSiteLoga(incommingSiteLoga);\r\n                setLogaNotSet(true);\r\n            }\r\n        });\r\n        setInBackendUrl(backendURL);\r\n        userData$.subscribe((userDispalyingObj) => {\r\n            setInlogStatus(userDispalyingObj.responsType);\r\n            setInlogMess(userDispalyingObj.logInMess);\r\n        });\r\n        gotoPage$.subscribe((gotoPage) => {\r\n            updateGotoIntoPage(gotoPage);\r\n        });\r\n    }, [inBackendURL, gotoIntoPage]);\r\n    return (\r\n        <>\r\n            <HeadbarStyle.header>\r\n                <HeadbarStyle.headContainer>\r\n                    <HeadbarStyle.siteLogaContainer>\r\n                        <img src={ inBackendURL + siteLoga } style={ logaImage } alt=\"Logotype plats\"/>\r\n                        <HeadbarStyle.headline>{ appName }</HeadbarStyle.headline>\r\n                    </HeadbarStyle.siteLogaContainer>\r\n                    \r\n                    <HeadbarStyle.appStatusContainer>\r\n                        {appStatus}\r\n                    </HeadbarStyle.appStatusContainer>\r\n                </HeadbarStyle.headContainer>                     \r\n            </HeadbarStyle.header>\r\n        </>\r\n    );\r\n}","/* ================================================== UserReg ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// Import CSS rouls\r\nimport { specificStyleNewUserSend, specificStyleCancelUserReg } from '../Style/SpecificStyle';\r\nimport { RegStyle } from '../Style/RegStyle';\r\nimport '../Style/RegUser.css';\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, updateGotoPage } from '../Storage.js';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { axiosPost } from '../Data/Axios.js';\r\nimport { Headbar } from './Headbar.js';\r\n\r\nexport let RegUser = () => {\r\n    let [ appName, setAppName ] = useState(''); \r\n    \r\n    let [ userFullName, setUserFullName ] = useState('');\r\n    let [ userName, setUserName  ] = useState('');\r\n    let [ userPwd, setUserPWD ] = useState('');\r\n\r\n    useEffect(() => {\r\n        \r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n    }, []);\r\n    let runCancel = (e) => {\r\n        // Gets the element        \r\n        let targetBtnId = e.target.id; \r\n        updateGotoPage(targetBtnId);\r\n    };\r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n        \r\n        if (dataset.type === 'fullName') setUserFullName(inputStr);\r\n        if (dataset.type === 'userName') setUserName(inputStr);\r\n        if (dataset.type === 'userPwd') setUserPWD(inputStr);\r\n    };\r\n    let runSendNewUser = (e) => {\r\n        let targetBtnId = e.target.id; \r\n        // Created a body for the added data\r\n        let sqlBody = {\r\n            fullName: userFullName,\r\n            userName: userName,\r\n            userPassWord: userPwd\r\n        }        \r\n        axiosPost(targetBtnId, sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody\r\n        // Get back to mainPage so you can loggin with the new user. Will fix some automatic later\r\n        updateGotoPage('/');\r\n        e.stopPropagation();\r\n    };\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Registrera`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <RegStyle.headContainer>\r\n                        <RegStyle.regStatus>{ 'Regstatus' }</RegStyle.regStatus>\r\n                        <SubmitBtn\r\n                            style={ specificStyleCancelUserReg }\r\n                            name={ 'Avbryt' }\r\n                            onClickFunction={ runCancel }\r\n                            id={ '/' }\r\n                            type=\"buttom\"\r\n                        />\r\n                    </RegStyle.headContainer>\r\n                }\r\n            />\r\n            <section className=\"regUser__regContainer\">\r\n                <form>\r\n                    <div>\r\n                        <label id=\"userFullName\">Ditt Namn</label>\r\n                        <input type=\"text\" id=\"userFullName\" data-type=\"fullName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userName\">Användarnamn</label>\r\n                        <input type=\"text\" id=\"userName\" data-type=\"userName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userPwd\">Lösenord</label>\r\n                        <input type=\"text\" id=\"userPwd\" data-type=\"userPwd\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                    <SubmitBtn\r\n                        style={ specificStyleNewUserSend }\r\n                        name={ 'Registrera' }\r\n                        onClickFunction={ runSendNewUser }\r\n                        id={ 'userReg' }\r\n                        type=\"buttom\"\r\n                    />\r\n                    </div>\r\n                </form>\r\n            </section>\r\n        </>  \r\n    );\r\n}","/* ================================================== Style Rouls for Auth ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\nexport let AuthStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    margin-left: 490px;\r\n    margin-top: 40px;\r\n  `,\r\nlogInSpinnerMove: styled.section`\r\n    margin-left: 3px;\r\n  `,\r\n}","/* ================================================== Spinner ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import CSS rouls\r\nimport '../Style/Spinner.scss';\r\n\r\n// Import inportant components for the specific page\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n            { props.str } <span className=\"spinner spinner-dark\"></span>\r\n        </>\r\n    );\r\n}\r\nexport default Spinner;\r\n","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// Import CSS rouls\r\nimport { AuthStyle } from '../Style/AuthStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, updateGotoPage } from '../Storage.js';\r\nimport { Headbar } from '../Structure/Headbar.js';\r\nimport Spinner from './Spinner.js';\r\n\r\nexport let Auth = () => {\r\n    const [ appName, setAppName ] = useState('');  \r\n    \r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            setAppName(headName);\r\n        }); \r\n    }, []);\r\n    let runLogin = () => {\r\n        setTimeout(() => {\r\n            updateGotoPage('Inloggad');\r\n        }, 500)\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n\r\n            <Headbar\r\n                appStatus={\r\n                    <AuthStyle.statusContainer>\r\n                        Du loggas in ...\r\n                        <Spinner/>\r\n                        {runLogin()}\r\n                    </AuthStyle.statusContainer>\r\n                }\r\n            /> \r\n        </>\r\n    );\r\n}","/* ================================================== Style Rouls for SQLTable ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== SQLTable ==============================\r\nexport let SQLTableStyle = {\r\n    container: styled.section`\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n    `,\r\n    toolContainer: styled.section`\r\n        display: flex;\r\n        flex-direction: row;\r\n        width: 100px;\r\n    `,\r\n    col1_3: styled.section`\r\n        width: 10%;\r\n        height:500px;\r\n    `,\r\n    col2: styled.section`\r\n        width: 80%;\r\n    `,\r\n    searchBar: styled.section`\r\n        margin-left: calc(50% - 470px);\r\n        margin-top: 81px;\r\n        width: 862px;\r\n    `,\r\n    // Table  contents ----------------------\r\n    tableHeadline: styled.p`\r\n        margin: 0;\r\n    `,\r\n    body__contents: styled.section`\r\n        width: 1100px;\r\n        margin-left: calc(50% - 550px);\r\n        display: flex;\r\n        flex-direction: row;\r\n    `,\r\n    sideTool: styled.section`\r\n        margin-left: 10px;\r\n        margin-top: 32px;\r\n    `,\r\n    sideToolRow1:styled.section`\r\n        margin-top: 0;\r\n    `,\r\n    sideToolRow2: styled.section`\r\n        margin-top: 60px;\r\n    `  ,\r\n    toolContainer: styled.section`\r\n        border: 1px solid red;\r\n        display: flex;\r\n        flex-direction: row;\r\n        width: 300px;\r\n    `,\r\n}\r\n// ============================== Add Data ==============================\r\nexport let AddSQLDataStyle = {\r\n    addDate: styled.section`\r\n        font-size: 12px;\r\n        text-align: center;\r\n        color: red;\r\n        font-weight: bold;\r\n    `,\r\n}\r\nexport const selectContainers = {\r\n    width: '100%',\r\n}\r\n\r\n// ============================== SQLData Sort ==============================\r\nexport let SQLDataSort = {\r\n    sortUpDnContainer: styled.span`\r\n        display: flex;\r\n        flex-direction: row;\r\n        margin: -20px 0px 0px 105px;\r\n    `,\r\n    arrows: styled.button`\r\n        padding: 0;\r\n        background: none;\r\n        border: none;\r\n    `,\r\n}\r\n\r\n// ============================== SQLData Pagination =============================\r\nexport let SQLDataPagination = {\r\n    container: styled.section`\r\n        width: 200px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-around;\r\n        margin-top: 30px;\r\n        margin-left: calc(50% - 100px)\r\n    `,\r\n    arrowDubbleLeft: styled.span`\r\n       transform: rotate(180deg); \r\n    `,\r\n    arrowGroupLeft: styled.section`\r\n        \r\n    `,\r\n    arrowLeft: styled.span`\r\n    `,\r\n    \r\n    inputNrGroupMiddle: styled.section`\r\n\r\n    `,\r\n    inputSide: styled.input`\r\n        width: 40px;\r\n    `,\r\n\r\n    totSides: styled.span`\r\n\r\n    `,\r\n    arrowGroupRight: styled.section`\r\n\r\n    `,\r\n    arrowRight: styled.span`\r\n    `,\r\n    arrowDubbleLRight: styled.span`\r\n    `,\r\n}","// ================================================== SQLCol header ==================================================\r\nexport const TableColsHeadlineOutloged = ['Datum', 'Akitvitet', 'Berörda', 'Typ', 'Plats', 'Innehåll'];\r\nexport const TableColsHeadlineInloged = ['Datum', 'Akitvitet', 'Berörda', 'Typ', 'Plats', 'Innehåll', 'Verktyg'];\r\n","/* ================================================== HeadBar ==================================================\r\n Handles the domain public dev or online pulished */\r\nexport let localPubAppUrls = () => {\r\n  let correctDomain = '';\r\n  let domainHostname = window.location.hostname;\r\n\r\n  // Check if in local or pub mode \r\n  if (domainHostname === 'localhost' || domainHostname === 'fredrikhj.github.io') correctDomain = '/'; \r\n \r\n  return correctDomain;\r\n}\r\n// Handles correct read of the url = /?????\r\nexport let correctRoutes = () => {\r\n  let routeName = window.location.hash.split('#')[1];\r\n  return routeName;\r\n}","/* ================================================== Tables head part ==================================================\r\nImports module */\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n// Import CSS rouls\r\nimport '../Style/SQLTable.css';\r\nimport { SQLTableStyle, SQLDataSort } from '../Style/SQLTableStyle'\r\n\r\n// Import inportant components for the specific page\r\nimport { TableColsHeadlineOutloged, TableColsHeadlineInloged } from '../Data/TableColsHeadline';\r\nimport { correctRoutes } from '../Data/runAppUrls';\r\nimport { routeName } from '../Data/RouteNames';\r\n\r\n//console.log(\"TableHead -> TableColsHeadline()\", TableColsHeadline())\r\nexport let RunSQLTableHeader = () => {\r\n    let [ tableColsHeadlines, setTableColsHeadlines ] = useState([]); \r\n\r\n/*     useEffect(() =>{\r\n        if(tableColsHeadlines.length === 0) setTableColsHeadlines(TableColsHeadline());\r\n        console.log(\"TableHead -> tableColsHeadlines\", tableColsHeadlines)\r\n    },[tableColsHeadlines])\r\n */\r\n    return(\r\n        <thead>\r\n            <tr>\r\n                {(correctRoutes() === routeName.mainPage && TableColsHeadlineOutloged || TableColsHeadlineInloged).map((item, index) => {\r\n                        return(\r\n                            <th key={ index }>\r\n                                <>\r\n                                    <SQLTableStyle.tableHeadline>{ item }</SQLTableStyle.tableHeadline>\r\n                                    <SQLDataSort.sortUpDnContainer>\r\n                                        <SQLDataSort.arrows onClick={ '' }>\r\n                                            <span class=\"material-icons\"> arrow_drop_up </span>\r\n                                        </SQLDataSort.arrows>\r\n                                        <SQLDataSort.arrows onClick={ '' }>\r\n                                            <span class=\"material-icons\"> arrow_drop_down </span>\r\n                                        </SQLDataSort.arrows>\r\n                                    </SQLDataSort.sortUpDnContainer>\r\n                                </>\r\n                            </th> \r\n                        );\r\n                    })\r\n                }\r\n            </tr>\r\n        </thead>\r\n    );\r\n}","/* ================================================== Style Rouls for user LogedIn ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n\r\n// ============================== UserSpecificStyle ==============================\r\nexport const UserInputForm = {\r\n  general: {\r\n    width: '90%',\r\n  },\r\n  date: {\r\n    width: '70%',\r\n    marginLeft: '5%',\r\n  },\r\n  dateIcon: {\r\n    width: '30px',\r\n    height: '60px',    \r\n  },\r\n}\r\nexport let UserInputSelect = {\r\n  container: styled.section`\r\n    margin-left: 0;\r\n    margin-top: 0;\r\n  `,\r\n}\r\n","/* ================================================== Render all the SQLData ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import CSS rouls\r\nimport { specificStyleRemoveRecord, specificStyleEditRecord, specificStyleBtnIcon } from '../Style/SpecificStyle';\r\nimport { UserInputForm } from '../Style/LogedInStyle';\r\nimport { SQLTableStyle } from '../Style/SQLTableStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { TableColsHeadlineOutloged } from '../Data/TableColsHeadline';\r\nimport { getLocalStorageData } from '../Data/LocalStorage';\r\nimport { FcDeleteRow, FcApproval } from \"react-icons/fc\";\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\nimport { correctRoutes } from '../Data/runAppUrls';\r\nimport { incommingSQLDataArr$ } from '../Storage';\r\nimport { routeName } from '../Data/RouteNames';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { axiosGet } from '../Data/Axios';\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport Spinner from '../Data/Spinner';\r\n\r\nexport let RunSQLTableData = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ routes, updateRoutes ] = useState('');\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ erroLoadingSQLData, updateErroLoadingSQLData ] = useState(false);\r\n    let [ addedSQLData, updateAddedSQLData ] = useState([]);\r\n    let [ tableColsHeadline, setTableColsHeadline ] = useState([]);\r\n    \r\n    const { runHandleRecord, targetBtn, inEditModeSetting, editArr, setStrsType } = props;\r\n    \r\n    let countGetMethod = 1;\r\n    useEffect(() =>{\r\n        setAppUrl(localPubAppUrls());\r\n        getSQLData();        \r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure\r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n        updateRoutes(correctRoutes());\r\n        if(tableColsHeadline.length === 0 && correctRoutes() === `/${routeName.login}`) setTableColsHeadline(TableColsHeadlineOutloged); \r\n        console.log(\"RunSQLTableData -> TableColsHeadlineOutloged\", TableColsHeadlineOutloged)\r\n        \r\n        if(incommingNewSQLData.length === 0) createAddedRecordDataArr();\r\n    },[routes]);\r\n    console.log(\"RunSQLTableData -> incommingNewSQLData\", incommingNewSQLData)\r\n    console.log(\"RunSQLTableData -> addedSQLData\", addedSQLData)\r\n    let getSQLData = () => {\r\n        let axiosUntilGettingData = new Promise((success, error) => {\r\n            if (countGetMethod === 1) {\r\n                success();\r\n                countGetMethod++;\r\n            }\r\n            if (countGetMethod === 2) {\r\n                setTimeout(() => {\r\n                    updateErroLoadingSQLData(true)\r\n                }, 1000);\r\n            }\r\n            \r\n            //else error('Kunde inte ladda datan :(');\r\n        });\r\n        \r\n        // Run default SQL list\r\n        axiosUntilGettingData.then((result) => {            \r\n            if(routes === '/') axiosGet('default', '');\r\n            if(routes === '/Inloggad' || routes === '/Add') axiosGet('userSpec', getLocalStorageData('token'));\r\n        }).catch((result) =>{\r\n            updateErroLoadingSQLData(result);\r\n        })\r\n    }\r\n    const createAddedRecordDataArr = () => {\r\n        console.log('Hej');\r\n        const puschToAddedRecordData = [...addedSQLData];\r\n        console.log(\"createAddedRecordDataArr -> TableColsHeadlineOutloged\", TableColsHeadlineOutloged)\r\n        for (let index = 0; index < TableColsHeadlineOutloged.length; index++) puschToAddedRecordData.push('');\r\n        console.log(\"createAddedRecordDataArr -> puschToAddedRecordData\", puschToAddedRecordData)\r\n        if (incommingNewSQLData.length === 0) updateAddedSQLData(puschToAddedRecordData);\r\n    }\r\n    console.log(\"RunSQLTableData -> tableColsHeadline\", tableColsHeadline)\r\n    return(\r\n        <>\r\n            {(incommingNewSQLData.length !== 0) \r\n                ?\r\n                incommingNewSQLData.map((item, index) => {\r\n                    return(\r\n                        <tr key={ index }>\r\n                            {(correctRoutes() === routeName.mainPage+routeName.login)\r\n                                ?   <>\r\n                                    {(item.timeStamp === targetBtn)\r\n                                        ?\r\n                                            <>\r\n                                                <td>{ <input style={ UserInputForm.general } type=\"text\" data-type={ tableColsHeadline[0] } data-typenr={ 0 } value={ editArr[0] } onChange={ setStrsType } id={ 'editRecord' } />}</td>\r\n                                                <td>{ <input style={ UserInputForm.general } type=\"text\" data-type={ tableColsHeadline[1] } data-typenr={ 1 } value={ editArr[1] } onChange={ setStrsType } id={ 'editRecord' } />}</td>\r\n                                                <td>{ <input style={ UserInputForm.general } type=\"text\" data-type={ tableColsHeadline[2] } data-typenr={ 2 } value={ editArr[2] } onChange={ setStrsType } id={ 'editRecord' } />}</td>\r\n                                                <td>{ <input style={ UserInputForm.general } type=\"text\" data-type={ tableColsHeadline[3] } data-typenr={ 3 } value={ editArr[3] } onChange={ setStrsType } id={ 'editRecord' } />}</td>\r\n                                                <td>{ <input style={ UserInputForm.general } type=\"text\" data-type={ tableColsHeadline[4] } data-typenr={ 4 } value={ editArr[4] } onChange={ setStrsType } id={ 'editRecord' } />}</td>\r\n                                                <td>{ <input style={ UserInputForm.general } type=\"text\" data-type={ tableColsHeadline[5] } data-typenr={ 5 } value={ editArr[5] } onChange={ setStrsType } id={ 'editRecord' } />}</td>\r\n                                            </>\r\n                                        :\r\n                                            <>\r\n                                                <td>{ item.date}</td>\r\n                                                <td>{ item.activity }</td>\r\n                                                <td>{ item.concerned }</td>\r\n                                                <td>{ item.type }</td>\r\n                                                <td>{ item.place }</td>\r\n                                                <td>{ item.content }</td>\r\n                                            </>\r\n                                        }\r\n\r\n                                        <td>\r\n                                            <SQLTableStyle.toolContainer key={ index+1*10 }>\r\n                                                <SubmitBtn key={ index+10*10 }\r\n                                                    style={ specificStyleRemoveRecord }\r\n                                                    name={ <FcDeleteRow style={ specificStyleBtnIcon } onclick={ runHandleRecord }/>  }\r\n                                                    onClickFunction={ runHandleRecord }\r\n                                                    id={ 'removeRecord' }\r\n                                                    btnOptional={ item.timeStamp }\r\n                                                />\r\n                                                {(inEditModeSetting === true && item.timeStamp === targetBtn)\r\n                                                    ?   <SubmitBtn key={ index+20*10 }\r\n                                                            style={ specificStyleEditRecord }\r\n                                                            name={ <FcApproval style={ specificStyleBtnIcon } onclick={ runHandleRecord }/> }\r\n                                                            onClickFunction={ runHandleRecord }\r\n                                                            id={ 'runEditRecord' }\r\n                                                            btnOptional={ item.timeStamp }\r\n                                                        />\r\n                                                    :   <SubmitBtn key={ index+20*10 }\r\n                                                            style={ specificStyleEditRecord }\r\n                                                            name={ <FiEdit style={ specificStyleBtnIcon } onclick={ runHandleRecord }/> }\r\n                                                            onClickFunction={ runHandleRecord }\r\n                                                            id={ 'setEditMode' }\r\n                                                            btnOptional={ item.timeStamp }\r\n                                                        />\r\n                                                }\r\n                                            </SQLTableStyle.toolContainer>\r\n                                        </td>\r\n                                    </>\r\n                                :   <>\r\n                                    <td>{ item.date }</td>\r\n                                        <td>{ item.activity }</td>\r\n                                        <td>{ item.concerned }</td>\r\n                                        <td>{ item.type }</td>\r\n                                        <td>{ item.place }</td>\r\n                                        <td>{ item.content }</td>\r\n                                    </>\r\n                            }\r\n                        </tr>\r\n                    );\r\n                })\r\n            :   \r\n                <>\r\n                    <tr>\r\n                        <td>\r\n                            <Spinner str={'Tabellen laddas'}/>\r\n                        </td>\r\n                    </tr>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","/* ================================================== Search SQLData ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../Storage.js';\r\nimport '../Style/SearchBar.css';\r\n\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <>\r\n            Kommande sökfunktion!!!\r\n            {/* <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n            </button> */}\r\n\r\n        </>\r\n    );\r\n}","/* ================================================== Style Rouls for AddRecords ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\nexport let AddForm = {\r\n    dateInputContainer: styled.section`\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n    `,\r\n    addBtn: styled.section`\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n    `,\r\n}","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import CSS rouls\r\nimport { UserInputForm, UserInputSelect } from '../Style/LogedInStyle';\r\nimport { AddForm } from '../Style/AddFormStyle';\r\nimport { specificStyleAddRow, specificStyleBtnIcon } from '../Style/SpecificStyle';\r\nimport { selectContainers } from '../Style/SQLTableStyle';\r\nimport { AddSQLDataStyle } from'../Style/SQLTableStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { SubmitBtn } from './SubmitBtn';\r\nimport { FcAddRow, FcCalendar } from \"react-icons/fc\";\r\n\r\nexport let AddFormCellInput = (props) => {\r\n    const { dataType, cellIndex, inputOnChange, sOonClick, tableToolBtn, valueStr, id } = props;\r\n    return(\r\n        <>\r\n            {(cellIndex === 0)\r\n                ?   <>\r\n                        <AddForm.dateInputContainer>\r\n                          <SubmitBtn\r\n                                style={ specificStyleAddRow }\r\n                                name={ <FcCalendar style={ specificStyleBtnIcon }/> }\r\n                                onClickFunction={ tableToolBtn }\r\n                                id={ 'calender' }\r\n                            />\r\n                            <input \r\n                                type=\"text\"\r\n                                id={ id }\r\n                                style={ UserInputForm.date }\r\n                                data-type={ dataType } \r\n                                data-typenr={ cellIndex }\r\n                                onChange={ inputOnChange }\r\n                                value={ valueStr }\r\n                            />\r\n                        </AddForm.dateInputContainer>\r\n                        <AddSQLDataStyle.addDate> 20yy-mm-dd </AddSQLDataStyle.addDate>\r\n                    </>\r\n                : (cellIndex > 0 && cellIndex < 6) \r\n                    ?    <>\r\n                            <input \r\n                                type=\"text\"\r\n                                id={ id }\r\n                                style={ UserInputForm.general }\r\n                                data-type={ dataType } \r\n                                data-typenr={ cellIndex }\r\n                                onChange={ inputOnChange }\r\n                                value={ valueStr }\r\n                            />\r\n                            <UserInputSelect.container>\r\n                                <select key={ cellIndex } style={ selectContainers } onChange={ sOonClick }>\r\n                                    <option>Välj</option>\r\n                                    {(props.options !== false) &&\r\n                                        props.options.map((item, optionIndex) => {\r\n                                            return(\r\n                                                <option key={ optionIndex } data-cell={ cellIndex }id={ optionIndex } value={ item }>{ item }</option>\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </UserInputSelect.container>\r\n                        </>\r\n                    :   \r\n                        <AddForm.addBtn>\r\n                            <SubmitBtn\r\n                                style={ specificStyleAddRow }\r\n                                name={ <FcAddRow style={ specificStyleBtnIcon }/> }\r\n                                onClickFunction={ tableToolBtn }\r\n                                id={ 'addRecord' }\r\n                            />\r\n                        </AddForm.addBtn>\r\n            }\r\n        </>\r\n    );\r\n}","/* ================================================== AddRecord ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import inportant components for the specific page\r\nimport { TableColsHeadlineOutloged, TableColsHeadlineInloged } from '../Data/TableColsHeadline';\r\nimport { optionColListArr$ } from '../Storage';\r\nimport { AddFormCellInput } from '../Data/AddFormCellInput';\r\nimport { routeName } from '../Data/RouteNames';\r\nimport { correctRoutes } from '../Data/runAppUrls';\r\n\r\nexport let AddForm = (props) => {\r\n    let [ optionColListArr, updateOptionColListArr ] = useState([]);\r\n    let [ tableColsHeadline, setTableColsHeadline ] = useState([]);\r\n    const { setStrsType, choosenSelectOption, addArr, tableToolBtn } = props;\r\n\r\n    useEffect(() => {\r\n        if(tableColsHeadline.length === 0 && correctRoutes() === `/${routeName.login}`) setTableColsHeadline(TableColsHeadlineInloged); \r\n\r\n        optionColListArr$.subscribe((SQLColListArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure \r\n            if (SQLColListArr) if(optionColListArr.length === 0) updateOptionColListArr(Object.values(SQLColListArr));\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n    }, [tableColsHeadline]);\r\n\r\n    return(\r\n        <>\r\n            <tr>\r\n                {\r\n                    tableColsHeadline.map((item, cellIndex) => {                   \r\n                        return(\r\n                            <td key={ cellIndex }>                \r\n                                <AddFormCellInput\r\n                                    id={ 'addRecord' }\r\n                                    tableToolBtn={ tableToolBtn }\r\n                                    dataType={ item }\r\n                                    cellIndex={ cellIndex }\r\n                                    inputOnChange={ setStrsType }\r\n                                    sOonClick={ choosenSelectOption }\r\n                                    valueStr={ addArr[cellIndex] }\r\n                                    options={ optionColListArr[cellIndex] !== undefined && optionColListArr[cellIndex] }\r\n                               />\r\n                            </td>\r\n                        );\r\n                    })\r\n                }                          \r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    Dina Aktiviteter\r\n                </td>\r\n            </tr>\r\n        </>          \r\n    );\r\n}","/* ================================================== MainContents ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\n\r\n// Import CSS rouls\r\nimport { SQLTableStyle, SQLDataPagination } from '../Style/SQLTableStyle';\r\nimport '../Style/SQLTable.css';\r\n\r\n// Import inportant components for the specific page\r\nimport { TableColsHeadlineOutloged, TableColsHeadlineInloged } from '../Data/TableColsHeadline';\r\nimport { getLocalStorageData } from '../Data/LocalStorage';\r\nimport { runAddRow } from '../Data/FunctionsTableToolBtn';\r\nimport { RunSQLTableHeader } from './RunSQLTableHeader';\r\nimport { axiosPost, axiosGet } from '../Data/Axios';\r\nimport { RunSQLTableData } from './RunSQLTableData';\r\nimport { correctRoutes } from '../Data/runAppUrls';\r\nimport { incommingSQLDataArr$ } from '../Storage';\r\nimport { routeName } from '../Data/RouteNames';\r\nimport { SearchBar } from './SearchBar';\r\nimport { gotoPage$ } from '../Storage';\r\nimport { AddForm } from './AddForm';\r\n\r\nexport let RunSQLTable = () => {\r\n    let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ addArr, updateAddArr ] = useState([]);\r\n    let [ editArr, updateEditArr ] = useState([]);\r\n    let [ editMode, setEditMode ] = useState(false);\r\n    let [ editBtn, setEditBtn ] = useState('');\r\n    let [ tableColsHeadline, setTableColsHeadline ] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        if (tableColsHeadline.length === 0 && correctRoutes() === routeName.mainPage) setTableColsHeadline(TableColsHeadlineOutloged);\r\n        if(tableColsHeadline.length === 0 && correctRoutes() === `/${routeName.login}`) setTableColsHeadline(TableColsHeadlineInloged); \r\n        \r\n        gotoPage$.subscribe((gotoPage) => {            \r\n            updateRedirectToPage(gotoPage);\r\n        });\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure\r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n        if(addArr.length === 0) createAddArr();\r\n        \r\n    },[ redirectToPage, addArr, editArr, editMode, editBtn ]);\r\n    \r\n    const createAddArr = () => {\r\n        const pushToAddedRecordData = [...addArr];\r\n        for (let index = 0; index < tableColsHeadline.length; index++) pushToAddedRecordData.push('');\r\n        if (addArr.length === 0) updateAddArr(pushToAddedRecordData);\r\n    }\r\n    \r\n    const tableToolBtn= (e) => {\r\n        let targetBtn = e.target;\r\n        console.log(\"tableToolBtn -> targetBtn\", targetBtn);\r\n        let targetBtnId = targetBtn.id;\r\n        console.log(\"tableToolBtn -> targetBtnId\", targetBtnId)\r\n        if(targetBtnId === 'addRecord') runAddRow(targetBtnId, addArr);\r\n        \r\n        e.stopPropagation();\r\n    }\r\n    const choosenSelectOption = (e) => {\r\n        const pushToAddedRecordData = [...addArr];\r\n        const selectedOption = e.target; \r\n        const selectedStr = selectedOption.value;\r\n        const selectedIndex = selectedOption.options.selectedIndex;\r\n        const selectedCellIndex = selectedOption.options[selectedIndex].dataset.cell;\r\n        pushToAddedRecordData[selectedCellIndex] = selectedStr;\r\n        updateAddArr(pushToAddedRecordData);\r\n    }\r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let typeId = type.id;\r\n        console.log(\"setStrsType -> typeId\", typeId)\r\n        \r\n        if (typeId === 'addRecord') {\r\n            const pushToAddedRecordData = [...addArr];\r\n            let inputStr = type.value;                    \r\n            console.log(\"setStrsType -> inputStr\", inputStr)\r\n            const {dataset} = type;        \r\n            console.log(\"setStrsType -> type\", type)\r\n            for (let index = 0; index < tableColsHeadline.length; index++) if (dataset.type === tableColsHeadline[index]) pushToAddedRecordData[dataset.typenr] = inputStr;\r\n            console.log(\"setStrsType -> pushToAddedRecordData\", pushToAddedRecordData)\r\n            updateAddArr(pushToAddedRecordData);\r\n        }\r\n        if (typeId === 'editRecord') {\r\n            const pushToAddedRecordData = [...editArr];\r\n            let inputStr = type.value;                    \r\n            console.log(\"setStrsType -> inputStr\", inputStr)\r\n            const {dataset} = type;   \r\n            console.log(\"setStrsType -> type\", dataset.type)\r\n            console.log(\"setStrsType -> tableColsHeadline\", tableColsHeadline);\r\n\r\n            // Fel kollumn namn angets, nyckel ska visas men nu är det dess värde som står som villkor\r\n            for (let index = 0; index < tableColsHeadline.length; index++) if (dataset.type === tableColsHeadline[index]) pushToAddedRecordData[dataset.typenr] = inputStr;\r\n            console.log(pushToAddedRecordData);\r\n            \r\n            updateEditArr(pushToAddedRecordData);\r\n\r\n        }\r\n        e.stopPropagation();\r\n    }\r\n    const setTargetEditRecord = (timeStamp) => {\r\n        let targetObj = {};\r\n        incommingNewSQLData.map((item) => { \r\n            if(item.timeStamp === timeStamp) targetObj = item;\r\n        });\r\n        let targetArr = Object.values(targetObj);\r\n        console.log(targetArr.slice(2))\r\n        updateEditArr(targetArr.slice(2));\r\n    }\r\n    const runHandleRecord = (e) => {\r\n        let targetBtn = e.target;\r\n        const btnId = targetBtn.id;\r\n        \r\n        if (btnId === 'removeRecord') {\r\n            const {dataset} = targetBtn; \r\n            axiosPost(btnId, dataset.optional);\r\n            setTimeout(() => {axiosGet('userSpec', getLocalStorageData('token')); }, 400);\r\n        }\r\n        if (btnId === 'runEditRecord') { \r\n            setEditMode(false);\r\n            setEditBtn('');\r\n            \r\n            //Call the Axios which will send the edited data to the server \r\n            axiosPost('editRecord', editArr );\r\n            setTimeout(() => {axiosGet('userSpec', getLocalStorageData('token')); }, 400);\r\n        }\r\n        if (btnId === 'setEditMode') {\r\n            console.log('hej');\r\n            const {dataset} = targetBtn; \r\n            setEditBtn(dataset.optional);\r\n            setTargetEditRecord(dataset.optional);\r\n            \r\n            setEditMode(true);\r\n        }\r\n        e.stopPropagation();\r\n    }    \r\n    console.log(\"RunSQLTable -> editArr\", editArr)\r\n    return (\r\n        <> \r\n            <SQLTableStyle.container>\r\n                <SQLTableStyle.col1_3>\r\n                </SQLTableStyle.col1_3>\r\n\r\n                <SQLTableStyle.col2>\r\n                    <SQLTableStyle.searchBar><SearchBar/></SQLTableStyle.searchBar>\r\n                    <SQLTableStyle.body__contents>\r\n                        <table id=\"table1_body\">\r\n                            <RunSQLTableHeader/>\r\n                            <tbody id=\"table1_tbody\">\r\n                                {correctRoutes() === routeName.login && <Redirect to={ `/${ routeName.login }`} />}\r\n                                <Route path={ '/inloggad' } render={(props) => <AddForm {...props}\r\n                                        tableToolBtn={ tableToolBtn }\r\n                                        setStrsType={ setStrsType }\r\n                                        choosenSelectOption={ choosenSelectOption }\r\n                                        addArr={ addArr }\r\n                                    />}\r\n                                />\r\n                                <RunSQLTableData\r\n                                    runHandleRecord={ runHandleRecord }\r\n                                    inEditModeSetting={ editMode }\r\n                                    targetBtn={ editBtn }\r\n                                    editArr={ editArr }\r\n                                    setStrsType={ setStrsType }\r\n                                />\r\n                            </tbody>\r\n\r\n{/*                             <SQLDataPagination.container>\r\n                                <SQLDataPagination.arrowGroupLeft>\r\n                                    <SQLDataPagination.arrowDubbleLeft className=\"material-icons\"> double_arrow </SQLDataPagination.arrowDubbleLeft>\r\n                                    <SQLDataPagination.arrowLeft className=\"material-icons\"> chevron_left </SQLDataPagination.arrowLeft>\r\n                                </SQLDataPagination.arrowGroupLeft>\r\n\r\n                                <SQLDataPagination.inputNrGroupMiddle>\r\n                                    <SQLDataPagination.inputSide></SQLDataPagination.inputSide> / <SQLDataPagination.totSides>100</SQLDataPagination.totSides>\r\n                                </SQLDataPagination.inputNrGroupMiddle>\r\n\r\n                                <SQLDataPagination.arrowGroupRight>\r\n                                    <SQLDataPagination.arrowRight className=\"material-icons\"> chevron_right </SQLDataPagination.arrowRight>\r\n                                    <SQLDataPagination.arrowDubbleLRight className=\"material-icons\"> double_arrow </SQLDataPagination.arrowDubbleLRight>\r\n                                </SQLDataPagination.arrowGroupRight>\r\n                            </SQLDataPagination.container> */}\r\n\r\n                        </table>\r\n                    </SQLTableStyle.body__contents>\r\n\r\n                </SQLTableStyle.col2>\r\n\r\n            </SQLTableStyle.container>\r\n        </>\r\n    );\r\n}","// ================================================== Function´s for RunSQLData ==================================================\r\n// Import inportant components for the specific page\r\nimport { getLocalStorageData } from './LocalStorage';\r\nimport { axiosPost, axiosGet } from './Axios';\r\n\r\n\r\nexport const runAddRow = (btnId, addedSQLData) => {\r\n    console.log(\"runAddRow -> addedSQLData\", addedSQLData)\r\n    console.log(\"runAddRow -> btnId\", btnId)\r\n    axiosPost(btnId, addedSQLData);\r\n    setTimeout(() => {\r\n        axiosGet('userSpec', getLocalStorageData('token'));\r\n    }, 400);\r\n}\r\n","// ================================================== HeadBarStyle ==================================================\r\nimport styled from 'styled-components';\r\n\r\n// ============================== Generall ==============================\r\nconst headerWidth = 1400;\r\nconst headContainerCenterPoss = headerWidth/2;\r\nexport const logaImage = {\r\n    width: '210px',\r\n    marginTop: '40px',\r\n    marginBottom: '0',\r\n}\r\n\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    background-color: white;\r\n    width: 100%;\r\n  `,\r\n  headContainer: styled.section`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: ${headerWidth}px;\r\n    margin-left: calc(50% - ${headContainerCenterPoss}px);\r\n    background: #FFFFFF;\r\n  `,\r\n  siteLogaContainer: styled.section`\r\n    margin-top: -23px;\r\n    margin-left: 90px;\r\n    width: 36%;\r\n  `,\r\n  appStatusContainer: styled.section`\r\n    width: 62%;\r\n  `,\r\n  headline: styled.section`\r\n    display: flex;\r\n    align-items: flex-end;\r\n    width: 500px;\r\n    height: 18px;\r\n    margin-left: 45px;\r\n    margin-top: -18px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 900;\r\n    font-size: 12px;\r\n    line-height: 150%;\r\n    letter-spacing: 0.05em;\r\n    text-transform: uppercase;\r\n    color: #3D3D3D;\r\n  `,\r\n}\r\n\r\n// ============================== LoginForm ==============================\r\n\r\nexport let LoginFormStyle = {\r\n    headContainer: styled.section`\r\n      width: 400px;\r\n      display: flex;\r\n      flex-direction: row;\r\n      margin-left: -54px;\r\n      margin-top: -8px;\r\n    `,\r\n    formContainer: styled.section`\r\n      width: 600px;\r\n      display: flex;\r\n      flex-direction: row;\r\n      margin-left: 70px;\r\n      padding-top: 23px;\r\n    `,\r\n    usernameContainer: styled.section`\r\n      position: relative;\r\n    `,\r\n    passwordContainer: styled.section`\r\n      position: relative;\r\n      margin-left: 8px;\r\n    `,\r\n    labelFormNoFocus: styled.label`\r\n      position: absolute;\r\n      height: 50px;\r\n      margin-left: 10px;\r\n      margin-bottom: -25px;\r\n      font-family: Roboto;\r\n      font-style: 500;\r\n      font-weight: normal;\r\n      font-size: 16px;\r\n      line-height: 150%;\r\n      letter-spacing: 0.005em;\r\n      color: #000000;\r\n      background-color: none;\r\n      \r\n    `,\r\n    inputForm: styled.input`\r\n      width: 232px;\r\n      height: 29px;\r\n      margin-left: 0px;\r\n      margin-top: -32px;\r\n      background: none; /*   background: #F5F5F5; */\r\n      border: 1px solid #E5E5E5;\r\n      box-sizing: border-box;\r\n      border-radius: 4px;\r\n    `,  \r\n    btnLoginContainer: styled.section`\r\n      width: 181px;\r\n      height: 80%;\r\n      margin-left: 8px;\r\n      margin-top: 2px;\r\n    `,\r\n    userInfoContainer: styled.section`\r\n      width: 377px;\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: space-between;\r\n    `,\r\n    userErrorMess: styled.p`\r\n      margin-top: 14px;\r\n      margin-left: 18px;\r\n      width: 149px;\r\n      font-size: 13.5px;\r\n      color: #AE0B05;\r\n      font-weight: bold;\r\n    `,\r\n  }\r\nconsole.log(\"LoginFormStyle\", LoginFormStyle)\r\nconsole.log(\"LoginFormStyle\", LoginFormStyle)\r\n  \r\n  // ============================== LogedIn Mess ==============================\r\nexport let LogedInStyle = {\r\n    headContainer:styled.section`\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: space-around;\r\n      width: 52%;\r\n      margin-left: 41.5%;\r\n      height: 0;\r\n      padding-top: 40px;\r\n    `,\r\n    userHelp: styled.section`\r\n      margin-left: -50px;\r\n      font-family: Roboto;\r\n      font-style: normal;\r\n      font-weight: 500;\r\n      font-size: 18px;\r\n    `,\r\n    inlogedUser: styled.section`\r\n      width: 300px;\r\n      margin-left: 30px;\r\n      font-family: Roboto;\r\n      font-style: normal;\r\n      font-weight: 500;\r\n      font-size: 18px;\r\n    `,\r\n  }","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import CSS rouls\r\nimport { specificStyleLogin, labelFormFocused, specificStyleUserReg } from '../Style/SpecificStyle';\r\nimport { LoginFormStyle } from '../Style/HeadbarStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\n\r\nexport let LoginForm = (props) => {\r\n    const {onChangeUserName, onChangeUserPwd, userNameStr, userPwdStr, runAuth, runNewUserReg, inlogStatus, inlogMess} = props;    \r\n    const [ inputFormSpecificFocusStyle, setInputFormSpecificFocusStyle ] = useState(null);\r\n    useEffect(() => {\r\n\r\n    }, [inputFormSpecificFocusStyle])\r\n    // Handle the inlogg forms and its behaviour when clicking\r\n    const handleInputForm = (e) => {\r\n        const targetForm = e.target;\r\n        const inputFormId = targetForm.id;\r\n        console.log(\"handleInputForm -> inputFormId\", inputFormId)\r\n        if(inputFormId === \"inputUserPassword\"){\r\n            setInputFormSpecificFocusStyle(labelFormFocused);\r\n        }\r\n    }\r\n    return(\r\n        <LoginFormStyle.headContainer>\r\n            <LoginFormStyle.formContainer style={(inputFormSpecificFocusStyle === null) ? {marginTop: '22px'} : {marginTop: '35px'}}>\r\n                <LoginFormStyle.usernameContainer>\r\n                    <LoginFormStyle.labelFormNoFocus id=\"inputUserPassword\" style={ inputFormSpecificFocusStyle } onClick={ handleInputForm }>Användarnamn</LoginFormStyle.labelFormNoFocus>\r\n                    <LoginFormStyle.inputForm id=\"inputUserPassword\" type=\"text\" onChange={ onChangeUserName } value={ userNameStr } onClick={ handleInputForm }/>\r\n                </LoginFormStyle.usernameContainer> \r\n                <LoginFormStyle.passwordContainer>\r\n                    <LoginFormStyle.labelFormNoFocus id=\"inputUserPassword\" style={ inputFormSpecificFocusStyle } onClick={ handleInputForm }>Lösenord</LoginFormStyle.labelFormNoFocus>\r\n                    <LoginFormStyle.inputForm id=\"inputUserPassword\" type=\"text\" onChange={ onChangeUserPwd } value={ userPwdStr } onClick={ handleInputForm }/>\r\n                </LoginFormStyle.passwordContainer>  \r\n            </LoginFormStyle.formContainer>\r\n                <LoginFormStyle.btnLoginContainer>\r\n                <SubmitBtn\r\n                    style={ specificStyleLogin }\r\n                    name={ 'Logga In' }\r\n                    onClickFunction={ runAuth }\r\n                    id={ 'Auth' }\r\n                    type=\"buttom\"\r\n                />\r\n            </LoginFormStyle.btnLoginContainer>\r\n            <SubmitBtn\r\n                    style={ specificStyleUserReg }\r\n                    name={ 'Ny Användare' }\r\n                    onClickFunction={ runNewUserReg }\r\n                    id={ 'Registrera' }\r\n                    type=\"buttom\"\r\n            />\r\n            <LoginFormStyle.userInfoContainer>\r\n                <LoginFormStyle.userErrorMess>\r\n                    {(inlogStatus === 203)\r\n                        ? (userNameStr === null && userPwdStr === null ) \r\n                            ? inlogMess : null\r\n                        : null\r\n                    }\r\n                </LoginFormStyle.userErrorMess>\r\n\r\n            </LoginFormStyle.userInfoContainer>\r\n        </LoginFormStyle.headContainer>\r\n    );\r\n}","/* ================================================== MainApp for the app ==================================================\r\n   Imports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, userData$, updateGotoPage} from './Components/Storage.js';\r\nimport { RunSQLTable } from './Components/Structure/RunSQLTable';\r\nimport { Headbar } from './Components/Structure/Headbar.js';\r\nimport { routeName } from './Components/Data/RouteNames';\r\nimport { LoginForm } from './Components/Data/LoginForm'\r\nimport {axiosPost } from './Components/Data/Axios';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\n\r\nexport let MainPage = () => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    const [ userNameStr, updateUserNameStr ] = useState('');\r\n    const [ userPwdStr, updateUserPwdStr ] = useState('');\r\n    let [ redirectToPage ] = useState('Auth');\r\n\r\n    useEffect(() => {   \r\n        headName$.subscribe((headName) => {\r\n            setAppName(headName);\r\n        });\r\n        userData$.subscribe((returningUserDispalyingObj) => {\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n        if(redirectToPage === routeName.userReg) return <Redirect to={ `${ routeName.userReg }` } />\r\n        \r\n    }, [ redirectToPage ]);\r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        updateUserNameStr(targetUserName);\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        updateUserPwdStr(targetUserPwd);\r\n    }\r\n    let runAuth = (e) => {\r\n        let userInformation = {};\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n  \r\n        /* Authorization with a token as response backValidate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: userNameStr, userPassWord: userPwdStr}\r\n        \r\n        axiosPost(targetBtnId, userInformation);    \r\n        updateGotoPage(targetBtnId);\r\n        //if (inlogStatus === 203) return; \r\n    }\r\n    let runNewUserReg = (e) =>{\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n        updateGotoPage(targetBtnId); \r\n    }    \r\n    return (\r\n        <>  \r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LoginForm\r\n                        appUrl={appUrl}\r\n                        onChangeUserName={onChangeUserName}\r\n                        userNameStr={userNameStr}\r\n                        onChangeUserPwd={onChangeUserPwd}\r\n                        userPwdStr={userPwdStr}\r\n                        runAuth={runAuth}\r\n                        runNewUserReg={runNewUserReg}\r\n                        inlogStatus={inlogStatus}\r\n                        inlogMess={inlogMess}\r\n                    />\r\n                }\r\n            />            \r\n            <Route exact path={appUrl} component={ RunSQLTable }/>\r\n        </>\r\n    );\r\n}","/* ================================================== Headbar Stgatus when user is logedIn ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import CSS rouls\r\nimport { specificStyleLogout } from '../Style/SpecificStyle';\r\nimport { LogedInStyle } from '../Style/HeadbarStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport Spinner from '../Data/Spinner';\r\n\r\nexport let LogedIn = (props) => {\r\n    const { inlogedUser, functionLogOut } = props;\r\n    return(\r\n        <LogedInStyle.headContainer>\r\n            <LogedInStyle.userHelp>\r\n                Hjälp\r\n            </LogedInStyle.userHelp>\r\n            <LogedInStyle.inlogedUser>\r\n                {(inlogedUser === '' ) \r\n                    ? <>\r\n                            Välkommen in ... <Spinner/>\r\n                        </>\r\n                    : `Välkommen in ${ inlogedUser }`\r\n                }\r\n            </LogedInStyle.inlogedUser>\r\n                <SubmitBtn\r\n                    style={ specificStyleLogout }\r\n                    name={ 'Logga Ut' }\r\n                    onClickFunction={ functionLogOut }\r\n                    id={ '/' }\r\n                    btnOptional={ '' }\r\n                /> \r\n        </LogedInStyle.headContainer>\r\n    );\r\n}","// ================================================== Shared functions ==================================================\r\n// Import inportant components for the specific page\r\nimport { updateLocalstorage, updateGotoPage } from '../Storage.js';\r\n\r\nexport let runLogOut = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    updateGotoPage(targetBtnId);\r\n\r\n    updateLocalstorage(window.localStorage.clear());\r\n}\r\nexport let runAddRecord = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    updateGotoPage(targetBtnId);\r\n}\r\nexport let runReturnFromAddRecord = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    updateGotoPage(targetBtnId);\r\n}\r\n","/* ================================================== LogedIn page ==================================================\r\n   Imports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$ } from './Components/Storage.js';\r\nimport { RunSQLTable } from './Components/Structure/RunSQLTable';\r\nimport { LogedIn } from './Components/Structure/LogedIn';\r\nimport { runLogOut } from './Components/Data/CommonFunction';\r\nimport { Headbar } from './Components/Structure/Headbar';\r\n\r\nexport let LogedInPage = () => {\r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ appName, setAppName ] = useState('');\r\n\r\n    useEffect(() => {\r\n        //setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        //}, 1000);\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {         \r\n            updateInlogedUser(inlogedUserFullName);\r\n        }); \r\n    }, []); \r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Inloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LogedIn\r\n                        inlogedUser={ inlogedUser }\r\n                        functionLogOut={ runLogOut }\r\n                    />\r\n                }\r\n            />  \r\n            <RunSQLTable/>                 \r\n        </>\r\n    );\r\n}\r\n","/* ================================================== MainApp for the app ==================================================\r\n   Imports module */\r\nimport React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { HashRouter, Route, Redirect } from \"react-router-dom\";\r\n\r\n// Import inportant components for the specific page\r\nimport { updateHeadName, gotoPage$ } from './Components/Storage.js';\r\nimport { routeName } from './Components/Data/RouteNames';\r\nimport { RegUser } from './Components/Structure/RegUser';\r\nimport { Auth } from './Components/Data/Authorization';\r\nimport { MainPage } from './MainPage.js';\r\nimport { LogedInPage } from './LogedInPage';\r\n\r\nupdateHeadName('Årsklockan');\r\n\r\nlet MainApp = () => {\r\n  let [ appUrl, setAppUrl ] = useState('/');\r\n  let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n  \r\n  useEffect(() => {\r\n    gotoPage$.subscribe((gotoPage) => {\r\n      updateRedirectToPage(gotoPage);\r\n    });\r\n    \r\n  },[redirectToPage]);\r\n\r\n  return (\r\n    <HashRouter basename='/'>\r\n      {redirectToPage === routeName.mainPage && <Redirect to={ `/`} />} \r\n      {redirectToPage === routeName.auth  && <Redirect to={ `/${ routeName.auth }`}/>}  \r\n      {redirectToPage === routeName.userReg  && <Redirect to={ `/${ routeName.userReg }`}/>} \r\n      {redirectToPage === routeName.login && <Redirect to={ `/${ routeName.login }`} />} \r\n\r\n      <Route exact path={ appUrl } component={ MainPage } />\r\n      <Route exact path={ appUrl + routeName.auth } component={ Auth }/>\r\n      <Route exact path={ appUrl + routeName.userReg } component={ RegUser }/>   \r\n      <Route exact path={ appUrl + routeName.login } component={ LogedInPage }/>  \r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default MainApp; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// Imports the mail CSS file, is meant to be a container for the basic rouls that you not need touching\r\nimport './Components/Style/Body.css';\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}