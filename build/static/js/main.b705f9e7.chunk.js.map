{"version":3,"sources":["Components/GlobalProps.js","Components/Data/Axios.js","Components/Structure/LogInOut.js","Components/Structure/Headbar.js","Components/Structure/SQLTable.js","Components/Structure/SearchBar.js","MainApp.js","serviceWorker.js","index.js"],"names":["savedSQLDataArr","headName$","BehaviorSubject","incommingSQLDataArr$","updateSavedSQLData","incommingSQLDataArr","console","log","next","process","backendURL","axiosGet","getStr","axios","get","then","response","incommingSQLRes","data","status","push","catch","error","LogInOut","props","id","type","onChange","placeholder","className","onClick","value","Headbar","useState","appName","setAppName","useEffect","subscribe","headName","SQLTable","incommingNewSQLData","updateIncommingNewSQLData","setTimeout","SQLDataArr","length","map","sqlDataObj","rowCounter","key","date","activity","state","concerned","place","content","SQLStatementsObj","SearchBar","updateincommingSQLData","MainApp","Helmet","charSet","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b705f9e7.chunk.js","sourcesContent":["import {BehaviorSubject} from \"rxjs\";\r\nlet firstRun= true;\r\nlet headName = '';\r\n\r\nlet incommingSQLDataArr = [];\r\n\r\nlet savedSQLDataArr = [];\r\nlet SQLFilterMonthsBtnsArr = [];\r\nlet SQLFilterConcernedBtnsArr = [];\r\n\r\nexport const headName$ = new BehaviorSubject(headName);\r\n\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\nexport const SQLFilterMonthsBtnsArr$ = new BehaviorSubject(SQLFilterMonthsBtnsArr);\r\nexport const SQLFilterConcernedBtnsArr$ = new BehaviorSubject(SQLFilterConcernedBtnsArr);\r\n\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n/* \r\n    if(incommingSQLDataArr && firstRun === true) {\r\n        savedSQLDataArr.push(incommingSQLDataArr);\r\n        console.log(savedSQLDataArr);\r\n        incommingSQLDataArr$.next(savedSQLDataArr[0]);\r\n        firstRun = false;\r\n    } */\r\n    if(incommingSQLDataArr) {\r\n        //savedSQLDataArr[0].push(incommingSQLDataArr);\r\n        console.log(savedSQLDataArr);\r\n\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\n/* export function updateSQLFilterMonthsBtnsArr(SQLFilterMonthsBtnsArr){  \r\n    if(SQLFilterMonthsBtnsArr) SQLFilterMonthsBtnsArr$.next(SQLFilterMonthsBtnsArr);\r\n}\r\nexport function updateSQLFilterConcernedBtnsArr(SQLFilterConcernedBtnsArr){  \r\n    if(SQLFilterConcernedBtnsArr) SQLFilterConcernedBtnsArr$.next(SQLFilterConcernedBtnsArr);\r\n} */","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { updateSavedSQLData/* , updateSQLFilterMonthsBtnsArr,  updateSQLFilterConcernedBtnsArr */ } from '../GlobalProps.js';\r\nimport { setTimeout } from 'timers';\r\n\r\nlet savedSQLDataArr = [];\r\nlet SQLFilterMonthsBtnsArr = [];\r\nlet SQLFilterConcernedBtnsArr = [];\r\n\r\nconsole.log(process.env);\r\nlet backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Deployat by Heroku \r\n//let backendURL = 'http://localhost:3001'; // Just test the backend \r\n\r\nexport let axiosGet = (getStr) => {\r\n\r\n    console.log(backendURL + getStr);\r\n    \r\n    axios.get(backendURL + getStr).then(response => {\r\n        // Store the incommingg API data in a variables\r\n        let incommingSQLRes = response.data[0];\r\n\r\n        console.log(response);\r\n        /*  If incomming status of 200 = OK:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n            */\r\n            console.log(incommingSQLRes);\r\n        if (response.status === 200) {\r\n            //savedSQLDataArr.push(incommingSQLRes);         \r\n            updateSavedSQLData(incommingSQLRes);\r\n        }\r\n        /*  If incomming status of 201 = Created:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        */\r\n        if (response.status === 201) {\r\n            \r\n            savedSQLDataArr[0].push(incommingSQLRes[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n        else{\r\n        }\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n}\r\nexport let axiosPost = (postType, formBody) => {  \r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        formBody,\r\n    };\r\n    console.log(sendToSqlBackend);\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).\r\n    then(response => {\r\n        console.log(response);\r\n        console.log(postType);\r\n       //if (postType !== 'add') updateSQLDataArr(response.data[0]);\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n}     /*\r\n    Save both the months ans the cerncerned filter Btn in a individuall\r\n    array. The arrays are sep... from the filerering funtions!\r\n    */\r\n/*     for (let index = 0; index < filterBtns.length; index++) {\r\n        let filterMonthsBtnStr = filterBtns[index].month;\r\n        let filterConcernedBtnStr = filterBtns[index].concerned;\r\n\r\n        // Check if the strings already is in the array \r\n        if (!SQLFilterMonthsBtnsArr.includes(filterMonthsBtnStr)) SQLFilterMonthsBtnsArr.push(filterMonthsBtnStr);\r\n        if (!SQLFilterConcernedBtnsArr.includes(filterMonthsBtnStr)) SQLFilterConcernedBtnsArr.push(filterConcernedBtnStr);\r\n    } */\r\n    \r\n/*     updateSQLFilterMonthsBtnsArr(SQLFilterMonthsBtnsArr);\r\n    updateSQLFilterConcernedBtnsArr(SQLFilterConcernedBtnsArr);\r\n */","import React, { useState, useEffect } from 'react';\r\nimport { FormAdd } from './FormAdd.js';\r\nimport '../CSS/LogInOut.css';\r\n\r\nimport { isArray } from 'util';\r\n\r\nexport let LogInOut = (props) => {\r\n    return (\r\n        <section id=\"headbar__logInOut\">\r\n            <p id=\"logInOut__username\">Användarnamn</p><input type=\"text\" id=\"username__input\" onChange={ \"\" } placeholder=\"...\"/>\r\n            <p id=\"logInOut__password\">Lösenord</p><input type=\"text\" id=\"password__input\" onChange={ \"\" } placeholder=\"...\"/> \r\n            <section id=\"logInOut__btnContainer\">\r\n                <input type=\"submit\" className=\"btnContainer_submitBtn\" onClick={ '' } value=\"\"/>\r\n                <p className=\"btnContainer__headline\">Logga In</p>\r\n            </section>\r\n        </section>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { headName$ } from '../GlobalProps.js';\r\nimport { LogInOut } from './LogInOut.js';\r\nimport '../CSS/Headbar.css';\r\n\r\nexport let Headbar = () => {\r\n    let [ appName, setAppName ] = useState('');   \r\n\r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName$.value);\r\n        });\r\n    }, []);\r\n    console.log('header');\r\n    \r\n    return (\r\n        <>\r\n            <header id=\"headbar__Container\">\r\n                <p id=\"headbar__headLine\">{ appName }</p>\r\n                <LogInOut/>\r\n            </header>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\nimport { LogInOut } from './LogInOut.js';\r\nimport { axiosGet } from '../Data/Axios.js';\r\n\r\nimport '../CSS/SQLTable.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\n\r\nlet auth = {\r\n    userName: '',\r\n    password: ''\r\n}\r\nexport let SQLTable = () => {\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ addForm, setAddForm ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Run default SQL list\r\n        setTimeout(() => {\r\n            axiosGet('/SQLData');    \r\n        }, 3000);\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            console.log(SQLDataArr);\r\n            updateIncommingNewSQLData(SQLDataArr);\r\n/*             if (SQLDataArr.affectedRows){\r\n                updateIncommingNewSQLData(SQLDataArr[0]);\r\n            }\r\n            else {\r\n                updateIncommingNewSQLData(SQLDataArr[0]);\r\n            } */\r\n        });\r\n/*         setTimeout(() => {\r\n            savedSQLData.push(incommingNewSQLData);\r\n        }, 2000);\r\n */    },[]); \r\n    let runAdmin = (e) => {\r\n        let targetBtn = e.target.dataset.admin;\r\n        if (targetBtn === 'logIn') setAddForm(true);\r\n        if (targetBtn === 'logOut') setAddForm(false);\r\n    }\r\n    return (\r\n        <section id=\"container__tableSchedule\">\r\n\r\n            <table id=\"tableSchedule__body\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Datum</th>\r\n                        <th className=\"tableCol4\">Akitvitet</th>\r\n                        <th>Status</th>\r\n                        <th>Berörda</th>\r\n                        <th>Typ</th>\r\n                        <th>Plats</th>\r\n                        <th className=\"tableCol9\">Innehåll</th>\r\n                   </tr>\r\n                </thead>\r\n                <tbody id=\"tableSchedule__tBody\">\r\n                    {(incommingNewSQLData.length !== 0) \r\n                        ?\r\n                        incommingNewSQLData.map((sqlDataObj, rowCounter) => {\r\n                                \r\n                                return(\r\n                                    <tr key={ rowCounter }>\r\n                                        <td>{ sqlDataObj.date }</td>\r\n                                        <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                        <td>{ sqlDataObj.state }</td>\r\n                                        <td>{ sqlDataObj.concerned }</td>\r\n                                        <td>{ sqlDataObj.type }</td>\r\n                                        <td>{ sqlDataObj.place }</td>\r\n                                        <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        :   <tr>\r\n                                <td><p>Datan laddas in.... </p></td>\r\n                            </tr>\r\n                    }\r\n                    <tr>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    );\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\nimport '../CSS/SearchBar.css';\r\n\r\nlet activeMonthsStrArr = [];\r\nlet activeConcernedStrArr = [];\r\n\r\nlet checkedMonthsArr = [];\r\nlet checkedConcernedArr = [];\r\n\r\nlet concernedArr = [];\r\nlet monthsArr = [];\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n    let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            updateincommingSQLData(SQLDataArr);\r\n        });\r\n    }, []);\r\n    let getFilterStr = (filtering) => {\r\n        /* \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        */\r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n    let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        /*\r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        */\r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            */\r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    }\r\n    let filterChecked = ()  => {\r\n        let filterChecked = false;\r\n        let calcCeckedMonths = checkedMonthsArr.length;\r\n        let calcCeckedConcerned = checkedConcernedArr.length;\r\n\r\n        if (calcCeckedMonths === 0 && calcCeckedConcerned === 0) filterChecked = false;\r\n        if (calcCeckedMonths > 0 || calcCeckedConcerned > 0) filterChecked = true;\r\n        console.log(filterChecked);\r\n        \r\n        return filterChecked;\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n    console.log(SQLStatementsObj);\r\n    \r\n    return(\r\n        <section id=\"searchBar__Container\">\r\n            \r\n        </section>\r\n    )\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nimport { updateHeadName } from './Components/GlobalProps.js';\r\n\r\nimport { Headbar } from './Components/Structure/Headbar.js';\r\nimport { Information } from './Components/Structure/Information.js';\r\nimport { SQLTable } from './Components/Structure/SQLTable.js';\r\nimport { SearchBar } from './Components/Structure/SearchBar.js';\r\n\r\nlet MainApp = () => {\r\n  let [ appName, setAppName ] = useState('WorkshoppSchema');  \r\n  useEffect(() => {\r\n\r\n    updateHeadName(appName);\r\n  }, []);\r\n\r\n  \r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>{ appName }</title>\r\n      </Helmet>\r\n        <Headbar/>\r\n        <SearchBar/>\r\n        <SQLTable/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Components/CSS/Headbar.css';\r\n\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}