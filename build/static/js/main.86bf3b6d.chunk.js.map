{"version":3,"sources":["Components/GlobalProps.js","Components/Data/Spinner.js","Components/Data/Axios.js","Components/Data/LogInOut.js","Components/Structure/SQLTable.js","Components/Structure/SearchBar.js","LogedOut.js","LogedIn.js","Components/Structure/FormAdd.js","MainApp.js","serviceWorker.js","index.js"],"names":["inlogedUserFullName$","BehaviorSubject","headName$","logedIn$","returningUserData$","incommingSQLDataArr$","localStorageObj$","updateInlogedUserFullName","getUserFullName","JSON","parse","window","localStorage","getItem","loginName","next","console","log","updateLogedIn","logedIn","updateSavedSQLData","incommingSQLDataArr","updateLocalstorage","run","saveIntoLocalStorage","setItem","stringify","getCleanLocalStorrageObj","userId","loginStatus","Spinner","props","wait","class","savedSQLDataArr","backendURL","axiosPost","postType","bodyData","type","sendToSqlBackend","axios","post","then","response","returningUserData","data","updateReturningUserData","catch","error","runLogInOut","e","userInformation","targetBtn","target","targetBtnId","id","userName","formInputObj","userNameStr","userPassWord","userPwdStr","to","SQLTable","useState","incommingNewSQLData","updateIncommingNewSQLData","useEffect","setTimeout","getStr","get","incommingSQLRes","status","push","subscribe","SQLDataArr","className","length","map","sqlDataObj","rowCounter","key","date","activity","state","concerned","place","content","SearchBar","runFilter","placeholder","onClick","LogedOut","appName","setAppName","updateUserNameStr","updateUserPwdStr","headName","Helmet","charSet","onChange","targetUserName","value","targetUserPwd","LogedIn","inlogedUser","updateInlogedUser","inlogedUserFullName","FormAdd","incommingSQLData","updateAddedData","incommingSQLDataCols","dateStr","updateDateStr","activityStr","updateActivityStr","stateStr","updateStateStr","concernedStr","updateConcernedStr","typeStr","updateTypeStr","placeStr","updatePlaceStr","contentStr","updateContentStr","setStrsType","inputStr","dataset","sqlBody","data-type","MainApp","setIsLogedIn","setInlogedFullUserName","redirect","updateHeadName","location","href","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86bf3b6d.chunk.js","sourcesContent":["import {BehaviorSubject} from \"rxjs\";\r\nlet inlogedUserFullName = '';\r\nlet headName = '';\r\nlet logedIn = false;\r\nlet returningUserData = '';\r\nlet incommingSQLDataArr = [];\r\nlet firstTime = true;\r\n\r\n//===============================================\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const logedIn$ = new BehaviorSubject(logedIn);\r\nexport const returningUserData$ = new BehaviorSubject(returningUserData);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\n\r\nexport const localStorageObj$ = new BehaviorSubject('');\r\n\r\n/* The functions are triggered in another place and send in its data\r\nThe incomming data is stored in a new object and the object is then, in the last function, save too localstorage \r\n*/\r\nexport function updateInlogedUserFullName(){\r\n    let getUserFullName = JSON.parse(window.localStorage.getItem(\"userData\")).loginName;\r\n    inlogedUserFullName$.next(getUserFullName);\r\n\r\n    console.log(getUserFullName);\r\n    return getUserFullName;\r\n}\r\nexport function updateLogedIn(logedIn){\r\n    console.log(logedIn);\r\n    \r\n    if(logedIn) logedIn$.next(logedIn);\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    if(incommingSQLDataArr) {\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\nexport function updateReturningUserData(returningUserData){\r\n    console.log(returningUserData);\r\n    \r\n    if(returningUserData) {\r\n        returningUserData$.next(returningUserData);\r\n    }\r\n    updateLocalstorage(true, returningUserData);\r\n}\r\nexport let updateLocalstorage = (run, saveIntoLocalStorage) =>{\r\n    if (run === true) {\r\n        localStorage.setItem('userData', JSON.stringify(saveIntoLocalStorage));\r\n        let getCleanLocalStorrageObj = JSON.parse(window.localStorage.getItem(\"userData\"));\r\n        localStorageObj$.next(getCleanLocalStorrageObj);\r\n    }\r\n    if (run === false) {\r\n        let userEmtyData = {\r\n            userId: '',\r\n            loginStatus: null,\r\n            loginName: ''\r\n        }\r\n        updateLocalstorage(true, userEmtyData);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/Spinner.scss';\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n           { props.wait } <div class=\"spinner spinner-dark moveUp\"></div>\r\n        </>\r\n    );\r\n\r\n}\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { updateSavedSQLData, updateReturningUserData } from '../GlobalProps.js';\r\nimport { setTimeout } from 'timers';\r\n\r\nlet savedSQLDataArr = [];\r\nlet SQLFilterMonthsBtnsArr = [];\r\nlet SQLFilterConcernedBtnsArr = [];\r\nlet backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Deployat by Heroku \r\n//let backendURL = 'http://localhost:3001'; // Just test the backend \r\n\r\nexport let axiosGet = (getStr) => {\r\n    console.log(backendURL + getStr);\r\n    \r\n    axios.get(backendURL + getStr).then(response => {\r\n        // Store the incommingg API data in a variables\r\n        let incommingSQLRes = response.data[0];\r\n\r\n        console.log(response);\r\n        /*  If incomming status of 200 = OK:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n            */\r\n        if (response.status === 200) {\r\n            //savedSQLDataArr.push(incommingSQLRes);         \r\n            updateSavedSQLData(incommingSQLRes);\r\n        }\r\n        /*  If incomming status of 201 = Created:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        */\r\n        if (response.status === 201) {\r\n            \r\n            savedSQLDataArr[0].push(incommingSQLRes[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n        else{\r\n        }\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n}\r\nexport let axiosPost = (postType, bodyData) => {  \r\n    console.log(bodyData);\r\n    \r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    //console.log(sendToSqlBackend);\r\n    if (postType === 'userValidate') type = 'UserValidate';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).\r\n    then(response => {\r\n        if (postType === 'userValidate'){\r\n            let returningUserData = response.data;      \r\n            console.log(returningUserData);\r\n                \r\n            updateReturningUserData(returningUserData);\r\n        }\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { headName$, updateLocalstorage, inlogedUserFullName$, updateLogedInGlobal, logedInGlobal$, returningUserData$, localStorageObj$ } from '../GlobalProps.js';\r\nimport  MainApp from '../../MainApp.js';\r\nimport { formInputObj } from '../../LogedOut.js';\r\n\r\nimport { axiosPost } from './Axios.js';\r\nimport { localStorageObj } from './LocalStorageObj.js';\r\nimport '../CSS/LogInOut.css';\r\n\r\nimport { isArray } from 'util';\r\n\r\nexport let updatedUserNameStr = ''\r\nexport let updatedUserPwdStr = '';\r\n\r\n\r\nexport let runLogInOut = (e) => {\r\n    let userInformation = {};\r\n    let targetBtn = e.target; \r\n    // Gets the element\r\n    let targetBtnId = targetBtn.id; \r\n    let targetBtnValue = targetBtn;\r\n    console.log(targetBtn);\r\n    \r\n    if(targetBtnId === 'logIn') {\r\n        \r\n        // Validate that the user is found as a valid user\r\n        userInformation = {userName: formInputObj.userNameStr, userPassWord: formInputObj.userPwdStr}\r\n        console.log(userInformation);\r\n        \r\n        axiosPost('userValidate', userInformation);\r\n    }\r\n    if(targetBtnId === 'logOout') {\r\n        updateLocalstorage(false, {});\r\n \r\n        return <Redirect to=\"/\"/>;\r\n    }\r\n    if(targetBtnId === 'add') {\r\n        //updateLocalstorage(false, {});\r\n\r\n    }\r\n    if(targetBtnId === 'cancelAdd') {\r\n        //updateLocalstorage(false, {});    \r\n\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\nimport { LogInOut } from '../Data/LogInOut.js';\r\nimport { axiosGet } from '../Data/Axios.js';\r\n\r\nimport '../CSS/SQLTable.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\n\r\nlet auth = {\r\n    userName: '',\r\n    password: ''\r\n}\r\nexport let SQLTable = () => {\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ addForm, setAddForm ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Run default SQL list\r\n        setTimeout(() => {\r\n            axiosGet('/SQLData');    \r\n        }, 3000);\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            //console.log(SQLDataArr);\r\n            updateIncommingNewSQLData(SQLDataArr);\r\n        });\r\n     },[]); \r\n    let runAdmin = (e) => {\r\n        let targetBtn = e.target.dataset.admin;\r\n        if (targetBtn === 'logIn') setAddForm(true);\r\n        if (targetBtn === 'logOut') setAddForm(false);\r\n    }\r\n    return (\r\n        <section id=\"container__tableSchedule\">\r\n            <table id=\"tableSchedule__body\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Datum</th>\r\n                        <th className=\"tableCol4\">Akitvitet</th>\r\n                        <th>Status</th>\r\n                        <th>Berörda</th>\r\n                        <th>Typ</th>\r\n                        <th>Plats</th>\r\n                        <th className=\"tableCol9\">Innehåll</th>\r\n                   </tr>\r\n                </thead>\r\n                <tbody id=\"tableSchedule__tBody\">\r\n                    {(incommingNewSQLData.length !== 0) \r\n                        ?\r\n                        incommingNewSQLData.map((sqlDataObj, rowCounter) => {\r\n                            \r\n                            return(\r\n                                <tr key={ rowCounter }>\r\n                                    <td>{ sqlDataObj.date }</td>\r\n                                    <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                    <td>{ sqlDataObj.state }</td>\r\n                                    <td>{ sqlDataObj.concerned }</td>\r\n                                    <td>{ sqlDataObj.type }</td>\r\n                                    <td>{ sqlDataObj.place }</td>\r\n                                    <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    :   <tr><td><Spinner wait={ 'Datan laddas' }/></td></tr>\r\n                    }\r\n                    <tr>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    );\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\nimport '../CSS/SearchBar.css';\r\n\r\nlet activeMonthsStrArr = [];\r\nlet activeConcernedStrArr = [];\r\n\r\nlet checkedMonthsArr = [];\r\nlet checkedConcernedArr = [];\r\n\r\nlet concernedArr = [];\r\nlet monthsArr = [];\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <section className=\"searchBar__searchContainer\">\r\n            <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <div id=\"searchContainer__inputBox\">\r\n                <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                    <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n                </button>\r\n\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { headName$, updateLogedIn, inlogedUserFullName$, updateLogedInGlobal } from './Components/GlobalProps.js';\r\nimport './Components/CSS/Headbar.css';\r\nimport { log } from 'util';\r\nimport { SQLTable } from './Components/Structure/SQLTable.js';\r\nimport { SearchBar } from './Components/Structure/SearchBar.js';\r\n\r\nimport { runLogInOut } from './Components/Data/LogInOut.js';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let LogedOut = () => {\r\n    let [ appName, setAppName ] = useState('');\r\n\r\n    const [ userNameStr, updateUserNameStr ] = useState('');\r\n    const [ userPwdStr, updateUserPwdStr ] = useState('');\r\n    \r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n    }, []);\r\n    updateLogedIn(false);\r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        console.log(targetUserName);\r\n    \r\n        updateUserNameStr(targetUserName);\r\n        formInputObj['userNameStr'] = targetUserName;\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        console.log(targetUserPwd);\r\n        updateUserPwdStr(targetUserPwd);\r\n        formInputObj['userPwdStr'] = targetUserPwd;\r\n    }\r\nconsole.log(formInputObj);\r\n\r\n    return (\r\n        <>   \r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n            <header id=\"headbar__Container\">\r\n                <p id=\"headbarbtnHeadline\">{ appName }</p>\r\n                <section id=\"headbar__logInOut\">\r\n                    <p id=\"logInOut__username\">Användarnamn</p><input type=\"text\" id=\"username__input\" onChange={ onChangeUserName } value={ userNameStr } placeholder=\"...\"/>\r\n                    <p id=\"logInOut__password\">Lösenord</p><input type=\"text\" id=\"password__input\" onChange={ onChangeUserPwd } value={ userPwdStr } placeholder=\"...\"/> \r\n                    <section id=\"logInOut__btnOutContainer\">\r\n                        <input type=\"submit\" className=\"btnContainer_submitBtn\" onClick={ runLogInOut } id=\"logIn\" value=\"\"/>\r\n                        <Link to=\"/LogIn\" className=\"btnContainerbtnHeadline\" onClick={ runLogInOut } id=\"logIn\">\r\n                            <p className=\"btnHeadline\" id='logIn'>Logga In</p>\r\n                        </Link>\r\n                    </section>\r\n                </section>\r\n            </header>\r\n            <SearchBar/>\r\n            <SQLTable/>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport './Components/CSS/Spinner.scss';\r\n\r\n//import { LogInOut } from './LogInOut.js';\r\nimport './Components/CSS/Headbar.css';\r\n\r\nimport { runLogInOut } from './Components/Data/LogInOut.js';\r\nimport axios from 'axios';\r\nimport { headName$, updateLogedIn, updateInlogedUserFullName, updateLocalstorage, inlogedUserFullName$ } from './Components/GlobalProps.js';\r\n\r\n\r\nimport { log } from 'util';\r\nimport { SQLTable } from './Components/Structure/SQLTable.js';\r\nimport { SearchBar } from './Components/Structure/SearchBar.js';\r\n\r\nexport let LogedIn = () => {\r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ appName, setAppName ] = useState('');   \r\n\r\n    let [ savedLocalStorageObj, updateSavedLocalStorageObj] = useState({});\r\n\r\n    useEffect(() => {\r\n        updateLogedIn(true);\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {\r\n            console.log(inlogedUserFullName);\r\n            updateInlogedUser(inlogedUserFullName);\r\n        }); \r\n        setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        }, 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <Helmet>\r\n            <meta charSet=\"utf-8\" />\r\n            <title>{`${appName} - Inloggad`}</title>\r\n        </Helmet>\r\n        <header id=\"headbar__Container\">\r\n            <p id=\"headbarbtnHeadline\">{ appName }</p>\r\n\r\n            <section id=\"headbar__logInOutBtn\">\r\n                <p id=\"logInOut__logInUser\">{`Välkommen in ${(inlogedUser === '') ? '...' : inlogedUser }` }</p>       \r\n\r\n                <section id=\"logInOut__btnInContainer\">\r\n\r\n                    <div  id=\"btnContainer__btnLogOut\">\r\n                        <input type=\"submit\" className=\"btnLogOut__input\" onClick={ runLogInOut} id=\"logOout\" value=\"\" />\r\n                        <Link to=\"/\" className=\"btnContainer__inputHeadline\" onClick={ runLogInOut } id=\"logIn\">\r\n                            <p className=\"btnHeadline\" id=\"logOout\">Logga Ut</p>\r\n                        </Link>   \r\n                    </div>\r\n\r\n                    <div id=\"btnContainer__btnAdd\">\r\n                        <input type=\"submit\" className=\"btnLogOut__input\" onClick={ runLogInOut } id=\"add\" value=\"\"/>\r\n                        <Link to=\"/Add\" className=\"btnContainer__inputHeadline\" onClick={ runLogInOut } id=\"add\">\r\n                            <p className=\"btnHeadline\" id='add'>Lägg Till</p>\r\n                        </Link>\r\n                    </div>\r\n                </section>\r\n            </section>\r\n        </header>\r\n            <SearchBar/>\r\n            <SQLTable/>\r\n        </>\r\n    );\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\n\r\nimport { headName$, updateLogedIn, updateInlogedUserFullName, updateLocalstorage, inlogedUserFullName$ } from '../GlobalProps.js';\r\nimport '../CSS/Headbar.css';\r\nimport '../CSS/FormAdd.css';\r\nimport { runLogInOut } from '../Data/LogInOut.js';\r\n\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\n\r\nexport let FormAdd = (props) => {\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ incommingSQLData, updateIncommingSQLData ] = useState([]);\r\n\r\n    let [ addedData, updateAddedData ] = useState(false);\r\n    let [ quantityOfSqlPosts, updateQuantityOfSqlPosts ] = useState(0);\r\n    let [ incommingSQLDataCols, updateIncommingSQLDataCols ] = useState([]);\r\n\r\n    let [ dateStr, updateDateStr ] = useState('');\r\n    let [ activityStr, updateActivityStr ] = useState('');\r\n    let [ stateStr, updateStateStr ] = useState('');\r\n    let [ concernedStr, updateConcernedStr ] = useState('');\r\n    let [ typeStr, updateTypeStr ] = useState('');\r\n    let [ placeStr, updatePlaceStr ] = useState('');\r\n    let [ contentStr, updateContentStr ] = useState('');\r\n\r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {\r\n            console.log(inlogedUserFullName);\r\n            updateInlogedUser(inlogedUserFullName);\r\n        });\r\n        \r\n        setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        }, 1000);\r\n    }, []);\r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n\r\n        if (dataset.type === 'date') updateDateStr(inputStr);\r\n        if (dataset.type === 'activity') updateActivityStr(inputStr);\r\n        if (dataset.type === 'state') updateStateStr(inputStr);\r\n        if (dataset.type === 'concerned') updateConcernedStr(inputStr);\r\n        if (dataset.type === 'type') updateTypeStr(inputStr);\r\n        if (dataset.type === 'place') updatePlaceStr(inputStr);\r\n        if (dataset.type === 'content') updateContentStr(inputStr);\r\n    }\r\n\r\nconsole.log(incommingSQLDataCols);\r\n\r\n    let sendInUserData = (e) => {\r\n        updateAddedData(true);\r\n        console.log(dateStr);\r\n        // Created a body for the added data\r\n        let sqlBody = [0, dateStr, activityStr, stateStr, concernedStr, typeStr, placeStr, contentStr];\r\n        \r\n        console.log(sqlBody);\r\n        \r\n        axiosPost('add', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n            \r\n        /* console.log(sqlBodyObj);\r\n        updateSavedSQLData(sqlBodyObj); */\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Lägg Till`}</title>\r\n            </Helmet>\r\n            <header id=\"headbar__Container\">\r\n                <p id=\"headbarbtnHeadline\">{ appName }</p>\r\n\r\n                <section id=\"headbar__logInOutBtn\">\r\n                    <p id=\"logInOut__logInUser\">{`Välkommen in ${ inlogedUser }` }</p>       \r\n\r\n                    <section id=\"logInOut__btnInContainer\">\r\n\r\n                        <div  id=\"btnContainer__btnLogOut\">\r\n                            <input type=\"submit\" className=\"btnLogOut__input\" onClick={ runLogInOut} id=\"logOout\" value=\"\" />\r\n                            <Link to=\"/\" className=\"btnContainer__inputHeadline\" onClick={ runLogInOut } id=\"logIn\">\r\n                                <p className=\"btnHeadline\" id=\"logOout\">Logga Ut</p>\r\n                            </Link>   \r\n                        </div>\r\n\r\n                        <div id=\"btnContainer__btnAdd\">\r\n                            <input type=\"submit\" className=\"btnLogOut__input\" onClick={ runLogInOut } id=\"cancelAdd\" value=\"\"/>\r\n                            <Link to={\"/LogIn\" }className=\"btnContainer__inputHeadline\" onClick={ runLogInOut } id=\"cancelAdd\">\r\n                                <p className=\"btnHeadline\" id='cancelAdd'>Avbryt</p>\r\n                            </Link>\r\n                        </div>\r\n                    </section>\r\n\r\n                </section>\r\n            </header>\r\n            \r\n            <button className=\"btnAddedSendContainer__sendBtn\" onClick={ sendInUserData } id=\"sendIn\">\r\n                <p className=\"btnHeadline__sendIn\" id='sendIn'>Skicka In</p>\r\n            </button> \r\n            <section id=\"formAdd__addContainer\">\r\n                <table id=\"addContainer__body\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Datum</th>\r\n                            <th className=\"tableCol4\">Akitvitet</th>\r\n                            <th>Status</th>\r\n                            <th>Berörda</th>\r\n                            <th>Typ</th>\r\n                            <th>Plats</th>\r\n                            <th className=\"tableCol9\">Innehåll</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody id=\"addContainer__Tbody\">\r\n                        <tr>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"date\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol4\"><input type=\"text\" className=\"addSqlInput\" data-type=\"activity\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"state\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"concerned\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"type\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"place\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol9\"><input type=\"text\" className=\"addSqlInput\" data-type=\"content\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                        </tr>\r\n                        <tr>\r\n                        {(incommingSQLData.length !== 0) \r\n                        ?\r\n                        incommingSQLData.map((sqlDataObj, rowCounter) => {\r\n                            \r\n                            return(\r\n                                <tr key={ rowCounter }>\r\n                                    <td>{ sqlDataObj.date }</td>\r\n                                    <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                    <td>{ sqlDataObj.state }</td>\r\n                                    <td>{ sqlDataObj.concerned }</td>\r\n                                    <td>{ sqlDataObj.type }</td>\r\n                                    <td>{ sqlDataObj.place }</td>\r\n                                    <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    :   <tr><td><Spinner wait={ 'Datan laddas' }/></td></tr>\r\n                    }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {logedIn$, updateHeadName, returningUserData$ } from './Components/GlobalProps.js';\r\n\r\nimport { LogedOut } from './LogedOut.js';\r\nimport { LogedIn } from './LogedIn.js';\r\nimport { FormAdd } from './Components/Structure/FormAdd.js';\r\nlet MainApp = () => {\r\n  let [ appName, setAppName ] = useState('Årsklockan');\r\n  let [ isLogedIn, setIsLogedIn ] = useState(false);\r\n  let [ inlogedFullUserName, setInlogedFullUserName ] = useState('');\r\n  let [ redirect ] = useState(true);\r\n\r\n  useEffect(() => {\r\n    returningUserData$.subscribe((returningUserData) => {\r\n      console.log(returningUserData);\r\n      setInlogedFullUserName(returningUserData);\r\n    });\r\n    logedIn$.subscribe((logedIn) => {\r\n      console.log(logedIn);\r\n      setIsLogedIn(logedIn);\r\n    });\r\n    updateHeadName(appName);\r\n    if (redirect === true) return <Redirect to=\"/\"/>;\r\n  }, []);\r\n  \r\n  console.log(window.location.href);\r\n  \r\n  return (\r\n    <>\r\n      <Router>\r\n        <Route exact path=\"/\" component={ LogedOut } />\r\n        <Route exact path=\"/LogIn\" component={ LogedIn }/>\r\n        <Route path=\"/Add\" component={ FormAdd }/>\r\n      </Router>\r\n\r\n    </>\r\n  );\r\n} \r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Components/CSS/Headbar.css';\r\n\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}