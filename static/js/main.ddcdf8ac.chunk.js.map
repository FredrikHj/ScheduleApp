{"version":3,"sources":["Components/Data/RouteNames.js","Components/CommonFunctions.js","Components/Data/LocalStorage.js","Components/Storage.js","Components/Data/Spinner.js","Components/Data/Axios.js","Components/Data/runAppUrls.js","Components/Structure/FormAdd.js","Components/Style/MainStyle.js","Components/Structure/SearchBar.js","Components/Structure/HeadContents.js","Components/Style/LogedInStyle.js","Components/Style/AuthStyle.js","Components/Data/Authorization.js","Components/Structure/Headbar.js","Components/Style/LoginFormStyle.js","Components/Data/LoginForm.js","Components/Data/LogInOut.js","Components/Structure/RegUser.js","MainPage.js","LogedIn.js","MainApp.js","serviceWorker.js","index.js"],"names":["routeName","userReg","auth","login","jwt","require","getLocalStorageData","getData","console","log","window","localStorage","length","JSON","parse","getItem","token","inlogedUserFullName$","BehaviorSubject","headName$","userData$","incommingSQLDataArr$","gotoPage$","updateLocalstorage","saveLoginData","setItem","stringify","updateInlogedUserFullName","next","inlogData","tokenData","verify","error","loginName","getTokenData","updateSavedSQLData","incommingSQLDataArr","updateGotoPage","gotoPage","Spinner","props","str","className","savedSQLDataArr","backendURL","axiosGet","getType","tokenStr","routes","axios","get","headers","Authorization","then","response","incommingSQLRes","status","data","push","catch","axiosPost","postType","bodyData","type","sendToSqlBackend","post","logedInUserInfoObj","responsType","logInMess","statusText","loginData","localPubAppUrls","appUrlHostname","location","pathname","split","FormAdd","useState","appUrl","setAppUrl","appName","setAppName","inlogedUser","updateInlogedUser","incommingSQLData","updateIncommingSQLData","updateAddedData","dateStr","updateDateStr","activityStr","updateActivityStr","stateStr","updateStateStr","concernedStr","updateConcernedStr","typeStr","updateTypeStr","placeStr","updatePlaceStr","contentStr","updateContentStr","useEffect","subscribe","headName","inlogedUserFullName","setTimeout","setStrsType","e","target","inputStr","value","dataset","sendInUserData","Helmet","charSet","onClick","id","to","data-type","onChange","placeholder","map","sqlDataObj","rowCounter","key","date","activity","state","concerned","place","content","wait","GenerallyStyle","body__contents","styled","section","askMarkMove","HeadbarStyle","header","headContainer","headline","SearchBar","HeadContents","incommingNewSQLData","updateIncommingNewSQLData","updateErroLoadingSQLData","updateRoutes","countGetMethod","correctRoutes","getSQLData","SQLDataArr","axiosUntilGettingData","Promise","success","result","LogedInStyle","statusContainer","btnLogoutContainer","logedInUser","btnSubmitContainer","button","btnHeadline","p","AuthStyle","logInSpinnerMove","Auth","appStatus","Headbar","setInlogMess","setInlogStatus","gotoIntoPage","updateGotoIntoPage","userDispalyingObj","LoginFormStyle","usernameContainer","passwordContainer","labelFormatUsernamePassword","inputFormatUsernamePassword","input","btnLoginContainer","userInfoContainer","userErrorMess","regLink","LoginForm","onChangeUserName","onChangeUserPwd","userNameStr","userPwdStr","runAuth","runReg","inlogStatus","inlogMess","RegUser","setUserFullName","setUserName","setUserPWD","sendUserReg","MainPage","updateUserNameStr","updateUserPwdStr","redirectToPage","returningUserDispalyingObj","targetUserName","targetUserPwd","targetBtnId","userName","userPassWord","exact","path","component","LogedIn","runLogOut","clear","runLogInOut","updateHeadName","MainApp","updateRedirectToPage","basename","add","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddcdf8ac.chunk.js","sourcesContent":["export const routeName = {\r\n    userReg: 'UserReg',\r\n    auth: 'Auth',\r\n    login: 'Login',\r\n  };","let jwt = require('jsonwebtoken');\r\n\r\nexport let getTokenData = (token, inlogData) => {\r\n    let tokenData = jwt.verify( token, 'inlogSecretKey', (error, token) => token);\r\n    if (inlogData === 'fullName') return tokenData.loginName;\r\n}\r\n","export let LocalStorageObj =  {\r\n    logedInState: false,\r\n    fullName: ''\r\n};\r\n\r\nexport function getLocalStorageData(getData){\r\n    console.log(\"getLocalStorageData -> window.localStorage.length\", window.localStorage.length)\r\n    // Run if a data i saved into the localstorage else no run\r\n    if (window.localStorage.length !== 0 && getData === 'token') getData = JSON.parse(window.localStorage.getItem(\"loginData\")).token;\r\n    console.log(\"getLocalStorageData -> getData\", getData)\r\n    \r\n    return getData;\r\n}","import {BehaviorSubject} from \"rxjs\";\r\n\r\nimport {getTokenData} from './CommonFunctions';\r\nimport {getLocalStorageData} from './Data/LocalStorage';\r\nlet headName = '';\r\nlet inlogedUserFullName = '';\r\nlet userData = '';\r\nlet incommingSQLDataArr = [];\r\nlet gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const userData$ = new BehaviorSubject(userData);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\n\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\n\r\nexport const LocalStorage$ = new BehaviorSubject('');\r\n\r\n/* The functions are triggered in another place and send in its data\r\nThe incomming data is stored in a new object and the object is then, in the last function, save too localstorage \r\n*/\r\nexport function updateUserData(loginData){\r\n    updateLocalstorage(loginData);\r\n    if(loginData) {\r\n        userData$.next(loginData);\r\n    }\r\n}\r\nexport let updateLocalstorage = (saveLoginData) =>{\r\n    localStorage.setItem('loginData', JSON.stringify(saveLoginData));\r\n}\r\n\r\n\r\n\r\n\r\nexport function getLogStatus(){\r\n    // Run if a data i saved into the localstorage else no run\r\n    if (window.localStorage.length !== 0) {\r\n        \r\n        let getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n        let getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n        \r\n        let logInStatus = {\r\n            type: getStatusType,\r\n            mess: getLogInMess\r\n        };\r\n        //;\r\n        \r\n        return logInStatus;\r\n    }\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    if (updateInlogedUserFullName) inlogedUserFullName$.next(getTokenData(getLocalStorageData('token'), 'fullName'));\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    \r\n    if(incommingSQLDataArr) {\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\nexport function updateGotoPage(gotoPage){\r\nconsole.log(\"updateGotoPage -> gotoPage\", gotoPage)\r\n    \r\n    if(gotoPage) {\r\n        gotoPage$.next(gotoPage);\r\n    }\r\n    return gotoPage;\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../Style/Spinner.scss';\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n            { props.str } <span className=\"spinner spinner-dark\"></span>\r\n        </>\r\n    );\r\n}\r\nexport default Spinner;\r\n","import axios from 'axios';\r\nimport { updateSavedSQLData, updateUserData, updateGotoPage } from '../Storage.js';\r\nimport { setTimeout } from 'timers';\r\nimport { log } from 'util';\r\n\r\nlet savedSQLDataArr = [];\r\n\r\nlet backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Deployad by Heroku \r\n//let backendURL = 'http://192.168.0.210:3001'; // VM Backend\r\n//let backendURL = 'http://localhost:3001'; // Local Backend \r\n\r\nexport let axiosGet = (getType, tokenStr) => {\r\n    console.log(\"axiosGet -> getType\", getType)\r\n        let routes = '';\r\n\r\n    // Type of post method\r\n    if (getType === 'default') routes = '/SQLData';\r\n    if (getType === 'userSpec') routes = `/SQLData/${ 'fredde' }`;\r\n    \r\n    \r\n    // Get the user inloged User and send into the backend for getting the correct user records \r\n     \r\n    axios.get(backendURL + routes, {headers: {Authorization: `bearer ${tokenStr}`}}).then(response => {\r\n    console.log(\"axiosGet -> response\", response)\r\n        let incommingSQLRes = []\r\n        /* Store the incomming API data in a variables - \r\n        Note that the data structure deppending on the conditions\r\n        */\r\n        if (response.status === 200 && getType === 'default') incommingSQLRes = response.data[0];\r\n        if (response.status === 200 && getType === 'userSpec') incommingSQLRes = response.data[0];\r\n         //;\r\n        /*  If incomming status of 200 = OK\r\n            Data i push into a arry too  Storage\r\n            The array is holding the data until the webbbrowser is closed \r\n          \r\n        Default get\r\n        */\r\n          updateSavedSQLData(incommingSQLRes);\r\n        \r\n        /*  If incomming status of 201 = Created:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        */\r\n        if (response.status === 201) {\r\n            \r\n            savedSQLDataArr[0].push(incommingSQLRes[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n        else{\r\n        }\r\n    }).\r\n    catch(error => {\r\n        ////;\r\n    });\r\n}\r\nlet getUserId = () => {\r\n    let getUserId = JSON.parse(window.localStorage.getItem(\"userData\")).userId;\r\n    return getUserId;\r\n}\r\nexport let axiosPost = (postType, bodyData) => {  \r\n    console.log(\"axiosPost -> postType\", postType)\r\n    //;\r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    ////;\r\n    // Type of post method\r\n    if (postType === 'Auth') type = 'Auth';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    if (postType === 'userReg') type = 'UserReg';\r\n    \r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).then(response => {\r\n            console.log(\"axiosPost -> response\", response)\r\n            if (postType === 'Auth'){\r\n                // Incomming userdata. T\r\n                \r\n                let logedInUserInfoObj = {\r\n                    responsType: response.status,\r\n                    logInMess: response.statusText, \r\n                    token: response.data,\r\n                    //getTokenData(response.data),\r\n                };\r\n                //;\r\n                \r\n                //Send the incomming data for displaying the user login status\r\n                updateUserData(logedInUserInfoObj);\r\n\r\n                if (response.status === 200) updateGotoPage(postType);\r\n            }\r\n        }).catch(error => {\r\n            ////;\r\n        });\r\n}","export let localPubAppUrls = () => {\r\n  let correctDomain = '';\r\n  let appUrlHostname = window.location.pathname.split('/')[0];\r\n  \r\n  // Check if in local or pub mode \r\n/*   if (appUrlHostname === 'localhost') correctDomain = '/';\r\n  if (appUrlHostname === 'fredrikhj.github.io') correctDomain = '/ScheduleApp';\r\n */ \r\n  console.log(\"localPubAppUrls -> appUrlHostname\", appUrlHostname)\r\n \r\n  return appUrlHostname;\r\n}\r\nexport let correctRoutes = () => {\r\n  let correctRouteName = '';\r\n  //let appUrlHostname = window.location.hostname;\r\n  let routeName = window.location.pathname;\r\n  console.log(\"runAppUrls -> appUrl\", routeName)\r\n\r\n\r\n  \r\n  ////console.log(appUrl.pathname.split('/')[1]);\r\n  \r\n  // Check if ther is any components that can be reuse\r\n  //if(appUrl.pathname.split('/')[1] === 'LogIn') localPubUrl = appUrl.pathname.split('/')[1];\r\n  \r\n  // Check if in dev or pub mode´; \r\n/*   if (appUrlHostname === 'localhost') correctRouteName = routeName;\r\n  if (appUrlHostname === 'fredrikhj.github.io') correctRouteName = `/ScheduleApp${routeName}`;\r\n */ \r\n  return routeName;\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\n\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$, incommingSQLDataArr$ } from '../Storage.js';\r\nimport '../Style/FormAdd.css';\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\n\r\nexport let FormAdd = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ incommingSQLDataResponse, updateIncommingSQLDataResponse ] = useState('');\r\n    let [ incommingSQLData, updateIncommingSQLData ] = useState([]);\r\n\r\n    let [ addedData, updateAddedData ] = useState(false);\r\n    let [ quantityOfSqlPosts, updateQuantityOfSqlPosts ] = useState(0);\r\n    let [ incommingSQLDataCols, updateIncommingSQLDataCols ] = useState([]);\r\n\r\n    let [ dateStr, updateDateStr ] = useState('');\r\n    let [ activityStr, updateActivityStr ] = useState('');\r\n    let [ stateStr, updateStateStr ] = useState('');\r\n    let [ concernedStr, updateConcernedStr ] = useState('');\r\n    let [ typeStr, updateTypeStr ] = useState('');\r\n    let [ placeStr, updatePlaceStr ] = useState('');\r\n    let [ contentStr, updateContentStr ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        axiosGet('userSpec');\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {\r\n            //console.log(inlogedUserFullName);\r\n            updateInlogedUser(inlogedUserFullName);\r\n        });\r\n        incommingSQLDataArr$.subscribe((incommingSQLDataArr) => {\r\n            //console.log(incommingSQLDataArr);\r\n            if (incommingSQLDataArr.status === 200) updateIncommingSQLData(incommingSQLDataArr.data[0])\r\n        });\r\n        /*\r\n            Update the inloged User after the specific time i millisec...\r\n            Use the name afte a extra millisec...\r\n        */\r\n        setTimeout(() => {\r\n            updateInlogedUserFullName(); \r\n        }, 1000);\r\n    }, []);\r\n    //console.log(incommingSQLData);  \r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n\r\n        if (dataset.type === 'date') updateDateStr(inputStr);\r\n        if (dataset.type === 'activity') updateActivityStr(inputStr);\r\n        if (dataset.type === 'state') updateStateStr(inputStr);\r\n        if (dataset.type === 'concerned') updateConcernedStr(inputStr);\r\n        if (dataset.type === 'type') updateTypeStr(inputStr);\r\n        if (dataset.type === 'place') updatePlaceStr(inputStr);\r\n        if (dataset.type === 'content') updateContentStr(inputStr);\r\n    }\r\n\r\n//console.log(incommingSQLDataCols);\r\n\r\n    let sendInUserData = (e) => {\r\n        updateAddedData(true);\r\n        //console.log(dateStr);\r\n        // Created a body for the added data\r\n        let sqlBody = [0, dateStr, activityStr, stateStr, concernedStr, typeStr, placeStr, contentStr];\r\n        \r\n        //console.log(sqlBody);\r\n        \r\n        axiosPost('add', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n            \r\n        /* //console.log(sqlBodyObj);\r\n        updateSavedSQLData(sqlBodyObj); */\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Lägg Till`}</title>\r\n            </Helmet>\r\n            <header>\r\n                <section className=\"headbar__headContainer\">\r\n                    <p className=\"headContainer__headline\">{ appName }</p>\r\n                    <section className=\"headContainer__logInOut\">\r\n\r\n                        <p className=\"logInOut__logedInUser\">{`Välkommen in ${(inlogedUser === '') ? '...' : inlogedUser }` }</p>       \r\n\r\n                        <section className=\"logInOut__btnInContainer\">\r\n                            <div className=\"btnContainer__btnAddCanceled\">\r\n                                <input type=\"submit\" className=\"btnLogOut__input\" onClick={ '' } id=\"cancelAdd\" value=\"\"/>\r\n                                <Link to={`${ appUrl }/LogIn` }className=\"btnContainer__inputHeadline\" onClick={ '' } id=\"cancelAdd\">\r\n                                    <p className=\"btnHeadline__canceled\" id='cancelAdd'>Avbryt</p>\r\n                                </Link>\r\n                            </div>\r\n                        </section>\r\n                    </section>\r\n                </section>\r\n            </header>\r\n            <button className=\"btnAddedSendContainer__sendBtn\" onClick={ sendInUserData } id=\"sendIn\">\r\n                <p className=\"btnHeadline__sendIn\" id='sendIn' onClick={ sendInUserData }>Skicka In</p>\r\n            </button>  \r\n            <section className=\"formAdd__addContainer\">\r\n                <table className=\"addContainer__body\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Datum</th>\r\n                            <th className=\"tableCol4\">Akitvitet</th>\r\n                            <th>Status</th>\r\n                            <th>Berörda</th>\r\n                            <th>Typ</th>\r\n                            <th>Plats</th>\r\n                            <th className=\"tableCol9\">Innehåll</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody className=\"addContainer__Tbody\">\r\n                        <tr>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"date\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol4\"><input type=\"text\" className=\"addSqlInput\" data-type=\"activity\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"state\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"concerned\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"type\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"place\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol9\"><input type=\"text\" className=\"addSqlInput\" data-type=\"content\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                        </tr>\r\n                        <tr>\r\n                         {(incommingSQLData.length !== 0) \r\n                            ?\r\n                                incommingSQLData.map((sqlDataObj, rowCounter) => {\r\n                                    \r\n                                    return(\r\n                                        <tr key={ rowCounter }>\r\n                                            <td>{ sqlDataObj.date }</td>\r\n                                            <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                            <td>{ sqlDataObj.state }</td>\r\n                                            <td>{ sqlDataObj.concerned }</td>\r\n                                            <td>{ sqlDataObj.type }</td>\r\n                                            <td>{ sqlDataObj.place }</td>\r\n                                            <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            :   <tr><td><Spinner wait={ 'Datan laddas' }/></td></tr>\r\n                        }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        </>  \r\n    );\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== GenerallyStyle ==============================\r\nconst commonColorBlue =  'rgb(68, 68, 223)';\r\nexport let GenerallyStyle = {\r\n  body__contents: styled.section`\r\n    width: 1024px;\r\n    margin-left: calc(50% - 512px);\r\n  `,\r\n  askMarkMove: styled.section`\r\n    float: right;\r\n    margin-top: -7px;\r\n  `,\r\n}\r\n// ============================== Headbar ==============================\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: -39px 0px 0px -5px;\r\n    `,\r\n  headContainer: styled.section`\r\n    width: 1400px;\r\n    height: 103px;\r\n    margin-left: calc(50% - 700px);\r\n    background: #FFFFFF;\r\n  `,\r\n  headline: styled.section`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 32px;\r\n    margin-top: 46px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    line-height: 80px;\r\n    color: #AE0B05;\r\n  `,\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../Storage.js';\r\nimport '../Style/SearchBar.css';\r\n\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <section className=\"searchBar__searchContainer\">\r\n                Komande sökfunktion!!!\r\n            {/* <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n            </button> */}\r\n\r\n        </section>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {GenerallyStyle } from '../Style/MainStyle'\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { incommingSQLDataArr$ } from '../Storage.js';\r\nimport {getLocalStorageData} from '../Data/LocalStorage';\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\nimport { axiosGet } from '../Data/Axios.js';\r\nimport { SearchBar } from './SearchBar.js';\r\nimport { correctRoutes } from '../Data/runAppUrls.js';\r\nimport '../Style/SQLTable.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\n\r\nexport let HeadContents = () => {\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ erroLoadingSQLData, updateErroLoadingSQLData ] = useState(false);\r\n    let [ routes, updateRoutes ] = useState('');\r\n    \r\n    \r\n    //const appUrl = \r\n    \r\n    let [ addForm, setAddForm ] = useState(true);\r\n    //;\r\n    let ifSQLData;\r\n    let countGetMethod = 1;\r\n    \r\n    useEffect(() => {\r\n        updateRoutes(correctRoutes());\r\n        getSQLData();\r\n\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure \r\n            \r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n    },[routes]); \r\n    let getSQLData = () => {\r\n        \r\n        \r\n        let axiosUntilGettingData = new Promise((success, error) => {\r\n            if (countGetMethod === 1) {\r\n                success();\r\n                countGetMethod++;\r\n            }\r\n            if (countGetMethod === 2) {\r\n                setTimeout(() => {\r\n                    updateErroLoadingSQLData(true)\r\n                }, 1000);\r\n            }\r\n            //;\r\n            \r\n            //else error('Kunde inte ladda datan :(');\r\n        });\r\n        \r\n        console.log(\"getSQLData -> routes\", routes)\r\n        // Run default SQL list\r\n        axiosUntilGettingData.then((result) => {            \r\n            if(routes === '/' || routes === '/ScheduleApp/') axiosGet('default', '');\r\n            if (routes === '/Login' || routes === '/ScheduleApp/Login') axiosGet('userSpec', getLocalStorageData('token'));\r\n        }).catch((result) =>{\r\n            updateErroLoadingSQLData(result);\r\n        })\r\n    }\r\n    \r\n    let runAdmin = (e) => {\r\n        let targetBtn = e.target.dataset.admin;\r\n        if (targetBtn === 'logIn') setAddForm(true);\r\n        if (targetBtn === 'logOut') setAddForm(false);\r\n    }\r\n    console.log(\"HeadContents -> incommingNewSQLData\", incommingNewSQLData)\r\n    \r\n    return (\r\n        <GenerallyStyle.body__contents>\r\n            <SearchBar/>\r\n            <section id=\"container__tableSchedule\">\r\n                <table id=\"tableSchedule__body\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Datum</th>\r\n                            <th className=\"tableCol4\">Akitvitet</th>\r\n                            <th>Status</th>\r\n                            <th>Berörda</th>\r\n                            <th>Typ</th>\r\n                            <th>Plats</th>\r\n                            <th className=\"tableCol9\">Innehåll</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody id=\"tableSchedule__tBody\">\r\n                        {(incommingNewSQLData.length !== 0) \r\n                            ?\r\n                            incommingNewSQLData.map((sqlDataObj, rowCounter) => {\r\n                                \r\n                                return(\r\n                                    <tr key={ rowCounter }>\r\n                                        <td>{ sqlDataObj.date }</td>\r\n                                        <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                        <td>{ sqlDataObj.state }</td>\r\n                                        <td>{ sqlDataObj.concerned }</td>\r\n                                        <td>{ sqlDataObj.type }</td>\r\n                                        <td>{ sqlDataObj.place }</td>\r\n                                        <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        :   \r\n                            <>\r\n                                <tr><td>\r\n                                    <Spinner str={'Tabellen laddas'}/>\r\n                                </td></tr>\r\n                            </>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        </GenerallyStyle.body__contents>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== Olready logedIn ==============================\r\nexport let LogedInStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    margin-left: 820px;\r\n    margin-top: -8px;\r\n  `,\r\n  btnLogoutContainer: styled.section`\r\n    margin-top: -15px;\r\n  `,\r\n  logedInUser: styled.section`\r\n    border: 1px solid red;\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-left: 51px;\r\n  `,\r\n  btnSubmitContainer: styled.button`\r\n    right: 108px;\r\n    margin-left: 1269px;\r\n    margin-top: -20px;\r\n    width: 141px;\r\n    height: 39px;\r\n    background: #AE0B05;\r\n    border-radius: 4px;\r\n  `,\r\n  btnHeadline: styled.p`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 133px;\r\n    height: 32px;\r\n    left: 0px;\r\n    top: -10px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    color: white;\r\n  `,\r\n  logedInUser: styled.section`\r\n\r\n  `,\r\n  logedInUser: styled.section`\r\n\r\n  `,\r\n\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== Auth ==============================\r\nexport let AuthStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    margin-left: 820px;\r\n    margin-top: -8px;\r\n  `,\r\nlogInSpinnerMove: styled.section`\r\n    margin-left: 3px;\r\n  `,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GenerallyStyle } from '../Style/MainStyle';\r\nimport { AuthStyle } from '../Style/AuthStyle';\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport { headName$, gotoPage$, updateGotoPage } from '../Storage.js';\r\nimport Spinner from './Spinner.js';\r\nimport { Headbar } from '../Structure/Headbar.js';\r\nimport { HeadContents } from '../Structure/HeadContents';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport {axiosGet, axiosPost } from './Axios';\r\nimport { getLocalStorageData } from './LocalStorage';\r\nexport let Auth = () => {\r\n    const [ appName, setAppName ] = useState('');  \r\n    //const [ redirectToPage, updateRedirectToPage ] = useState('');\r\n    const [ token, updateToken ] = useState('');\r\n    \r\n    useEffect(() => {\r\n        //updateToken(getLocalStorageData('token'));\r\n        /* gotoPage$.subscribe((gotoPage) => {\r\n            updateRedirectToPage(gotoPage);\r\n        }); */\r\n        \r\n    }, []);\r\n    console.log(\"Auth -> token\", token);\r\n    console.log(token !== ' ');\r\n    \r\n    let runLogin = () => {\r\n        setTimeout(() => {\r\n            updateGotoPage('Login');\r\n        }, 500)\r\n    }\r\n    console.log(\"Auth -> token\", token)\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n\r\n            <Headbar\r\n                appStatus={\r\n                    <AuthStyle.statusContainer>\r\n                        Du loggas in ...\r\n                        <Spinner/>\r\n                        {runLogin()}\r\n                    </AuthStyle.statusContainer>\r\n                }\r\n                /> \r\n            <HeadContents/>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GenerallyStyle, HeadbarStyle } from '../Style/MainStyle';\r\n\r\nimport { axiosPost } from '../Data/Axios.js';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { userData$, gotoPage$, getLogStatus } from '../Storage.js';\r\nimport { Auth } from '../Data/Authorization';\r\nimport { log } from 'util';\r\n\r\nimport { LogedIn } from '../../LogedIn.js';\r\n\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\n\r\nimport { nfapply } from 'q';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let Headbar = (props) => {\r\n    const { appStatus } = props;\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName ] = useState('Årsklockan');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    let [ gotoIntoPage, updateGotoIntoPage ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        userData$.subscribe((userDispalyingObj) => {\r\n            \r\n            setInlogStatus(userDispalyingObj.responsType);\r\n            setInlogMess(userDispalyingObj.logInMess);\r\n        });\r\n        gotoPage$.subscribe((gotoPage) => {\r\n            updateGotoIntoPage(gotoPage);\r\n        });\r\n\r\n        /*         let getGotoPage = JSON.parse(window.localStorage.getItem(\"appData\")).responsType;\r\n        updateGotoPage(getGotoPage);\r\n        */        //if (gotoPage === 'LogedOut') return <Redirect to={`${ appUrl }LogedOut`} />;\r\n    }, [appUrl, gotoIntoPage]);\r\n\r\n    return (\r\n        <>\r\n            <HeadbarStyle.header>\r\n                <HeadbarStyle.headContainer>\r\n                    <HeadbarStyle.headline>{ appName }</HeadbarStyle.headline>\r\n                    {appStatus}\r\n                </HeadbarStyle.headContainer> \r\n                    \r\n                    \r\n                    \r\n                    {/* <GenerallyStyle.askMarkMove><i className=\"material-icons\">contact_support</i></GenerallyStyle.askMarkMove> */}\r\n            </HeadbarStyle.header>\r\n        </>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== LoginForm ==============================\r\nexport let LoginFormStyle = {\r\n  statusContainer: styled.section`\r\n    width: 706px;\r\n    height: 75px;\r\n    margin-left: 770px;\r\n    margin-top: -67px;\r\n`,\r\n  usernameContainer: styled.section`\r\n    margin-left: 10px;\r\n    margin-top: 30px;\r\n    margin-bottom: -25px;\r\n  `,\r\n  passwordContainer: styled.section`\r\n    margin-left: 256px;\r\n    margin-top: -69px;\r\n    margin-bottom: -25px;\r\n    `,\r\n  labelFormatUsernamePassword: styled.p`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 10px;\r\n    margin-bottom: -25px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n    color: #000000;\r\n    `,\r\n  inputFormatUsernamePassword: styled.input`\r\n    width: 228px;\r\n    height: 29px;\r\n    margin-left: 0px;\r\n    margin-top: 0px;\r\n    background: #F5F5F5;\r\n    border: 1px solid #E5E5E5;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n  `,  \r\n  btnLoginContainer: styled.section`\r\n    width: 181px;\r\n    height: 80%;\r\n    margin-left: 499px;\r\n    margin-top: -55px;\r\n  `,\r\n  btnSubmitContainer: styled.button`\r\n    margin-right: 108px;\r\n    margin-top: 20px;\r\n    margin-left: 0;\r\n    width: 141px;\r\n    height: 39px;\r\n    background: #AE0B05;\r\n    border-radius: 4px;\r\n  `,\r\n  btnHeadline: styled.p`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 133px;\r\n    height: 32px;\r\n    left: -6px;\r\n    top: -9px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    color: white;\r\n  `,\r\n  userInfoContainer: styled.section`\r\n    width: 377px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  `,\r\n  userErrorMess: styled.p`\r\n    margin-top: 14px;\r\n    margin-left: 18px;\r\n    width: 149px;\r\n    font-size: 13.5px;\r\n    color: #AE0B05;\r\n    font-weight: bold;\r\n  `,\r\n  regLink: styled.section`\r\n    margin-right: -50px;\r\n    margin-top: 10px;\r\n    width: 200px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n    text-align: center;\r\n    color: black;\r\n    font-size: 12px;\r\n  `,\r\n}\r\n// ============================== Headbar ==============================\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: -39px 0px 0px -5px;\r\n    `,\r\n  headContainer: styled.section`\r\n    width: 1400px;\r\n    height: 103px;\r\n    margin-left: calc(50% - 700px);\r\n    background: #FFFFFF;\r\n  `,\r\n  headline: styled.section`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 32px;\r\n    margin-top: 46px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    line-height: 80px;\r\n    color: #AE0B05;\r\n  `,\r\n  statusContainer: styled.section`\r\n    width: 706px;\r\n    height: 75px;\r\n    margin-left: 770px;\r\n    margin-top: -53px;\r\n  `,\r\n  }","import React, { useState, useEffect } from 'react';\r\nimport { HeadbarStyle } from '../Style/MainStyle';\r\nimport { LoginFormStyle } from '../Style/LoginFormStyle';\r\nimport { routeName } from '../Data/RouteNames';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nexport let LoginForm = (props) => {\r\n    const {appUrl, onChangeUserName, onChangeUserPwd, userNameStr, userPwdStr, runAuth, runReg, inlogStatus, inlogMess} = props;\r\n    return(\r\n        <LoginFormStyle.statusContainer>\r\n            <LoginFormStyle.usernameContainer>\r\n                <LoginFormStyle.labelFormatUsernamePassword>Användarnamn</LoginFormStyle.labelFormatUsernamePassword>\r\n                <LoginFormStyle.inputFormatUsernamePassword type=\"text\" onChange={ onChangeUserName } value={ userNameStr } placeholder=\"...\"/>\r\n            </LoginFormStyle.usernameContainer> \r\n            <LoginFormStyle.passwordContainer>\r\n                <LoginFormStyle.labelFormatUsernamePassword>Lösenord</LoginFormStyle.labelFormatUsernamePassword>\r\n                <LoginFormStyle.inputFormatUsernamePassword type=\"text\" onChange={ onChangeUserPwd } value={ userPwdStr } placeholder=\"...\"/>\r\n            </LoginFormStyle.passwordContainer>  \r\n\r\n            <LoginFormStyle.btnLoginContainer>\r\n                <LoginFormStyle.btnSubmitContainer id=\"Auth\" onClick={ runAuth }>\r\n                    <LoginFormStyle.btnHeadline id='Auth' onClick={ runAuth }>Logga In</LoginFormStyle.btnHeadline>\r\n                </LoginFormStyle.btnSubmitContainer> \r\n            </LoginFormStyle.btnLoginContainer>\r\n            \r\n            <LoginFormStyle.userInfoContainer>\r\n                <LoginFormStyle.userErrorMess>\r\n                    {(inlogStatus === 203)\r\n                        ? (userNameStr === null && userPwdStr === null ) \r\n                            ? inlogMess : null\r\n                        : null\r\n                    }\r\n                </LoginFormStyle.userErrorMess>\r\n                <LoginFormStyle.regLink>\r\n                    <Link to={ appUrl + routeName.userReg } onClick={ runReg } id=\"reg\">\r\n                        Registrera ny användare\r\n                    </Link>\r\n                </LoginFormStyle.regLink>\r\n            </LoginFormStyle.userInfoContainer>\r\n        </LoginFormStyle.statusContainer>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateGotoPage, userData$, getLogStatus } from '../Storage.js';\r\nimport { formInputObj } from '../../MainPage.js';\r\nimport { axiosPost } from './Axios.js';\r\n\r\nimport '../Style/LogInOut.css';\r\nimport { localPubAppUrls } from './runAppUrls.js';\r\n\r\nimport { isArray } from 'util';\r\n\r\n/* export let updatedUserNameStr = ''\r\nexport let updatedUserPwdStr = ''; */\r\nconsole.log(userData$.value);\r\n\r\nexport let runLogInOut = (e) => {\r\n\r\n    let userInformation = {};\r\n    let targetBtn = e.target; \r\n    // Gets the element\r\n    let targetBtnId = targetBtn.id; \r\n    let targetBtnValue = targetBtn;\r\n    console.log(targetBtn);\r\n    // Things happen according to whare I click\r\n    if(targetBtnId === 'LogIn') {\r\n        \r\n        /* Validate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: formInputObj.userNameStr, userPassWord: formInputObj.userPwdStr}\r\n        console.log(userInformation);\r\n        \r\n        axiosPost('userValidate', userInformation);\r\n\r\n        // inkludera en promise så funktionen nedan väntar på att axios har data\r\n        let promiseRunGotoPage = new Promise((run, error) => {\r\n            console.log('promise running :)');\r\n            console.log(getLogStatus.type);\r\n            \r\n            if (getLogStatus.type === 200) {\r\n                \r\n                run();\r\n            }\r\n        });\r\n\r\n        promiseRunGotoPage.then(() => {\r\n            // Check if you are able loggin according to the incomming data\r\n            if (getLogStatus().type === 200){\r\n                console.log('klj');\r\n                \r\n                updateGotoPage(targetBtnId);\r\n                }\r\n            if (getLogStatus().type === 203) return;\r\n            //formInputObj = {};\r\n        });\r\n\r\n    }\r\n    if(targetBtnId === 'LogOut') {\r\n\r\n\r\n        \r\n        return <Redirect to={ localPubAppUrls() }/>;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport { headName$ } from '../Storage.js';\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\n\r\nimport '../Style/RegUser.css';\r\n\r\nlet countRegUser = 0;\r\n\r\nexport let RegUser = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n\r\n    let [ userFullName, setUserFullName ] = useState('');\r\n    let [ userName, setUserName  ] = useState('');\r\n    let [ userPwd, setUserPWD ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n    }, []);\r\n    let setStrsType = (e) => {\r\n        //console.log('nyh');\r\n        \r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n        //console.log(inputStr);\r\n        \r\n\r\n        if (dataset.type === 'fullName') setUserFullName(inputStr);\r\n        if (dataset.type === 'userName') setUserName(inputStr);\r\n        if (dataset.type === 'userPwd') setUserPWD(inputStr);\r\n    };\r\n\r\n     let sendUserReg = (e) => {\r\n        let targetBtnId = e.target.id; \r\n        // Created a body for the added data\r\n        let sqlBody = {\r\n            fullName: userFullName,\r\n            userName: userName,\r\n            userPassWord: userPwd\r\n        }\r\n        //console.log(sqlBody);\r\n        \r\n        axiosPost('userReg', 'targetBtnId', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n    };\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Registrera`}</title>\r\n            </Helmet>\r\n            <section className=\"logInOut__btnRegContainer\">\r\n                <div className=\"btnContainer__cancelReg\">\r\n                    <input type=\"submit\" className=\"btnLogOut__cancelReg\" value=\"\"/>\r\n                    <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                        <p className=\"btnHeadline__cancelReg\">Avbryt</p>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n            <section className=\"regUser__regContainer\">\r\n                <form>\r\n                    <div>\r\n                        <label id=\"userFullName\">Ditt Namn</label>\r\n                        <input type=\"text\" id=\"userFullName\" data-type=\"fullName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userName\">Användarnamn</label>\r\n                        <input type=\"text\" id=\"userName\" data-type=\"userName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userPwd\">Lösenord</label>\r\n                        <input type=\"text\" id=\"userPwd\" data-type=\"userPwd\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"submit\" className=\"regContainer__submitBtn\" value=\"\" onClick={ sendUserReg } id=\"login\"/>\r\n                        <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                            <p className=\"regContainer__headline\" onClick={ sendUserReg } id=\"Login\">Registrera</p>\r\n                        </Link>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n     \r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nimport { routeName } from './Components/Data/RouteNames';\r\n\r\nimport { LoginForm } from './Components/Data/LoginForm'\r\nimport { HeadbarBtn } from './Components/Structure/HeadbarBtn';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { headName$, userData$, getLogStatus, updateGotoPage} from './Components/Storage.js';\r\nimport {axiosGet, axiosPost } from './Components/Data/Axios';\r\n\r\n\r\nimport { runLogInOut } from './Components/Data/LogInOut.js';\r\nimport { LogedIn } from './LogedIn.js';\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\n\r\nimport { Headbar } from './Components/Structure/Headbar.js';\r\nimport { HeadContents } from './Components/Structure/HeadContents';\r\nimport { RegUser } from './Components/Structure/RegUser';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let MainPage = () => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    const [ userNameStr, updateUserNameStr ] = useState('');\r\n    const [ userPwdStr, updateUserPwdStr ] = useState('');\r\n    let [ redirectToPage, updateRedirectToPage ] = useState('Auth');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        //console.log('ecsfv');\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        userData$.subscribe((returningUserDispalyingObj) => {\r\n            //console.log(returningUserDispalyingObj);\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n        if(redirectToPage === '/') return <Redirect to='/' />\r\n        if(redirectToPage === 'RegUser') return <Redirect to='/Auth' />\r\n        \r\n    }, []);\r\n    //console.log(inlogStatus);\r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        //;\r\n        \r\n        updateUserNameStr(targetUserName);\r\n        //formInputObj['userNameStr'] = targetUserName;\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        //;\r\n        updateUserPwdStr(targetUserPwd);\r\n        //formInputObj['userPwdStr'] = targetUserPwd;\r\n    }\r\n    let runAuth = (e) => {\r\n        let userInformation = {};\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n  \r\n        /* Authorization with a token as response backValidate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: userNameStr, userPassWord: userPwdStr}\r\n        \r\n        axiosPost(targetBtnId, userInformation);    \r\n        updateGotoPage(targetBtnId);\r\n        //if (inlogStatus === 203) return; \r\n    }\r\n    let runReg = () =>{\r\n\r\n    }\r\n\r\n    //LogedIn.runLogInOut();\r\n    //console.log(LogedIn);\r\n    \r\n    let hideShowLoginMessPromise = () => {   \r\n        let loginMess = getLogStatus().mess;\r\n        /*         let hideShowLoginMessPromise = () => {\r\n            \r\n            let hideShowMess = new Promise((showHide, error) => {       \r\n                showHide()\r\n            });\r\n            \r\n            loginMess = hideShowMess().then(() => {\r\n                setTimeout(() => {\r\n                    let loginMess= '';\r\n                    return loginMess;\r\n                }, 3000);\r\n                \r\n            })\r\n            return loginMess;\r\n        } */\r\n        \r\n    } \r\n    \r\n        return (\r\n        <>  \r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LoginForm\r\n                        appUrl={appUrl}\r\n                        onChangeUserName={onChangeUserName}\r\n                        userNameStr={userNameStr}\r\n                        onChangeUserPwd={onChangeUserPwd}\r\n                        userPwdStr={userPwdStr}\r\n                        runAuth={runAuth}\r\n                        runReg={runReg}\r\n                        inlogStatus={inlogStatus}\r\n                        inlogMess={inlogMess}\r\n                    />\r\n                }\r\n            />\r\n{/*             <HeadbarBtn\r\n                btnName={ 'Logga In' }\r\n                id={ 'Auth' }\r\n                onClick={ runAuth }\r\n            /> */}\r\n            <Route exact path={appUrl} component={ HeadContents }/>\r\n            <Route exact path={ appUrl + routeName.userReg } component={ RegUser }/>   \r\n\r\n        </>\r\n\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { HeadbarStyle } from './Components/Style/MainStyle';\r\nimport { LogedInStyle } from './Components/Style/LogedInStyle';\r\nimport { GenerallyStyle } from './Components/Style/MainStyle'\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport './Components/Style/Spinner.scss';\r\n\r\nimport { HeadContents } from './Components/Structure/HeadContents';\r\nimport { axiosPost } from './Components/Data/Axios';\r\nimport { Headbar } from './Components/Structure/Headbar';\r\nimport Spinner from './Components/Data/Spinner';\r\n\r\nimport { MainPage } from './MainPage.js';\r\nimport axios from 'axios';\r\nimport { headName$, updateInlogedUserFullName, updateLocalstorage, inlogedUserFullName$, updateGotoPage } from './Components/Storage.js';\r\n\r\nimport { log } from 'util';\r\n\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\n\r\nexport let LogedIn = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ appName, setAppName ] = useState('');   \r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {         \r\n            updateInlogedUser(inlogedUserFullName);\r\n        }); \r\n        setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        }, 1000);\r\n    }, []);\r\n    let runLogOut = (e) => {\r\n        // Gets the element\r\n        let targetBtnId = e.target.id;     \r\n        updateGotoPage(targetBtnId);\r\n\r\n        updateLocalstorage(window.localStorage.clear('loginData'));\r\n        //axiosPost('', targetBtnId, '');\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Inloggad`}</title>\r\n            </Helmet>\r\n\r\n{/*             Du loggas in ...\r\n                        <GenerallyStyle.logInSpinnerMove> {<Spinner/>}</GenerallyStyle.logInSpinnerMove>\r\n                        {runLogin()} */}\r\n            <Headbar\r\n                appStatus={\r\n                    <>\r\n                        <LogedInStyle.statusContainer>\r\n                            {(inlogedUser === '' ) \r\n                                ? <>\r\n                                        Välkommen in ... <Spinner/>\r\n                                    </>\r\n                                : `Välkommen in ${ inlogedUser }`\r\n                            }\r\n                            \r\n                        </LogedInStyle.statusContainer>\r\n                        <LogedInStyle.btnLogoutContainer>\r\n                            <LogedInStyle.btnSubmitContainer id=\"Logout\" onClick={ runLogOut }>\r\n                                <LogedInStyle.btnHeadline id='Logout' onClick={ runLogOut }>Logga Ut</LogedInStyle.btnHeadline>\r\n                            </LogedInStyle.btnSubmitContainer> \r\n                        </LogedInStyle.btnLogoutContainer>\r\n\r\n                                <div className=\"btnContainer__btnAdd\">\r\n                                    <input type=\"submit\" className=\"btnLogOut__input\" onClick={ MainPage.runLogInOut } id=\"add\" value=\"\"/>\r\n                                    <Link to={ `${ appUrl }/Add`} className=\"btnContainer__inputHeadline\" onClick={ MainPage.runLogInOut } id=\"add\">\r\n                                        <p className=\"btnHeadline__add\" id='add'>Lägg Till</p>\r\n                                    </Link>\r\n                                </div>\r\n                        </>\r\n                }\r\n            />\r\n{/*             <HeadbarBtn\r\n                btnName={ 'Logga Ut' }\r\n                id={ 'Logout' }\r\n                onClick={ runLogOut }\r\n            /> */}\r\n            <HeadContents/>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { routeName } from './Components/Data/RouteNames';\r\n\r\n// React Router - ES6 modules\r\nimport { \r\n  // BrowserRouter as Router, \r\n  HashRouter, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateHeadName, getLogStatus, gotoPage$ } from './Components/Storage.js';\r\n\r\n\r\nimport { FormAdd } from './Components/Structure/FormAdd.js';\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\nimport { HeadContents } from './Components/Structure/HeadContents.js';\r\nimport { LogedIn } from './LogedIn';\r\nimport { MainPage } from './MainPage.js';\r\nimport { Auth } from './Components/Data/Authorization';\r\n\r\nupdateHeadName('Årsklockan');\r\n\r\nlet MainApp = () => {\r\n  let [ appUrl, setAppUrl ] = useState('');\r\n  let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n  console.log(\"MainApp -> redirectToPage\", redirectToPage)\r\n  \r\n  useEffect(() => {\r\n    gotoPage$.subscribe((gotoPage) => {\r\n      updateRedirectToPage(gotoPage);\r\n    });\r\n    setAppUrl(localPubAppUrls());\r\n    \r\n  },[redirectToPage]);\r\n  console.log(\"MainApp -> appUrl\", appUrl)\r\n  console.log(\"MainApp -> redirectToPage\", redirectToPage)\r\n  console.log(\"MainApp -> appUrl + routeName.login\", appUrl + routeName.login)\r\n\r\n  return (\r\n    <HashRouter basename='/'>\r\n      {redirectToPage === routeName.auth  && <Redirect to={`/${ routeName.auth }`}/>}  \r\n      {redirectToPage === routeName.login && <Redirect to={ `/${ routeName.login }`} />} \r\n    \r\n      <Route exact path={ appUrl } component={ MainPage } />\r\n      <Route exact path={ appUrl + routeName.auth } component={ Auth }/>   \r\n      <Route exact path={ appUrl + routeName.login } component={ LogedIn }/>  \r\n      <Route exact path={ appUrl + routeName.add } component={ FormAdd }/>\r\n    </HashRouter>\r\n  );\r\n} \r\n/* <Router>\r\n  {redirectToPage === routeName.auth  && <Redirect to={`/${ routeName.auth }`}/>}  \r\n  {redirectToPage === routeName.login && <Redirect to={ `/${ routeName.login }`} />} \r\n\r\n<Route exact path={ appUrl } component={ MainPage } />\r\n<Route exact path={ appUrl + routeName.auth } component={ Auth }/>   \r\n<Route exact path={ appUrl + routeName.login } component={ LogedIn }/>  \r\n<Route exact path={ appUrl + routeName.add } component={ FormAdd }/>\r\n</Router> */\r\n\r\nexport default MainApp; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Components/Style/Body.css';\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}