{"version":3,"sources":["Components/Data/RouteNames.js","Components/CommonFunctions.js","Components/Data/LocalStorage.js","Components/Storage.js","Components/Data/runAppUrls.js","Components/Data/Spinner.js","Components/Structure/SQLTable.js","Components/Style/MainStyle.js","Components/Style/CommonStyle.js","Components/Style/LogedInStyle.js","Components/Data/SubmitBtn.js","Components/Data/Axios.js","Components/Structure/SearchBar.js","Components/Structure/TableHead.js","Components/Structure/FormAdd.js","Components/Structure/HeadTable.js","Components/Style/AuthStyle.js","Components/Data/Authorization.js","Components/Structure/Headbar.js","Components/Style/SpecificStyleBtn.js","Components/Style/LoginFormStyle.js","Components/Data/LoginForm.js","Components/Data/LogInOut.js","Components/Structure/RegUser.js","MainPage.js","LogedIn.js","MainApp.js","serviceWorker.js","index.js"],"names":["routeName","jwt","require","getLocalStorageData","getData","console","log","window","localStorage","JSON","parse","getItem","token","inlogedUserFullName$","BehaviorSubject","headName$","userData$","incommingSQLDataArr$","gotoPage$","updateLocalstorage","saveLoginData","setItem","stringify","updateInlogedUserFullName","next","inlogData","tokenData","verify","error","loginName","getTokenData","updateSavedSQLData","incommingSQLDataArr","updateGotoPage","gotoPage","localPubAppUrls","correctDomain","domainHostname","location","hostname","appUrlHostname","hash","split","Spinner","props","str","className","SQLTable","id","incommingNewSQLData","length","map","sqlDataObj","rowCounter","key","date","activity","state","concerned","type","place","content","GenerallyStyle","body__contents","styled","section","askMarkMove","HeadbarStyle","header","headContainer","headline","CommonBtnStyle","btn","button","CommonTexStyle","btnHeadline","p","LogedInStyle","statusContainer","logedInUser","btnSubmitLogoutInTopUp","SubmitBtn","style","name","onClick","text","savedSQLDataArr","axiosGet","getType","tokenStr","routes","axios","get","headers","Authorization","then","response","incommingSQLRes","status","data","push","catch","axiosPost","postType","bodyData","sendToSqlBackend","post","logedInUserInfoObj","responsType","logInMess","statusText","loginData","SearchBar","TableHead","AddRecords","useState","appUrl","setAppUrl","appName","setAppName","inlogedUser","updateInlogedUser","incommingSQLData","updateIncommingSQLData","updateAddedData","dateStr","updateDateStr","activityStr","updateActivityStr","stateStr","updateStateStr","concernedStr","updateConcernedStr","typeStr","updateTypeStr","placeStr","updatePlaceStr","contentStr","updateContentStr","useEffect","subscribe","headName","inlogedUserFullName","setTimeout","setStrsType","e","target","inputStr","value","dataset","sendInUserData","Helmet","charSet","to","data-type","onChange","placeholder","wait","HeadTable","updateIncommingNewSQLData","updateErroLoadingSQLData","updateRoutes","tableHead","tableBody","countGetMethod","addRecordsBtn","pathname","correctRoutes","getSQLData","SQLDataArr","axiosUntilGettingData","Promise","success","result","addRecords","AuthStyle","logInSpinnerMove","Auth","appStatus","Headbar","setInlogMess","setInlogStatus","gotoIntoPage","updateGotoIntoPage","userDispalyingObj","specificBtnLStyleLogin","marginRight","marginTop","marginLeft","width","height","left","top","specificBtnStyleLogout","specificBtnStyleAddRecords","LoginFormStyle","usernameContainer","passwordContainer","labelFormatUsernamePassword","inputFormatUsernamePassword","input","btnLoginContainer","userInfoContainer","userErrorMess","regLink","LoginForm","onChangeUserName","onChangeUserPwd","userNameStr","userPwdStr","runAuth","runReg","inlogStatus","inlogMess","RegUser","setUserFullName","setUserName","setUserPWD","sendUserReg","MainPage","updateUserNameStr","updateUserPwdStr","redirectToPage","returningUserDispalyingObj","targetUserName","targetUserPwd","targetBtnId","userName","userPassWord","exact","path","component","LogedIn","seAddRecords","runAddRecord","clear","updateHeadName","MainApp","updateRedirectToPage","basename","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2cAAaA,EACC,IADDA,EAEA,UAFAA,EAGH,OAHGA,EAIF,Q,wBCJPC,EAAMC,EAAQ,KCKX,SAASC,EAAoBC,GAMhC,OALAC,QAAQC,IAAI,oDAAqDC,OAAOC,cAExEJ,EAAUK,KAAKC,MAAMH,OAAOC,aAAaG,QAAQ,cAAcC,MAC/DP,QAAQC,IAAI,iCAAkCF,GAEvCA,ECPX,IAQaS,EAAuB,IAAIC,IAPd,IAQbC,EAAY,IAAID,IATd,IAUFE,EAAY,IAAIF,IARd,IASFG,EAAuB,IAAIH,IARd,IAUbI,EAAY,IAAIJ,IATd,IAWc,IAAIA,IAAgB,IAW1C,IAAIK,EAAqB,SAACC,GAC7BZ,aAAaa,QAAQ,YAAaZ,KAAKa,UAAUF,KAsB9C,SAASG,IACRA,GAA2BV,EAAqBW,KFpD9B,SAACZ,EAAOa,GAC9BpB,QAAQC,IAAI,wBAAyBM,GACrC,IAAIc,EAAYzB,EAAI0B,OAAQf,EAAO,kBAAkB,SAACgB,EAAOhB,GAAR,OAAkBA,KACvE,GAAkB,aAAda,EAA0B,OAAOC,EAAUG,UEiDUC,CAAa3B,EAAoB,SAAU,aAKjG,SAAS4B,EAAmBC,GAE5BA,GACCf,EAAqBO,KAAKQ,GAG3B,SAASC,EAAeC,GAM3B,OALJ7B,QAAQC,IAAI,6BAA8B4B,GAEnCA,GACChB,EAAUM,KAAKU,GAEZA,ECvEJ,IAAIC,EAAkB,WAC3B,IAAIC,EAAgB,GAEhBC,EAAiB9B,OAAO+B,SAASC,SACjCC,EAAiBjC,OAAO+B,SAASG,KAAKC,MAAM,IAAI,GAOpD,OANArC,QAAQC,IAAI,kCAAmC+B,GAC/ChC,QAAQC,IAAI,mCAAoCkC,GAGzB,cAAnBH,GAAqD,wBAAnBA,IAA0CD,EAAgB,KAEzFA,GCFMO,G,OAPM,SAACC,GAClB,OACI,oCACMA,EAAMC,IADZ,IACkB,0BAAMC,UAAU,4BCF/BC,EAAW,SAACH,GACnB,OACI,oCACI,2BAAOI,GAAG,wBACiC,IAArCJ,EAAMK,oBAAoBC,OAExBN,EAAMK,oBAAoBE,KAAI,SAACC,EAAYC,GAEvC,OACI,wBAAIC,IAAMD,GACN,4BAAMD,EAAWG,MACjB,wBAAIT,UAAU,aAAcM,EAAWI,UACvC,4BAAMJ,EAAWK,OACjB,4BAAML,EAAWM,WACjB,4BAAMN,EAAWO,MACjB,4BAAMP,EAAWQ,OACjB,wBAAId,UAAU,aAAcM,EAAWS,aAKnD,oCACI,4BAAI,4BACA,kBAAC,EAAD,CAAShB,IAAK,0B,23BCvB1C,IACWiB,EAAiB,CAC1BC,eAAgBC,IAAOC,QAAT,KAIdC,YAAaF,IAAOC,QAAT,MAMFE,EAAe,CACxBC,OAAQJ,IAAOC,QAAT,KAKNI,cAAeL,IAAOC,QAAT,KAMbK,SAAUN,IAAOC,QAAT,M,mgBCxBH,IAAIM,EAAiB,CACxBC,IAAKR,IAAOS,OAAT,MAOIC,EAAiB,CACxBC,YAAaX,IAAOY,EAAT,M,+fCRR,IAAIC,EAAe,CACxBC,gBAAiBd,IAAOC,QAAT,KAQfc,YAAaf,IAAOC,QAAT,KAOXe,uBAAwBhB,IAAOC,QAAT,M,QCjBbgB,EAAY,SAACrC,GAAW,IACvBsC,EAA6BtC,EAA7BsC,MAAOC,EAAsBvC,EAAtBuC,KAAMC,EAAgBxC,EAAhBwC,QAASpC,EAAOJ,EAAPI,GAC9B,OACI,oCACI,kBAACuB,EAAeC,IAAhB,CAAoBxB,GAAKA,EAAKoC,QAAUA,EAAUF,MAAQA,EAAMV,KAC5D,kBAACE,EAAeC,YAAhB,CAA4B3B,GAAKA,EAAKoC,QAAUA,EAAUF,MAAQA,EAAMG,MAASF,M,iBCH7FG,G,YAAkB,IAKXC,EAAW,SAACC,EAASC,GAC5BpF,QAAQC,IAAI,sBAAuBkF,GAC/B,IAAIE,EAAS,GAGD,YAAZF,IAAuBE,EAAS,YACpB,aAAZF,IAAwBE,EAAM,mBAAgB,WAKlDC,IAAMC,IAbO,wBAaUF,EAAQ,CAACG,QAAS,CAACC,cAAc,UAAD,OAAYL,MAAcM,MAAK,SAAAC,GACtF3F,QAAQC,IAAI,uBAAwB0F,GAChC,IAAIC,EAAkB,GAIE,MAApBD,EAASE,QAA8B,YAAZV,IAAuBS,EAAkBD,EAASG,KAAK,IAC9D,MAApBH,EAASE,QAA8B,aAAZV,IAAwBS,EAAkBD,EAASG,KAAK,IAQrFpE,EAAmBkE,GAKG,MAApBD,EAASE,SAETZ,EAAgB,GAAGc,KAAKH,EAAgB,GAAG,IAC3ClE,EAAmB,GAAGuD,OAK9Be,OAAM,SAAAzE,QAQC0E,EAAY,SAACC,EAAUC,GAC9BnG,QAAQC,IAAI,wBAAyBkG,GAErC,IAAI7C,EAAO,GACP8C,EAAmB,CACnBD,YAIa,SAAbD,IAAqB5C,EAAO,QACf,WAAb4C,IAAuB5C,EAAO,UACjB,QAAb4C,IAAoB5C,EAAO,aACd,YAAb4C,IAAwB5C,EAAO,WAEnCgC,IAAMe,KAAN,UA/Da,wBA+Db,oBAC8B/C,GACxB8C,GAAmBV,MAAK,SAAAC,GAEtB,GADA3F,QAAQC,IAAI,wBAAyB0F,GACpB,SAAbO,EAAoB,CAGpB,IAAII,EAAqB,CACrBC,YAAaZ,EAASE,OACtBW,UAAWb,EAASc,WACpBlG,MAAOoF,EAASG,MRxDhChF,EAD2B4F,EQ+DAJ,GR7DxBI,GACC/F,EAAUQ,KAAKuF,GQ8DiB,MAApBf,EAASE,QAAgBjE,EAAesE,GRjErD,IAAwBQ,KQmEpBV,OAAM,SAAAzE,QCjFNoF,G,OAAY,WAsHnB,OACI,6BAASlE,UAAU,8BAAnB,+BC/HGmE,I,OAAY,WACnB,OACI,+BACI,4BACI,qCACA,wBAAInE,UAAU,aAAd,aACA,sCACA,0CACA,mCACA,qCACA,wBAAIA,UAAU,aAAd,mBCCLoE,I,OAAa,SAACtE,GAAW,IAAD,EACHuE,mBAAS,IADN,mBACzBC,EADyB,KACjBC,EADiB,OAEDF,mBAAS,IAFR,mBAEzBG,EAFyB,KAEhBC,EAFgB,OAGUJ,mBAAS,IAHnB,mBAGzBK,EAHyB,KAGZC,EAHY,OAIoCN,mBAAS,IAJ7C,gCAKoBA,mBAAS,KAL7B,mBAKzBO,EALyB,KAKPC,EALO,OAOMR,oBAAS,GAPf,mBAOdS,GAPc,aAQwBT,mBAAS,GARjC,gCAS4BA,mBAAS,KATrC,gCAWEA,mBAAS,KAXX,mBAWzBU,EAXyB,KAWhBC,EAXgB,OAYUX,mBAAS,IAZnB,mBAYzBY,EAZyB,KAYZC,EAZY,OAaIb,mBAAS,IAbb,mBAazBc,EAbyB,KAafC,EAbe,OAcYf,mBAAS,IAdrB,mBAczBgB,GAdyB,KAcXC,GAdW,QAeEjB,mBAAS,IAfX,qBAezBkB,GAfyB,MAehBC,GAfgB,SAgBInB,mBAAS,IAhBb,qBAgBzBoB,GAhByB,MAgBfC,GAhBe,SAiBQrB,mBAAS,IAjBjB,qBAiBzBsB,GAjByB,MAiBbC,GAjBa,MAmB/BC,qBAAU,WACNtB,EAAUlF,KACVoD,EAAS,YACTxE,EAAU6H,WAAU,SAACC,GAEjBtB,EAAWsB,MAEfhI,EAAqB+H,WAAU,SAACE,GAE5BrB,EAAkBqB,MAEtB7H,EAAqB2H,WAAU,SAAC5G,GAEO,MAA/BA,EAAoBkE,QAAgByB,EAAuB3F,EAAoBmE,KAAK,OAM5F4C,YAAW,WACPxH,MACD,OACJ,IAEH,IAAIyH,GAAc,SAACC,GACf,IAAItF,EAAOsF,EAAEC,OACTC,EAAWxF,EAAKyF,MACbC,EAAW1F,EAAX0F,QAEc,SAAjBA,EAAQ1F,MAAiBmE,EAAcqB,GACtB,aAAjBE,EAAQ1F,MAAqBqE,EAAkBmB,GAC9B,UAAjBE,EAAQ1F,MAAkBuE,EAAeiB,GACxB,cAAjBE,EAAQ1F,MAAsByE,GAAmBe,GAChC,SAAjBE,EAAQ1F,MAAiB2E,GAAca,GACtB,UAAjBE,EAAQ1F,MAAkB6E,GAAeW,GACxB,YAAjBE,EAAQ1F,MAAoB+E,GAAiBS,IAKjDG,GAAiB,SAACL,GAClBrB,GAAgB,GAOhBtB,EAAU,MAJI,CAAC,EAAGuB,EAASE,EAAaE,EAAUE,GAAcE,GAASE,GAAUE,MAavF,OACI,oCACI,kBAACc,EAAA,OAAD,KACI,0BAAMC,QAAQ,UACd,yCAAWlC,EAAX,qBAEJ,gCACI,6BAASxE,UAAU,0BACf,uBAAGA,UAAU,2BAA4BwE,GACzC,6BAASxE,UAAU,2BAEf,uBAAGA,UAAU,yBAAb,0BAAuE,KAAhB0E,EAAsB,MAAQA,IAErF,6BAAS1E,UAAU,4BACf,yBAAKA,UAAU,gCACX,2BAAOa,KAAK,SAASb,UAAU,mBAAmBsC,QAAU,GAAKpC,GAAG,YAAYoG,MAAM,KACtF,kBAAC,IAAD,CAAMK,GAAE,UAAMrC,EAAN,UAAuBtE,UAAU,8BAA8BsC,QAAU,GAAKpC,GAAG,aACrF,uBAAGF,UAAU,wBAAwBE,GAAG,aAAxC,gBAOxB,4BAAQF,UAAU,iCAAiCsC,QAAUkE,GAAiBtG,GAAG,UAC7E,uBAAGF,UAAU,sBAAsBE,GAAG,SAASoC,QAAUkE,IAAzD,cAEJ,6BAASxG,UAAU,yBACf,2BAAOA,UAAU,sBACb,kBAAC,EAAD,MACA,2BAAOA,UAAU,uBACb,4BACI,4BAAI,2BAAOa,KAAK,OAAOb,UAAU,cAAc4G,YAAU,OAAOC,SAAWX,GAAcY,YAAY,WACrG,wBAAI9G,UAAU,aAAY,2BAAOa,KAAK,OAAOb,UAAU,cAAc4G,YAAU,WAAWC,SAAWX,GAAcY,YAAY,WAC/H,4BAAI,2BAAOjG,KAAK,OAAOb,UAAU,cAAc4G,YAAU,QAAQC,SAAWX,GAAcY,YAAY,WACtG,4BAAI,2BAAOjG,KAAK,OAAOb,UAAU,cAAc4G,YAAU,YAAYC,SAAWX,GAAcY,YAAY,WAC1G,4BAAI,2BAAOjG,KAAK,OAAOb,UAAU,cAAc4G,YAAU,OAAOC,SAAWX,GAAcY,YAAY,WACrG,4BAAI,2BAAOjG,KAAK,OAAOb,UAAU,cAAc4G,YAAU,QAAQC,SAAWX,GAAcY,YAAY,WACtG,wBAAI9G,UAAU,aAAY,2BAAOa,KAAK,OAAOb,UAAU,cAAc4G,YAAU,UAAUC,SAAWX,GAAcY,YAAY,YAElI,4BAC+B,IAA5BlC,EAAiBxE,OAEZwE,EAAiBvE,KAAI,SAACC,EAAYC,GAE9B,OACI,wBAAIC,IAAMD,GACN,4BAAMD,EAAWG,MACjB,wBAAIT,UAAU,aAAcM,EAAWI,UACvC,4BAAMJ,EAAWK,OACjB,4BAAML,EAAWM,WACjB,4BAAMN,EAAWO,MACjB,4BAAMP,EAAWQ,OACjB,wBAAId,UAAU,aAAcM,EAAWS,aAInD,4BAAI,4BAAI,kBAAC,EAAD,CAASgG,KAAO,0BC9H7CC,GAAY,SAAClH,GAAW,IAAD,EAC2BuE,mBAAS,IADpC,mBACxBlE,EADwB,KACH8G,EADG,OAEyB5C,oBAAS,GAFlC,mBAEJ6C,GAFI,aAGC7C,mBAAS,IAHV,mBAGxBzB,EAHwB,KAGhBuE,EAHgB,QAIGrH,EAAzBsH,UAAyBtH,EAAduH,UAIWhD,oBAAS,IART,mBAW1BiD,GAX0B,UAWT,GACdC,EAAiBzH,EAAjByH,cACPhK,QAAQC,IAAI+J,GAEZ1B,qBAAU,WACNsB,EXvBmB,WACzB,IAEIjK,EAAYO,OAAO+B,SAASgI,SAchC,OAbAjK,QAAQC,IAAI,uBAAwBN,GAa7BA,EWMYuK,IACbC,IAEAvJ,EAAqB2H,WAAU,SAAC6B,GAGxBA,GAAYV,EAA0BU,GACZ,OAA1BA,EAAW3D,YAAqBiD,EAA0BU,EAAWtE,KAAK,SAEpF,CAACT,IACH,IAAI8E,EAAa,WAGb,IAAIE,EAAwB,IAAIC,SAAQ,SAACC,EAAShJ,GACvB,IAAnBwI,IACAQ,IACAR,KAEmB,IAAnBA,GACArB,YAAW,WACPiB,GAAyB,KAC1B,QAOX3J,QAAQC,IAAI,uBAAwBoF,GAEpCgF,EAAsB3E,MAAK,SAAC8E,GACV,MAAXnF,GAA6B,kBAAXA,GAA4BH,EAAS,UAAW,IACtD,WAAXG,GAAkC,uBAAXA,GAAiCH,EAAS,WAAYpF,EAAoB,aACtGkG,OAAM,SAACwE,GACNb,EAAyBa,OAWjC,OAFAxK,QAAQC,IAAI,sCAAuC2C,GAG/C,kBAACa,EAAeC,eAAhB,KACI,kBAAC,EAAD,MACA,6BAASf,GAAG,4BACR,2BAAOA,GAAG,uBACV,kBAAC,GAAD,OAC2B,IAArBJ,EAAMkI,WACF,kBAAC,EAAD,CACE7H,oBAAsBA,IAExB,kBAAC,GAAD,U,wQCxFnB,IAAI8H,GAAY,CACrBjG,gBAAiBd,IAAOC,QAAT,MAMjB+G,iBAAkBhH,IAAOC,QAAT,OCILgH,GAAO,WAAO,IAAD,EACY9D,mBAAS,IADrB,mBACZG,EADY,KACHC,EADG,KAGpBoB,qBAAU,WACN5H,EAAU6H,WAAU,SAACC,GAEjBtB,EAAWsB,QAEhB,IAMH,OACI,oCACI,kBAACU,EAAA,OAAD,KACI,0BAAMC,QAAQ,UACd,yCAAWlC,EAAX,iBAGJ,kBAAC,GAAD,CACI4D,UACI,kBAACH,GAAUjG,gBAAX,wBAEI,kBAAC,EAAD,WAfhBiE,YAAW,WACP9G,EAAe,WAChB,QAkBC,kBAAC,GAAD,QCxBDkJ,I,OAAU,SAACvI,GAAW,IACrBsI,EAActI,EAAdsI,UADoB,EAEA/D,mBAAS,IAFT,mBAEtBC,EAFsB,KAEdC,EAFc,OAGVF,mBAAS,iBAArBG,EAHsB,sBAIMH,mBAAS,IAJf,mBAIXiE,GAJW,aAKUjE,mBAAS,GALnB,mBAKTkE,GALS,aAMelE,mBAAS,IANxB,mBAMtBmE,EANsB,KAMRC,EANQ,KAwB5B,OAhBA5C,qBAAU,WACNtB,EAAUlF,KACVnB,EAAU4H,WAAU,SAAC4C,GAEjBH,EAAeG,EAAkB5E,aACjCwE,EAAaI,EAAkB3E,cAEnC3F,EAAU0H,WAAU,SAAC1G,GACjBqJ,EAAmBrJ,QAMxB,CAACkF,EAAQkE,IAGR,oCACI,kBAACnH,EAAaC,OAAd,KACI,kBAACD,EAAaE,cAAd,KACI,kBAACF,EAAaG,SAAd,KAAyBgD,GACxB4D,OCjDRO,GAAyB,CAClCjH,IAAK,CACDkH,YAAa,QACbC,UAAW,OACXC,WAAY,KAEhBvG,KAAM,CACFwG,MAAO,QACPC,OAAQ,OACRC,KAAM,OACNC,IAAK,SAGAC,GAAyB,CAClCzH,IAAK,CACDoH,WAAY,SACZD,UAAW,SAEftG,KAAM,CACFwG,MAAO,QACPC,OAAQ,OACRC,KAAM,MACNC,IAAK,UAGAE,GAA6B,CACtC1H,IAAK,CACDoH,WAAY,SACZD,UAAW,QAEftG,KAAM,CACFuG,WAAY,IACZD,UAAW,Q,kqFC3BT3H,IAAOC,QAAT,MAKSD,IAAOC,QAAT,MAMHD,IAAOC,QAAT,MAYSD,IAAOC,QAAT,MAxBV,IAgCIkI,GAAiB,CAC1BrH,gBAAiBd,IAAOC,QAAT,MAMfmI,kBAAmBpI,IAAOC,QAAT,MAKjBoI,kBAAmBrI,IAAOC,QAAT,MAKjBqI,4BAA6BtI,IAAOY,EAAT,MAY3B2H,4BAA6BvI,IAAOwI,MAAT,MAU3BC,kBAAmBzI,IAAOC,QAAT,MAMjByI,kBAAmB1I,IAAOC,QAAT,MAMjB0I,cAAe3I,IAAOY,EAAT,MAQbgI,QAAS5I,IAAOC,QAAT,OCpFE4I,GAAY,SAACjK,GAAW,IACxBwE,EAA+GxE,EAA/GwE,OAAQ0F,EAAuGlK,EAAvGkK,iBAAkBC,EAAqFnK,EAArFmK,gBAAiBC,EAAoEpK,EAApEoK,YAAaC,EAAuDrK,EAAvDqK,WAAYC,EAA2CtK,EAA3CsK,QAASC,EAAkCvK,EAAlCuK,OAAQC,EAA0BxK,EAA1BwK,YAAaC,EAAazK,EAAbyK,UAEzG,OACI,kBAAClB,GAAerH,gBAAhB,KACI,kBAACqH,GAAeC,kBAAhB,KACI,kBAACD,GAAeG,4BAAhB,wBACA,kBAACH,GAAeI,4BAAhB,CAA4C5I,KAAK,OAAOgG,SAAWmD,EAAmB1D,MAAQ4D,EAAcpD,YAAY,SAE5H,kBAACuC,GAAeE,kBAAhB,KACI,kBAACF,GAAeG,4BAAhB,oBACA,kBAACH,GAAeI,4BAAhB,CAA4C5I,KAAK,OAAOgG,SAAWoD,EAAkB3D,MAAQ6D,EAAarD,YAAY,SAG1H,kBAACuC,GAAeM,kBAAhB,KACI,kBAAC,EAAD,CACIvH,MAAQuG,GACRtG,KAAO,WACPC,QAAU8H,EACVlK,GAAK,UAIb,kBAACmJ,GAAeO,kBAAhB,KACI,kBAACP,GAAeQ,cAAhB,KACsB,MAAhBS,GACqB,OAAhBJ,GAAuC,OAAfC,EACrBI,EACJ,MAGV,kBAAClB,GAAeS,QAAhB,KACI,kBAAC,IAAD,CAAMnD,GAAKrC,EAASpH,EAAoBoF,QAAU+H,EAASnK,GAAG,OAA9D,kC,OC7BpB3C,QAAQC,IAAIU,EAAUoI,O,OAEf,ICFIkE,GAAU,SAAC1K,GAAW,IAAD,EACAuE,mBAAS,IADT,mBACtBC,EADsB,KACdC,EADc,OAEEF,mBAAS,IAFX,mBAEtBG,EAFsB,KAEbC,EAFa,OAGaJ,mBAAS,IAHtB,gCAKYA,mBAAS,KALrB,mBAKRoG,GALQ,aAMKpG,mBAAS,IANd,mBAMZqG,GANY,aAOErG,mBAAS,IAPX,mBAObsG,GAPa,WAS5B9E,qBAAU,WACNtB,EAAUlF,KACVpB,EAAU6H,WAAU,SAACC,GAEjBtB,EAAWsB,QAEhB,IACH,IAAIG,EAAc,SAACC,GAGf,IAAItF,EAAOsF,EAAEC,OACTC,EAAWxF,EAAKyF,MACbC,EAAW1F,EAAX0F,QAIc,aAAjBA,EAAQ1F,MAAqB4J,EAAgBpE,GAC5B,aAAjBE,EAAQ1F,MAAqB6J,EAAYrE,GACxB,YAAjBE,EAAQ1F,MAAoB8J,EAAWtE,IAG1CuE,EAAc,SAACzE,GACEA,EAAEC,OAAOlG,GAS3BsD,EAAU,UAAW,gBAIzB,OACI,oCACI,kBAACiD,EAAA,OAAD,KACI,0BAAMC,QAAQ,UACd,yCAAWlC,EAAX,mBAEJ,6BAASxE,UAAU,6BACf,yBAAKA,UAAU,2BACX,2BAAOa,KAAK,SAASb,UAAU,uBAAuBsG,MAAM,KAC5D,kBAAC,IAAD,CAAMK,GAAKrC,EAAStE,UAAU,+BAC1B,uBAAGA,UAAU,0BAAb,aAIZ,6BAASA,UAAU,yBACf,8BACI,6BACI,2BAAOE,GAAG,gBAAV,aACA,2BAAOW,KAAK,OAAOX,GAAG,eAAe0G,YAAU,WAAWC,SAAWX,EAAcY,YAAY,WAEnG,6BACI,2BAAO5G,GAAG,YAAV,mBACA,2BAAOW,KAAK,OAAOX,GAAG,WAAW0G,YAAU,WAAWC,SAAWX,EAAcY,YAAY,WAE/F,6BACI,2BAAO5G,GAAG,WAAV,eACA,2BAAOW,KAAK,OAAOX,GAAG,UAAU0G,YAAU,UAAUC,SAAWX,EAAcY,YAAY,WAE7F,6BACI,2BAAOjG,KAAK,SAASb,UAAU,0BAA0BsG,MAAM,GAAGhE,QAAUsI,EAAc1K,GAAG,UAC7F,kBAAC,IAAD,CAAMyG,GAAKrC,EAAStE,UAAU,+BAC1B,uBAAGA,UAAU,yBAAyBsC,QAAUsI,EAAc1K,GAAG,SAAjE,oBCjEjB2K,GAAW,WAAO,IAAD,EACIxG,mBAAS,IADb,mBAClBC,EADkB,KACVC,EADU,OAEMF,mBAAS,IAFf,mBAElBG,EAFkB,KAETC,EAFS,OAGUJ,mBAAS,IAHnB,mBAGlBkG,EAHkB,KAGPjC,EAHO,OAIcjE,mBAAS,GAJvB,mBAIlBiG,EAJkB,KAIL/B,EAJK,OAKmBlE,mBAAS,IAL5B,mBAKhB6F,EALgB,KAKHY,EALG,OAMiBzG,mBAAS,IAN1B,mBAMhB8F,EANgB,KAMJY,EANI,OAOuB1G,mBAAS,QAPhC,mBAOlB2G,EAPkB,UASxBnF,qBAAU,WAYN,OAXAtB,EAAUlF,KAEVpB,EAAU6H,WAAU,SAACC,GAEjBtB,EAAWsB,MAEf7H,EAAU4H,WAAU,SAACmF,GAEjB1C,EAAe0C,EAA2BnH,aAC1CwE,EAAa2C,EAA2BlH,cAEtB,MAAnBiH,EAA+B,kBAAC,IAAD,CAAUrE,GAAG,MACzB,YAAnBqE,EAAqC,kBAAC,IAAD,CAAUrE,GAAG,eAArD,IAED,IAiCH,OACI,oCACI,kBAACF,EAAA,OAAD,KACI,0BAAMC,QAAQ,UACd,yCAAWlC,EAAX,iBAEJ,kBAAC,GAAD,CACI4D,UACI,kBAAC,GAAD,CACI9D,OAAQA,EACR0F,iBAzCG,SAAC7D,GACpB,IAAI+E,EAAiB/E,EAAEC,OAAOE,MAG9BwE,EAAkBI,IAsCFhB,YAAaA,EACbD,gBApCE,SAAC9D,GACnB,IAAIgF,EAAgBhF,EAAEC,OAAOE,MAE7ByE,EAAiBI,IAkCDhB,WAAYA,EACZC,QAhCN,SAACjE,GACX,IAEIiF,EAAcjF,EAAEC,OAAOlG,GAC3B3C,QAAQC,IAAI,yBAA0B4N,GAOtC5H,EAAU4H,EAFQ,CAACC,SAAUnB,EAAaoB,aAAcnB,IAGxDhL,EAAeiM,IAqBCf,OAlBP,aAmBOC,YAAaA,EACbC,UAAWA,MAIvB,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAMlH,EAAQmH,UAAYzE,KACvC,kBAAC,IAAD,CAAOuE,OAAK,EAACC,KAAOlH,EAASpH,EAAoBuO,UAAYjB,OC/E9DkB,GAAU,SAAC5L,GAAW,IAAD,EACAuE,mBAAS,IADT,mBACdE,GADc,aAEaF,mBAAS,IAFtB,mBAEtBK,EAFsB,KAETC,EAFS,OAGEN,mBAAS,IAHX,mBAGtBG,EAHsB,KAGbC,EAHa,OAIOJ,oBAAS,GAJhB,mBAItB2D,EAJsB,KAIV2D,EAJU,KAM5B9F,qBAAU,WACNI,YAAW,WACPxH,MACD,KACH8F,EAAUlF,KACVpB,EAAU6H,WAAU,SAACC,GAEjBtB,EAAWsB,MAEfhI,EAAqB+H,WAAU,SAACE,GAC5BrB,EAAkBqB,QAEvB,IACH,IASI4F,EAAe,SAACzF,GAEEA,EAAEC,OAAOlG,GAC3ByL,GAAa,IAEjB,OACI,oCACI,kBAAClF,EAAA,OAAD,KACI,0BAAMC,QAAQ,UACd,yCAAWlC,EAAX,iBAEJ,kBAAC,GAAD,CACI4D,UACI,oCACI,kBAACrG,EAAaC,gBAAd,KACsB,KAAhB0C,EACI,2DACuB,kBAAC,EAAD,OAF5B,0BAIsBA,IAG3B,kBAAC3C,EAAaG,uBAAd,KACI,kBAAC,EAAD,CACIE,MAAQ+G,GACR9G,KAAO,WACPC,QAnCZ,SAAC6D,GAEb,IAAIiF,EAAcjF,EAAEC,OAAOlG,GAC3B3C,QAAQC,IAAI,2BAA4B4N,GACxCjM,EAAeiM,GAEf/M,EAAmBZ,OAAOC,aAAamO,UA8Bf3L,GAAK,QAGI,IAAf8H,EACM,kBAAC,EAAD,CACI5F,MAAQgH,GACR/G,KAAO,gBACPC,QAAUsJ,EACV1L,GAAK,eAET,kBAAC,EAAD,CACIkC,MAAQgH,GACR/G,KAAO,eACPC,QAAUsJ,EACV1L,GAAK,cAQ7B,kBAAC,GAAD,CACI8H,WAAaA,OtB9CtB,SAAwBjC,GACxBA,GAAU9H,EAAUS,KAAKqH,GuB1ChC+F,CAAe,iBAEf,IA6BeC,GA7BD,WAAO,IAAD,EACU1H,mBAAS,IADnB,mBACZC,EADY,KACJC,EADI,OAE6BF,mBAAS,IAFtC,mBAEZ2G,EAFY,KAEIgB,EAFJ,KAgBlB,OAbAzO,QAAQC,IAAI,4BAA6BwN,GAEzCnF,qBAAU,WACRzH,EAAU0H,WAAU,SAAC1G,GACnB4M,EAAqB5M,MAEvBmF,EAAUlF,OAEV,CAAC2L,IACHzN,QAAQC,IAAI,oBAAqB8G,GACjC/G,QAAQC,IAAI,4BAA6BwN,GACzCzN,QAAQC,IAAI,sCAAuC8G,EAASpH,GAG1D,kBAAC,IAAD,CAAY+O,SAAS,KAClBjB,IAAmB9N,GAAsB,kBAAC,IAAD,CAAUyJ,GAAE,MACrDqE,IAAmB9N,GAAmB,kBAAC,IAAD,CAAUyJ,GAAE,WAAOzJ,KACzD8N,IAAmB9N,GAAmB,kBAAC,IAAD,CAAUyJ,GAAE,WAAQzJ,KAE3D,kBAAC,IAAD,CAAOqO,OAAK,EAACC,KAAOlH,EAASmH,UAAYZ,KACzC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAOlH,EAASpH,EAAiBuO,UAAYtD,KAC1D,kBAAC,IAAD,CAAOoD,OAAK,EAACC,KAAOlH,EAASpH,EAAkBuO,UAAYC,OC7B7CQ,QACW,cAA7BzO,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAAS0M,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzJ,MAAK,SAAA0J,GACjCA,EAAaC,kB","file":"static/js/main.79ad1222.chunk.js","sourcesContent":["export const routeName = {\r\n    mainPage: '/',\r\n    userReg: 'UserReg',\r\n    auth: 'Auth',\r\n    login: 'Login',\r\n  };","let jwt = require('jsonwebtoken');\r\n\r\nexport let getTokenData = (token, inlogData) => {\r\n    console.log(\"getTokenData -> token\", token)\r\n    let tokenData = jwt.verify( token, 'inlogSecretKey', (error, token) => token);\r\n    if (inlogData === 'fullName') return tokenData.loginName;\r\n}\r\n","export let LocalStorageObj =  {\r\n    logedInState: false,\r\n    fullName: ''\r\n};\r\n\r\nexport function getLocalStorageData(getData){\r\n    console.log(\"getLocalStorageData -> window.localStorage.length\", window.localStorage)\r\n    // Run if a data i saved into the localstorage else no run\r\n    getData = JSON.parse(window.localStorage.getItem(\"loginData\")).token;\r\n    console.log(\"getLocalStorageData -> getData\", getData)\r\n    \r\n    return getData;\r\n}","import {BehaviorSubject} from \"rxjs\";\r\n\r\nimport {getTokenData} from './CommonFunctions';\r\nimport {getLocalStorageData} from './Data/LocalStorage';\r\nlet headName = '';\r\nlet inlogedUserFullName = '';\r\nlet userData = '';\r\nlet incommingSQLDataArr = [];\r\nlet gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const userData$ = new BehaviorSubject(userData);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\n\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\n\r\nexport const LocalStorage$ = new BehaviorSubject('');\r\n\r\n/* The functions are triggered in another place and send in its data\r\nThe incomming data is stored in a new object and the object is then, in the last function, save too localstorage \r\n*/\r\nexport function updateUserData(loginData){\r\n    updateLocalstorage(loginData);\r\n    if(loginData) {\r\n        userData$.next(loginData);\r\n    }\r\n}\r\nexport let updateLocalstorage = (saveLoginData) =>{\r\n    localStorage.setItem('loginData', JSON.stringify(saveLoginData));\r\n}\r\n\r\n\r\n\r\n\r\nexport function getLogStatus(){\r\n    // Run if a data i saved into the localstorage else no run\r\n    if (window.localStorage.length !== 0) {\r\n        \r\n        let getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n        let getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n        \r\n        let logInStatus = {\r\n            type: getStatusType,\r\n            mess: getLogInMess\r\n        };\r\n        //;\r\n        \r\n        return logInStatus;\r\n    }\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    if (updateInlogedUserFullName) inlogedUserFullName$.next(getTokenData(getLocalStorageData('token'), 'fullName'));\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    \r\n    if(incommingSQLDataArr) {\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\nexport function updateGotoPage(gotoPage){\r\nconsole.log(\"updateGotoPage -> gotoPage\", gotoPage)\r\n    \r\n    if(gotoPage) {\r\n        gotoPage$.next(gotoPage);\r\n    }\r\n    return gotoPage;\r\n}\r\n\r\n","export let localPubAppUrls = () => {\r\n  let correctDomain = '';\r\n\r\n  let domainHostname = window.location.hostname;\r\n  let appUrlHostname = window.location.hash.split('')[1];\r\n  console.log(\"localPubAppUrls -> appUrlDomain\", domainHostname)\r\n  console.log(\"localPubAppUrl -> appUrlHostname\", appUrlHostname);\r\n  \r\n  // Check if in local or pub mode \r\n  if (domainHostname === 'localhost' || domainHostname === 'fredrikhj.github.io') correctDomain = '/'; \r\n \r\n  return correctDomain;\r\n}\r\nexport let correctRoutes = () => {\r\n  let correctRouteName = '';\r\n  //let appUrlHostname = window.location.hostname;\r\n  let routeName = window.location.pathname;\r\n  console.log(\"runAppUrls -> appUrl\", routeName)\r\n\r\n\r\n  \r\n  ////console.log(appUrl.pathname.split('/')[1]);\r\n  \r\n  // Check if ther is any components that can be reuse\r\n  //if(appUrl.pathname.split('/')[1] === 'LogIn') localPubUrl = appUrl.pathname.split('/')[1];\r\n  \r\n  // Check if in dev or pub mode´; \r\n/*   if (appUrlHostname === 'localhost') correctRouteName = routeName;\r\n  if (appUrlHostname === 'fredrikhj.github.io') correctRouteName = `/ScheduleApp${routeName}`;\r\n */ \r\n  return routeName;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../Style/Spinner.scss';\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n            { props.str } <span className=\"spinner spinner-dark\"></span>\r\n        </>\r\n    );\r\n}\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Spinner from '../Data/Spinner.js';\r\n\r\nexport let SQLTable = (props) => {\r\n    return(\r\n        <>\r\n            <tbody id=\"tableSchedule__tBody\">\r\n                {(props.incommingNewSQLData.length !== 0) \r\n                    ?\r\n                    props.incommingNewSQLData.map((sqlDataObj, rowCounter) => {\r\n                        \r\n                        return(\r\n                            <tr key={ rowCounter }>\r\n                                <td>{ sqlDataObj.date }</td>\r\n                                <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                <td>{ sqlDataObj.state }</td>\r\n                                <td>{ sqlDataObj.concerned }</td>\r\n                                <td>{ sqlDataObj.type }</td>\r\n                                <td>{ sqlDataObj.place }</td>\r\n                                <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                            </tr>\r\n                        );\r\n                    })\r\n                :   \r\n                    <>\r\n                        <tr><td>\r\n                            <Spinner str={'Tabellen laddas'}/>\r\n                        </td></tr>\r\n                    </>\r\n                }\r\n            </tbody>\r\n        </>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== GenerallyStyle ==============================\r\nconst commonColorBlue =  'rgb(68, 68, 223)';\r\nexport let GenerallyStyle = {\r\n  body__contents: styled.section`\r\n    width: 1024px;\r\n    margin-left: calc(50% - 512px);\r\n  `,\r\n  askMarkMove: styled.section`\r\n    float: right;\r\n    margin-top: -7px;\r\n  `,\r\n}\r\n// ============================== Headbar ==============================\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: -39px 0px 0px -5px;\r\n    `,\r\n  headContainer: styled.section`\r\n    width: 1400px;\r\n    height: 103px;\r\n    margin-left: calc(50% - 700px);\r\n    background: #FFFFFF;\r\n  `,\r\n  headline: styled.section`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 32px;\r\n    margin-top: 46px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    line-height: 80px;\r\n    color: #AE0B05;\r\n  `,\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== Common Style ==============================\r\nexport let CommonBtnStyle = {\r\n    btn: styled.button`\r\n        width: 141px;\r\n        height: 39px;\r\n        background: #AE0B05;\r\n        border-radius: 4px;\r\n    `,\r\n}\r\nexport let CommonTexStyle = {\r\n    btnHeadline: styled.p`\r\n        display: inline-block;\r\n        position: relative;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        font-family: Roboto;\r\n        font-style: normal;\r\n        font-weight: normal;\r\n        font-size: 16px;\r\n        color: white;\r\n    `,\r\n}","import styled from 'styled-components';\r\nimport { CommonBtnStyle } from './CommonStyle';\r\n\r\n// ============================== Already logedIn ==============================\r\nexport let LogedInStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    margin-left: 820px;\r\n    margin-top: -8px;\r\n  `,\r\n  logedInUser: styled.section`\r\n    border: 1px solid red;\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-left: 51px;\r\n    `,\r\n  btnSubmitLogoutInTopUp: styled.section`\r\n    margin-top: -10px;\r\n  `,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { CommonBtnStyle, CommonTexStyle } from '../Style/CommonStyle';\r\n\r\nexport let SubmitBtn = (props) => {\r\n    const { style, name, onClick, id } = props;\r\n    return(\r\n        <>\r\n            <CommonBtnStyle.btn id={ id } onClick={ onClick } style={ style.btn }>\r\n                <CommonTexStyle.btnHeadline id={ id } onClick={ onClick } style={ style.text }>{ name }</CommonTexStyle.btnHeadline>\r\n            </CommonBtnStyle.btn> \r\n        </>\r\n    );\r\n}","import axios from 'axios';\r\nimport { updateSavedSQLData, updateUserData, updateGotoPage } from '../Storage.js';\r\nimport { setTimeout } from 'timers';\r\nimport { log } from 'util';\r\n\r\nlet savedSQLDataArr = [];\r\n\r\n//let backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Heroku Backend\r\nlet backendURL = 'http://localhost:3001'; // Local Backend \r\n\r\nexport let axiosGet = (getType, tokenStr) => {\r\n    console.log(\"axiosGet -> getType\", getType)\r\n        let routes = '';\r\n\r\n    // Type of post method\r\n    if (getType === 'default') routes = '/SQLData';\r\n    if (getType === 'userSpec') routes = `/SQLData/${ 'fredde' }`;\r\n    \r\n    \r\n    // Get the user inloged User and send into the backend for getting the correct user records \r\n     \r\n    axios.get(backendURL + routes, {headers: {Authorization: `bearer ${tokenStr}`}}).then(response => {\r\n    console.log(\"axiosGet -> response\", response)\r\n        let incommingSQLRes = []\r\n        /* Store the incomming API data in a variables - \r\n        Note that the data structure deppending on the conditions\r\n        */\r\n        if (response.status === 200 && getType === 'default') incommingSQLRes = response.data[0];\r\n        if (response.status === 200 && getType === 'userSpec') incommingSQLRes = response.data[0];\r\n         //;\r\n        /*  If incomming status of 200 = OK\r\n            Data i push into a arry too  Storage\r\n            The array is holding the data until the webbbrowser is closed \r\n          \r\n        Default get\r\n        */\r\n          updateSavedSQLData(incommingSQLRes);\r\n        \r\n        /*  If incomming status of 201 = Created:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        */\r\n        if (response.status === 201) {\r\n            \r\n            savedSQLDataArr[0].push(incommingSQLRes[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n        else{\r\n        }\r\n    }).\r\n    catch(error => {\r\n        ////;\r\n    });\r\n}\r\nlet getUserId = () => {\r\n    let getUserId = JSON.parse(window.localStorage.getItem(\"userData\")).userId;\r\n    return getUserId;\r\n}\r\nexport let axiosPost = (postType, bodyData) => {  \r\n    console.log(\"axiosPost -> bodyData\", bodyData)\r\n    //;\r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    ////;\r\n    // Type of post method\r\n    if (postType === 'Auth') type = 'Auth';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    if (postType === 'userReg') type = 'UserReg';\r\n    \r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).then(response => {\r\n            console.log(\"axiosPost -> response\", response)\r\n            if (postType === 'Auth'){\r\n                // Incomming userdata. T\r\n                \r\n                let logedInUserInfoObj = {\r\n                    responsType: response.status,\r\n                    logInMess: response.statusText, \r\n                    token: response.data,\r\n                    //getTokenData(response.data),\r\n                };\r\n                //;\r\n                \r\n                //Send the incomming data for displaying the user login status\r\n                updateUserData(logedInUserInfoObj);\r\n\r\n                if (response.status === 200) updateGotoPage(postType);\r\n            }\r\n        }).catch(error => {\r\n            ////;\r\n        });\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../Storage.js';\r\nimport '../Style/SearchBar.css';\r\n\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <section className=\"searchBar__searchContainer\">\r\n                Komande sökfunktion!!!\r\n            {/* <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n            </button> */}\r\n\r\n        </section>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../Style/SQLTable.css';\r\nexport let TableHead = () => {\r\n    return(\r\n        <thead>\r\n            <tr>\r\n                <th>Datum</th>\r\n                <th className=\"tableCol4\">Akitvitet</th>\r\n                <th>Status</th>\r\n                <th>Berörda</th>\r\n                <th>Typ</th>\r\n                <th>Plats</th>\r\n                <th className=\"tableCol9\">Innehåll</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\n\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$, incommingSQLDataArr$ } from '../Storage.js';\r\nimport '../Style/FormAdd.css';\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\nimport { SQLTable } from './SQLTable';\r\n\r\nexport let AddRecords = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ incommingSQLDataResponse, updateIncommingSQLDataResponse ] = useState('');\r\n    let [ incommingSQLData, updateIncommingSQLData ] = useState([]);\r\n\r\n    let [ addedData, updateAddedData ] = useState(false);\r\n    let [ quantityOfSqlPosts, updateQuantityOfSqlPosts ] = useState(0);\r\n    let [ incommingSQLDataCols, updateIncommingSQLDataCols ] = useState([]);\r\n\r\n    let [ dateStr, updateDateStr ] = useState('');\r\n    let [ activityStr, updateActivityStr ] = useState('');\r\n    let [ stateStr, updateStateStr ] = useState('');\r\n    let [ concernedStr, updateConcernedStr ] = useState('');\r\n    let [ typeStr, updateTypeStr ] = useState('');\r\n    let [ placeStr, updatePlaceStr ] = useState('');\r\n    let [ contentStr, updateContentStr ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        axiosGet('userSpec');\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {\r\n            //console.log(inlogedUserFullName);\r\n            updateInlogedUser(inlogedUserFullName);\r\n        });\r\n        incommingSQLDataArr$.subscribe((incommingSQLDataArr) => {\r\n            //console.log(incommingSQLDataArr);\r\n            if (incommingSQLDataArr.status === 200) updateIncommingSQLData(incommingSQLDataArr.data[0])\r\n        });\r\n        /*\r\n            Update the inloged User after the specific time i millisec...\r\n            Use the name afte a extra millisec...\r\n        */\r\n        setTimeout(() => {\r\n            updateInlogedUserFullName(); \r\n        }, 1000);\r\n    }, []);\r\n    //console.log(incommingSQLData);  \r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n\r\n        if (dataset.type === 'date') updateDateStr(inputStr);\r\n        if (dataset.type === 'activity') updateActivityStr(inputStr);\r\n        if (dataset.type === 'state') updateStateStr(inputStr);\r\n        if (dataset.type === 'concerned') updateConcernedStr(inputStr);\r\n        if (dataset.type === 'type') updateTypeStr(inputStr);\r\n        if (dataset.type === 'place') updatePlaceStr(inputStr);\r\n        if (dataset.type === 'content') updateContentStr(inputStr);\r\n    }\r\n\r\n//console.log(incommingSQLDataCols);\r\n\r\n    let sendInUserData = (e) => {\r\n        updateAddedData(true);\r\n        //console.log(dateStr);\r\n        // Created a body for the added data\r\n        let sqlBody = [0, dateStr, activityStr, stateStr, concernedStr, typeStr, placeStr, contentStr];\r\n        \r\n        //console.log(sqlBody);\r\n        \r\n        axiosPost('add', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n            \r\n        /* //console.log(sqlBodyObj);\r\n        updateSavedSQLData(sqlBodyObj); */\r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Lägg Till`}</title>\r\n            </Helmet>\r\n            <header>\r\n                <section className=\"headbar__headContainer\">\r\n                    <p className=\"headContainer__headline\">{ appName }</p>\r\n                    <section className=\"headContainer__logInOut\">\r\n\r\n                        <p className=\"logInOut__logedInUser\">{`Välkommen in ${(inlogedUser === '') ? '...' : inlogedUser }` }</p>       \r\n\r\n                        <section className=\"logInOut__btnInContainer\">\r\n                            <div className=\"btnContainer__btnAddCanceled\">\r\n                                <input type=\"submit\" className=\"btnLogOut__input\" onClick={ '' } id=\"cancelAdd\" value=\"\"/>\r\n                                <Link to={`${ appUrl }/LogIn` }className=\"btnContainer__inputHeadline\" onClick={ '' } id=\"cancelAdd\">\r\n                                    <p className=\"btnHeadline__canceled\" id='cancelAdd'>Avbryt</p>\r\n                                </Link>\r\n                            </div>\r\n                        </section>\r\n                    </section>\r\n                </section>\r\n            </header>\r\n            <button className=\"btnAddedSendContainer__sendBtn\" onClick={ sendInUserData } id=\"sendIn\">\r\n                <p className=\"btnHeadline__sendIn\" id='sendIn' onClick={ sendInUserData }>Skicka In</p>\r\n            </button>  \r\n            <section className=\"formAdd__addContainer\">\r\n                <table className=\"addContainer__body\">\r\n                    <SQLTable/>\r\n                    <tbody className=\"addContainer__Tbody\">\r\n                        <tr>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"date\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol4\"><input type=\"text\" className=\"addSqlInput\" data-type=\"activity\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"state\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"concerned\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"type\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td><input type=\"text\" className=\"addSqlInput\" data-type=\"place\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                            <td className=\"tableCol9\"><input type=\"text\" className=\"addSqlInput\" data-type=\"content\" onChange={ setStrsType } placeholder=\"  ...\"/></td>\r\n                        </tr>\r\n                        <tr>\r\n                         {(incommingSQLData.length !== 0) \r\n                            ?\r\n                                incommingSQLData.map((sqlDataObj, rowCounter) => {\r\n                                    \r\n                                    return(\r\n                                        <tr key={ rowCounter }>\r\n                                            <td>{ sqlDataObj.date }</td>\r\n                                            <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                            <td>{ sqlDataObj.state }</td>\r\n                                            <td>{ sqlDataObj.concerned }</td>\r\n                                            <td>{ sqlDataObj.type }</td>\r\n                                            <td>{ sqlDataObj.place }</td>\r\n                                            <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            :   <tr><td><Spinner wait={ 'Datan laddas' }/></td></tr>\r\n                        }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {GenerallyStyle } from '../Style/MainStyle'\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { incommingSQLDataArr$ } from '../Storage.js';\r\nimport {getLocalStorageData} from '../Data/LocalStorage';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\n\r\nimport { axiosGet } from '../Data/Axios.js';\r\nimport { SearchBar } from './SearchBar.js';\r\nimport { correctRoutes } from '../Data/runAppUrls.js';\r\nimport { TableHead } from './TableHead';\r\nimport { AddRecords } from './FormAdd';\r\nimport { SQLTable } from './SQLTable';\r\nimport '../Style/SQLTable.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\nimport styled from 'styled-components';\r\n\r\nexport let HeadTable = (props) => {\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ erroLoadingSQLData, updateErroLoadingSQLData ] = useState(false);\r\n    let [ routes, updateRoutes ] = useState('');\r\n    const { tableHead, tableBody } = props;\r\n    \r\n    //const appUrl = \r\n    \r\n    let [ addForm, setAddForm ] = useState(true);\r\n    //;\r\n    let ifSQLData;\r\n    let countGetMethod = 1;\r\n    const {addRecordsBtn} = props;\r\n    console.log(addRecordsBtn);\r\n    \r\n    useEffect(() => {\r\n        updateRoutes(correctRoutes());\r\n        getSQLData();\r\n\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure \r\n            \r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n    },[routes]); \r\n    let getSQLData = () => {\r\n        \r\n        \r\n        let axiosUntilGettingData = new Promise((success, error) => {\r\n            if (countGetMethod === 1) {\r\n                success();\r\n                countGetMethod++;\r\n            }\r\n            if (countGetMethod === 2) {\r\n                setTimeout(() => {\r\n                    updateErroLoadingSQLData(true)\r\n                }, 1000);\r\n            }\r\n            //;\r\n            \r\n            //else error('Kunde inte ladda datan :(');\r\n        });\r\n        \r\n        console.log(\"getSQLData -> routes\", routes)\r\n        // Run default SQL list\r\n        axiosUntilGettingData.then((result) => {            \r\n            if(routes === '/' || routes === '/ScheduleApp/') axiosGet('default', '');\r\n            if (routes === '/Login' || routes === '/ScheduleApp/Login') axiosGet('userSpec', getLocalStorageData('token'));\r\n        }).catch((result) =>{\r\n            updateErroLoadingSQLData(result);\r\n        })\r\n    }\r\n    \r\n    let runAdmin = (e) => {\r\n        let targetBtn = e.target.dataset.admin;\r\n        if (targetBtn === 'logIn') setAddForm(true);\r\n        if (targetBtn === 'logOut') setAddForm(false);\r\n    }\r\n    console.log(\"HeadContents -> incommingNewSQLData\", incommingNewSQLData)\r\n\r\n    return (\r\n        <GenerallyStyle.body__contents>\r\n            <SearchBar/>\r\n            <section id=\"container__tableSchedule\">\r\n                <table id=\"tableSchedule__body\">\r\n                <TableHead/>\r\n                    {(props.addRecords !== true)\r\n                        ? <SQLTable\r\n                            incommingNewSQLData={ incommingNewSQLData }\r\n                          />\r\n                        : <AddRecords/>\r\n                    }\r\n                \r\n                </table>\r\n            </section>\r\n        </GenerallyStyle.body__contents>\r\n    );\r\n}","import styled from 'styled-components';\r\n\r\n// ============================== Auth ==============================\r\nexport let AuthStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex; nd;\r\n    margin-left: 820px;\r\n    margin-top: -8px;\r\n  `,\r\nlogInSpinnerMove: styled.section`\r\n    margin-left: 3px;\r\n  `,\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GenerallyStyle } from '../Style/MainStyle';\r\nimport { AuthStyle } from '../Style/AuthStyle';\r\n\r\nimport {Helmet} from \"react-helmet\";\r\nimport { headName$, gotoPage$, updateGotoPage } from '../Storage.js';\r\nimport Spinner from './Spinner.js';\r\nimport { Headbar } from '../Structure/Headbar.js';\r\nimport { HeadTable } from '../Structure/HeadTable';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport {axiosGet, axiosPost } from './Axios';\r\nimport { getLocalStorageData } from './LocalStorage';\r\nexport let Auth = () => {\r\n    const [ appName, setAppName ] = useState('');  \r\n    \r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        }); \r\n    }, []);\r\n    let runLogin = () => {\r\n        setTimeout(() => {\r\n            updateGotoPage('Login');\r\n        }, 500)\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n\r\n            <Headbar\r\n                appStatus={\r\n                    <AuthStyle.statusContainer>\r\n                        Du loggas in ...\r\n                        <Spinner/>\r\n                        {runLogin()}\r\n                    </AuthStyle.statusContainer>\r\n                }\r\n                /> \r\n            <HeadTable/>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GenerallyStyle, HeadbarStyle } from '../Style/MainStyle';\r\n\r\nimport { axiosPost } from '../Data/Axios.js';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { userData$, gotoPage$, getLogStatus } from '../Storage.js';\r\nimport { Auth } from '../Data/Authorization';\r\nimport { log } from 'util';\r\n\r\nimport { LogedIn } from '../../LogedIn.js';\r\n\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\n\r\nimport { nfapply } from 'q';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let Headbar = (props) => {\r\n    const { appStatus } = props;\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName ] = useState('Årsklockan');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    let [ gotoIntoPage, updateGotoIntoPage ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        userData$.subscribe((userDispalyingObj) => {\r\n            \r\n            setInlogStatus(userDispalyingObj.responsType);\r\n            setInlogMess(userDispalyingObj.logInMess);\r\n        });\r\n        gotoPage$.subscribe((gotoPage) => {\r\n            updateGotoIntoPage(gotoPage);\r\n        });\r\n\r\n        /*         let getGotoPage = JSON.parse(window.localStorage.getItem(\"appData\")).responsType;\r\n        updateGotoPage(getGotoPage);\r\n        */        //if (gotoPage === 'LogedOut') return <Redirect to={`${ appUrl }LogedOut`} />;\r\n    }, [appUrl, gotoIntoPage]);\r\n\r\n    return (\r\n        <>\r\n            <HeadbarStyle.header>\r\n                <HeadbarStyle.headContainer>\r\n                    <HeadbarStyle.headline>{ appName }</HeadbarStyle.headline>\r\n                    {appStatus}\r\n                </HeadbarStyle.headContainer> \r\n                    \r\n                    \r\n                    \r\n                    {/* <GenerallyStyle.askMarkMove><i className=\"material-icons\">contact_support</i></GenerallyStyle.askMarkMove> */}\r\n            </HeadbarStyle.header>\r\n        </>\r\n    );\r\n}","export const specificBtnLStyleLogin = {\r\n    btn: {\r\n        marginRight: '108px',\r\n        marginTop: '20px',\r\n        marginLeft: '0',\r\n    },\r\n    text: {\r\n        width: '133px',\r\n        height: '32px',\r\n        left: '-6px',\r\n        top: '-9px',\r\n    }\r\n}\r\nexport const specificBtnStyleLogout = {\r\n    btn: {\r\n        marginLeft: '1269px',\r\n        marginTop: '-25px',\r\n    },\r\n    text: {\r\n        width: '133px',\r\n        height: '32px',\r\n        left: '0px',\r\n        top: '-10px',\r\n    }\r\n}\r\nexport const specificBtnStyleAddRecords = {\r\n    btn: {\r\n        marginLeft: '1060px',\r\n        marginTop: '73px',\r\n    },\r\n    text: {\r\n        marginLeft: '0',\r\n        marginTop: '5px',\r\n    }\r\n}","import styled from 'styled-components';\r\nimport { CommonBtnStyle, CommonTexStyle} from './CommonStyle';\r\n\r\n// ============================== Headbar ==============================\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: -39px 0px 0px -5px;\r\n    `,\r\n  headContainer: styled.section`\r\n    width: 1400px;\r\n    height: 103px;\r\n    margin-left: calc(50% - 700px);\r\n    background: #FFFFFF;\r\n  `,\r\n  headline: styled.section`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 32px;\r\n    margin-top: 46px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    line-height: 80px;\r\n    color: #AE0B05;\r\n  `,\r\n  statusContainer: styled.section`\r\n    width: 706px;\r\n    height: 75px;\r\n    margin-left: 770px;\r\n    margin-top: -53px;\r\n  `,\r\n  }\r\n// ============================== LoginForm ==============================\r\nexport let LoginFormStyle = {\r\n  statusContainer: styled.section`\r\n    width: 706px;\r\n    height: 75px;\r\n    margin-left: 770px;\r\n    margin-top: -67px;\r\n`,\r\n  usernameContainer: styled.section`\r\n    margin-left: 10px;\r\n    margin-top: 30px;\r\n    margin-bottom: -25px;\r\n  `,\r\n  passwordContainer: styled.section`\r\n    margin-left: 256px;\r\n    margin-top: -69px;\r\n    margin-bottom: -25px;\r\n    `,\r\n  labelFormatUsernamePassword: styled.p`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 10px;\r\n    margin-bottom: -25px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 19px;\r\n    color: #000000;\r\n    `,\r\n  inputFormatUsernamePassword: styled.input`\r\n    width: 228px;\r\n    height: 29px;\r\n    margin-left: 0px;\r\n    margin-top: 0px;\r\n    background: #F5F5F5;\r\n    border: 1px solid #E5E5E5;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n  `,  \r\n  btnLoginContainer: styled.section`\r\n    width: 181px;\r\n    height: 80%;\r\n    margin-left: 499px;\r\n    margin-top: -55px;\r\n  `,\r\n  userInfoContainer: styled.section`\r\n    width: 377px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  `,\r\n  userErrorMess: styled.p`\r\n    margin-top: 14px;\r\n    margin-left: 18px;\r\n    width: 149px;\r\n    font-size: 13.5px;\r\n    color: #AE0B05;\r\n    font-weight: bold;\r\n  `,\r\n  regLink: styled.section`\r\n    margin-right: -50px;\r\n    margin-top: 10px;\r\n    width: 200px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n    text-align: center;\r\n    color: black;\r\n    font-size: 12px;\r\n  `,\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { HeadbarStyle } from '../Style/MainStyle';\r\nimport { LoginFormStyle } from '../Style/LoginFormStyle';\r\nimport { routeName } from '../Data/RouteNames';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { specificBtnLStyleLogin } from '../Style/SpecificStyleBtn';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { from } from 'rxjs';\r\n\r\nexport let LoginForm = (props) => {\r\n    const {appUrl, onChangeUserName, onChangeUserPwd, userNameStr, userPwdStr, runAuth, runReg, inlogStatus, inlogMess} = props;\r\n\r\n    return(\r\n        <LoginFormStyle.statusContainer>\r\n            <LoginFormStyle.usernameContainer>\r\n                <LoginFormStyle.labelFormatUsernamePassword>Användarnamn</LoginFormStyle.labelFormatUsernamePassword>\r\n                <LoginFormStyle.inputFormatUsernamePassword type=\"text\" onChange={ onChangeUserName } value={ userNameStr } placeholder=\"...\"/>\r\n            </LoginFormStyle.usernameContainer> \r\n            <LoginFormStyle.passwordContainer>\r\n                <LoginFormStyle.labelFormatUsernamePassword>Lösenord</LoginFormStyle.labelFormatUsernamePassword>\r\n                <LoginFormStyle.inputFormatUsernamePassword type=\"text\" onChange={ onChangeUserPwd } value={ userPwdStr } placeholder=\"...\"/>\r\n            </LoginFormStyle.passwordContainer>  \r\n\r\n            <LoginFormStyle.btnLoginContainer>\r\n                <SubmitBtn\r\n                    style={ specificBtnLStyleLogin }\r\n                    name={ 'Logga In' }\r\n                    onClick={ runAuth }\r\n                    id={ 'Auth' }\r\n                />\r\n            </LoginFormStyle.btnLoginContainer>\r\n            \r\n            <LoginFormStyle.userInfoContainer>\r\n                <LoginFormStyle.userErrorMess>\r\n                    {(inlogStatus === 203)\r\n                        ? (userNameStr === null && userPwdStr === null ) \r\n                            ? inlogMess : null\r\n                        : null\r\n                    }\r\n                </LoginFormStyle.userErrorMess>\r\n                <LoginFormStyle.regLink>\r\n                    <Link to={ appUrl + routeName.userReg } onClick={ runReg } id=\"reg\">\r\n                        Registrera ny användare\r\n                    </Link>\r\n                </LoginFormStyle.regLink>\r\n            </LoginFormStyle.userInfoContainer>\r\n        </LoginFormStyle.statusContainer>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateGotoPage, userData$, getLogStatus } from '../Storage.js';\r\nimport { formInputObj } from '../../MainPage.js';\r\nimport { axiosPost } from './Axios.js';\r\n\r\nimport '../Style/LogInOut.css';\r\nimport { localPubAppUrls } from './runAppUrls.js';\r\n\r\nimport { isArray } from 'util';\r\n\r\n/* export let updatedUserNameStr = ''\r\nexport let updatedUserPwdStr = ''; */\r\nconsole.log(userData$.value);\r\n\r\nexport let runLogInOut = (e) => {\r\n\r\n    let userInformation = {};\r\n    let targetBtn = e.target; \r\n    // Gets the element\r\n    let targetBtnId = targetBtn.id; \r\n    let targetBtnValue = targetBtn;\r\n    console.log(targetBtn);\r\n    // Things happen according to whare I click\r\n    if(targetBtnId === 'LogIn') {\r\n        \r\n        /* Validate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: formInputObj.userNameStr, userPassWord: formInputObj.userPwdStr}\r\n        console.log(userInformation);\r\n        \r\n        axiosPost('userValidate', userInformation);\r\n\r\n        // inkludera en promise så funktionen nedan väntar på att axios har data\r\n        let promiseRunGotoPage = new Promise((run, error) => {\r\n            console.log('promise running :)');\r\n            console.log(getLogStatus.type);\r\n            \r\n            if (getLogStatus.type === 200) {\r\n                \r\n                run();\r\n            }\r\n        });\r\n\r\n        promiseRunGotoPage.then(() => {\r\n            // Check if you are able loggin according to the incomming data\r\n            if (getLogStatus().type === 200){\r\n                console.log('klj');\r\n                \r\n                updateGotoPage(targetBtnId);\r\n                }\r\n            if (getLogStatus().type === 203) return;\r\n            //formInputObj = {};\r\n        });\r\n\r\n    }\r\n    if(targetBtnId === 'LogOut') {\r\n\r\n\r\n        \r\n        return <Redirect to={ localPubAppUrls() }/>;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport { headName$ } from '../Storage.js';\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\n\r\nimport '../Style/RegUser.css';\r\n\r\nlet countRegUser = 0;\r\n\r\nexport let RegUser = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState(''); \r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n\r\n    let [ userFullName, setUserFullName ] = useState('');\r\n    let [ userName, setUserName  ] = useState('');\r\n    let [ userPwd, setUserPWD ] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n    }, []);\r\n    let setStrsType = (e) => {\r\n        //console.log('nyh');\r\n        \r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n        //console.log(inputStr);\r\n        \r\n\r\n        if (dataset.type === 'fullName') setUserFullName(inputStr);\r\n        if (dataset.type === 'userName') setUserName(inputStr);\r\n        if (dataset.type === 'userPwd') setUserPWD(inputStr);\r\n    };\r\n\r\n     let sendUserReg = (e) => {\r\n        let targetBtnId = e.target.id; \r\n        // Created a body for the added data\r\n        let sqlBody = {\r\n            fullName: userFullName,\r\n            userName: userName,\r\n            userPassWord: userPwd\r\n        }\r\n        //console.log(sqlBody);\r\n        \r\n        axiosPost('userReg', 'targetBtnId', sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody.splice(0, 1);\r\n    };\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Registrera`}</title>\r\n            </Helmet>\r\n            <section className=\"logInOut__btnRegContainer\">\r\n                <div className=\"btnContainer__cancelReg\">\r\n                    <input type=\"submit\" className=\"btnLogOut__cancelReg\" value=\"\"/>\r\n                    <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                        <p className=\"btnHeadline__cancelReg\">Avbryt</p>\r\n                    </Link>\r\n                </div>\r\n            </section>\r\n            <section className=\"regUser__regContainer\">\r\n                <form>\r\n                    <div>\r\n                        <label id=\"userFullName\">Ditt Namn</label>\r\n                        <input type=\"text\" id=\"userFullName\" data-type=\"fullName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userName\">Användarnamn</label>\r\n                        <input type=\"text\" id=\"userName\" data-type=\"userName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userPwd\">Lösenord</label>\r\n                        <input type=\"text\" id=\"userPwd\" data-type=\"userPwd\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"submit\" className=\"regContainer__submitBtn\" value=\"\" onClick={ sendUserReg } id=\"login\"/>\r\n                        <Link to={ appUrl } className=\"btnContainer__inputHeadline\">\r\n                            <p className=\"regContainer__headline\" onClick={ sendUserReg } id=\"Login\">Registrera</p>\r\n                        </Link>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n     \r\n        </>  \r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nimport { routeName } from './Components/Data/RouteNames';\r\n\r\nimport { LoginForm } from './Components/Data/LoginForm'\r\nimport { HeadbarBtn } from './Components/Structure/HeadbarBtn';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { headName$, userData$, getLogStatus, updateGotoPage} from './Components/Storage.js';\r\nimport {axiosGet, axiosPost } from './Components/Data/Axios';\r\n\r\n\r\nimport { runLogInOut } from './Components/Data/LogInOut.js';\r\nimport { LogedIn } from './LogedIn.js';\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\n\r\nimport { Headbar } from './Components/Structure/Headbar.js';\r\nimport { HeadTable } from './Components/Structure/HeadTable';\r\nimport { RegUser } from './Components/Structure/RegUser';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let MainPage = () => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    const [ userNameStr, updateUserNameStr ] = useState('');\r\n    const [ userPwdStr, updateUserPwdStr ] = useState('');\r\n    let [ redirectToPage, updateRedirectToPage ] = useState('Auth');\r\n\r\n    useEffect(() => {\r\n        setAppUrl(localPubAppUrls());\r\n        //console.log('ecsfv');\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        userData$.subscribe((returningUserDispalyingObj) => {\r\n            //console.log(returningUserDispalyingObj);\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n        if(redirectToPage === '/') return <Redirect to='/' />\r\n        if(redirectToPage === 'RegUser') return <Redirect to='/Auth' />\r\n        \r\n    }, []);\r\n    //console.log(inlogStatus);\r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        //;\r\n        \r\n        updateUserNameStr(targetUserName);\r\n        //formInputObj['userNameStr'] = targetUserName;\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        //;\r\n        updateUserPwdStr(targetUserPwd);\r\n        //formInputObj['userPwdStr'] = targetUserPwd;\r\n    }\r\n    let runAuth = (e) => {\r\n        let userInformation = {};\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n        console.log(\"runAuth -> targetBtnId\", targetBtnId)\r\n  \r\n        /* Authorization with a token as response backValidate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: userNameStr, userPassWord: userPwdStr}\r\n        \r\n        axiosPost(targetBtnId, userInformation);    \r\n        updateGotoPage(targetBtnId);\r\n        //if (inlogStatus === 203) return; \r\n    }\r\n    let runReg = () =>{\r\n\r\n    }    \r\n    return (\r\n        <>  \r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LoginForm\r\n                        appUrl={appUrl}\r\n                        onChangeUserName={onChangeUserName}\r\n                        userNameStr={userNameStr}\r\n                        onChangeUserPwd={onChangeUserPwd}\r\n                        userPwdStr={userPwdStr}\r\n                        runAuth={runAuth}\r\n                        runReg={runReg}\r\n                        inlogStatus={inlogStatus}\r\n                        inlogMess={inlogMess}\r\n                    />\r\n                }\r\n            />\r\n            <Route exact path={appUrl} component={ HeadTable }/>\r\n            <Route exact path={ appUrl + routeName.userReg } component={ RegUser }/>   \r\n\r\n        </>\r\n\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { HeadbarStyle } from './Components/Style/MainStyle';\r\nimport { LogedInStyle } from './Components/Style/LogedInStyle';\r\nimport { GenerallyStyle } from './Components/Style/MainStyle'\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport './Components/Style/Spinner.scss';\r\n\r\nimport { HeadTable } from './Components/Structure/HeadTable';\r\nimport { axiosPost } from './Components/Data/Axios';\r\nimport { Headbar } from './Components/Structure/Headbar';\r\nimport Spinner from './Components/Data/Spinner';\r\nimport { SubmitBtn } from './Components/Data/SubmitBtn';\r\nimport { specificBtnStyleLogout, specificBtnStyleAddRecords } from './Components/Style/SpecificStyleBtn';\r\n\r\nimport { MainPage } from './MainPage.js';\r\nimport axios from 'axios';\r\nimport { headName$, updateInlogedUserFullName, updateLocalstorage, inlogedUserFullName$, updateGotoPage } from './Components/Storage.js';\r\n\r\nimport { log } from 'util';\r\n\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\n\r\nexport let LogedIn = (props) => {\r\n    let [ appUrl, setAppUrl ] = useState('');\r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ addRecords, seAddRecords ] = useState(false);   \r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        }, 1000);\r\n        setAppUrl(localPubAppUrls());\r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {         \r\n            updateInlogedUser(inlogedUserFullName);\r\n        }); \r\n    }, []);\r\n    let runLogOut = (e) => {\r\n        // Gets the element\r\n        let targetBtnId = e.target.id;     \r\n        console.log(\"runLogOut -> targetBtnId\", targetBtnId)\r\n        updateGotoPage(targetBtnId);\r\n\r\n        updateLocalstorage(window.localStorage.clear());\r\n        //axiosPost('', targetBtnId, '');\r\n    }\r\n    let runAddRecord = (e) => {\r\n        // Gets the element\r\n        let targetBtnId = e.target.id;     \r\n        seAddRecords(true);\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Inloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={\r\n                    <>\r\n                        <LogedInStyle.statusContainer>\r\n                            {(inlogedUser === '' ) \r\n                                ? <>\r\n                                        Välkommen in ... <Spinner/>\r\n                                    </>\r\n                                : `Välkommen in ${ inlogedUser }`\r\n                            }\r\n                        </LogedInStyle.statusContainer>\r\n                        <LogedInStyle.btnSubmitLogoutInTopUp>\r\n                            <SubmitBtn\r\n                                style={ specificBtnStyleLogout }\r\n                                name={ 'Logga Ut' }\r\n                                onClick={ runLogOut }\r\n                                id={ '/' }\r\n                            />\r\n                        </LogedInStyle.btnSubmitLogoutInTopUp> \r\n                        {(addRecords !== true)\r\n                            ?   <SubmitBtn\r\n                                    style={ specificBtnStyleAddRecords }\r\n                                    name={ 'Lägga Till' }\r\n                                    onClick={ runAddRecord }\r\n                                    id={ 'AddRecords' }\r\n                                />\r\n                            :   <SubmitBtn\r\n                                    style={ specificBtnStyleAddRecords }\r\n                                    name={ 'Återgå' }\r\n                                    onClick={ runAddRecord }\r\n                                    id={ 'Return' }\r\n                                />\r\n                        }\r\n\r\n                    </>\r\n                }\r\n            />\r\n\r\n            <HeadTable\r\n                addRecords={ addRecords }\r\n            />\r\n        </>\r\n    );\r\n}\r\n/* <div className=\"btnContainer__btnAdd\">\r\n    <input type=\"submit\" className=\"btnLogOut__input\" onClick={ MainPage.runLogInOut } id=\"add\" value=\"\"/>\r\n    <Link to={ `${ appUrl }/Add`} className=\"btnContainer__inputHeadline\" onClick={ MainPage.runLogInOut } id=\"add\">\r\n        <p className=\"btnHeadline__add\" id='add'>Lägg Till</p>\r\n    </Link>\r\n</div> */","import React, { useState, useEffect } from 'react';\r\nimport { routeName } from './Components/Data/RouteNames';\r\n\r\n// React Router - ES6 modules\r\nimport { \r\n  // BrowserRouter as Router, \r\n  HashRouter, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateHeadName, getLogStatus, gotoPage$ } from './Components/Storage.js';\r\n\r\nimport { localPubAppUrls } from './Components/Data/runAppUrls.js';\r\nimport { SQLTable } from './Components/Structure/SQLTable.js';\r\nimport { LogedIn } from './LogedIn';\r\nimport { MainPage } from './MainPage.js';\r\nimport { Auth } from './Components/Data/Authorization';\r\n\r\nupdateHeadName('Årsklockan');\r\n\r\nlet MainApp = () => {\r\n  let [ appUrl, setAppUrl ] = useState('');\r\n  let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n  console.log(\"MainApp -> redirectToPage\", redirectToPage)\r\n  \r\n  useEffect(() => {\r\n    gotoPage$.subscribe((gotoPage) => {\r\n      updateRedirectToPage(gotoPage);\r\n    });\r\n    setAppUrl(localPubAppUrls());\r\n    \r\n  },[redirectToPage]);\r\n  console.log(\"MainApp -> appUrl\", appUrl)\r\n  console.log(\"MainApp -> redirectToPage\", redirectToPage)\r\n  console.log(\"MainApp -> appUrl + routeName.login\", appUrl + routeName.login)\r\n\r\n  return (\r\n    <HashRouter basename='/'>\r\n      {redirectToPage === routeName.mainPage && <Redirect to={ `/`} />} \r\n      {redirectToPage === routeName.auth  && <Redirect to={`/${ routeName.auth }`}/>}  \r\n      {redirectToPage === routeName.login && <Redirect to={ `/${ routeName.login }`} />} \r\n    \r\n      <Route exact path={ appUrl } component={ MainPage } />\r\n      <Route exact path={ appUrl + routeName.auth } component={ Auth }/>   \r\n      <Route exact path={ appUrl + routeName.login } component={ LogedIn }/>  \r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default MainApp; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Components/Style/Body.css';\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}