{"version":3,"sources":["Components/GlobalProps.js","Components/Data/Spinner.js","Components/Data/Axios.js","Components/Data/LogInOut.js","Components/Structure/SQLTable.js","Components/Structure/SearchBar.js","LogedOut.js","MainApp.js","serviceWorker.js","index.js"],"names":["inlogedUserFullName","headName$","BehaviorSubject","returningUserData$","incommingSQLDataArr$","gotoPage$","getLogStatus","logInStatus","type","JSON","parse","window","localStorage","getItem","responsType","mess","logInMess","console","log","updateSavedSQLData","incommingSQLDataArr","next","updateLocalstorage","saveIntoLocalStorage","setItem","stringify","Spinner","props","wait","className","savedSQLDataArr","axiosGet","getType","axios","get","then","response","incommingSQLRes","data","status","push","catch","error","axiosPost","postType","bodyData","sendToSqlBackend","post","logedInUserInfoObj","statusText","incommingUserData","updateReturningUserData","runLogInOut","e","gotoPage","userInformation","targetBtn","target","targetBtnId","id","userName","formInputObj","userNameStr","userPassWord","userPwdStr","loginName","to","SQLTable","useState","incommingNewSQLData","updateIncommingNewSQLData","erroLoadingSQLData","updateErroLoadingSQLData","countGetMethod","axiosGettingSQLData","Promise","success","setTimeout","result","useEffect","subscribe","SQLDataArr","length","map","sqlDataObj","rowCounter","key","date","activity","state","concerned","place","content","SearchBar","LogedOut","appName","setAppName","inlogMess","setInlogMess","inlogStatus","setInlogStatus","updateUserNameStr","updateUserPwdStr","headName","returningUserDispalyingObj","Helmet","charSet","onChange","targetUserName","value","placeholder","targetUserPwd","onClick","MainApp","setInlogedFullUserName","updateGotoPage","gotoMain","returningUserData","updateHeadName","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e19f46ad.chunk.js","sourcesContent":["import {BehaviorSubject} from \"rxjs\";\r\nlet headName = '';\r\nlet inlogedUserFullName = '';\r\nlet returningUserData = '';\r\nlet incommingSQLDataArr = [];\r\nlet gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const returningUserData$ = new BehaviorSubject(returningUserData);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\n\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\n\r\nexport const localStorageObj$ = new BehaviorSubject('');\r\n\r\n/* The functions are triggered in another place and send in its data\r\nThe incomming data is stored in a new object and the object is then, in the last function, save too localstorage \r\n*/\r\nexport function getLogStatus(){\r\n    let getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n    let getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n\r\n    let logInStatus = {\r\n        type: getStatusType,\r\n        mess: getLogInMess\r\n    };\r\n    console.log(logInStatus);\r\n    \r\n    return logInStatus;\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    inlogedUserFullName = JSON.parse(window.localStorage.getItem(\"userData\")).incommingUserData.loginName;\r\n    inlogedUserFullName$.next(inlogedUserFullName);\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    console.log(incommingSQLDataArr);\r\n    \r\n    if(incommingSQLDataArr) {\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\nexport function updateReturningUserData(logedInUserInfoObj){\r\n    console.log(logedInUserInfoObj);\r\n    \r\n    if(logedInUserInfoObj) {\r\n        returningUserData$.next(logedInUserInfoObj);\r\n    }\r\n    updateLocalstorage(logedInUserInfoObj);\r\n}\r\nexport let updateLocalstorage = (saveIntoLocalStorage) =>{\r\n    localStorage.setItem('userData', JSON.stringify(saveIntoLocalStorage));\r\n}\r\nexport function updateGotoPage(gotoPage){\r\n    console.log(gotoPage);\r\n    \r\n    if(gotoPage) {\r\n        gotoPage$.next(gotoPage);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/Spinner.scss';\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n           { props.wait } <div className=\"spinner spinner-dark moveUp\"></div>\r\n        </>\r\n    );\r\n\r\n}\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { updateSavedSQLData, updateReturningUserData } from '../GlobalProps.js';\r\nimport { setTimeout } from 'timers';\r\n\r\nlet savedSQLDataArr = [];\r\nlet SQLFilterMonthsBtnsArr = [];\r\nlet SQLFilterConcernedBtnsArr = [];\r\n//let backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Deployat by Heroku \r\nlet backendURL = 'http://localhost:3001'; // Just test the backend \r\n\r\nexport let axiosGet = (getType) => {\r\n    let type = '';\r\n    // Type of post method\r\n    if (getType === 'default') type = '/SQLData';\r\n    if (getType === 'userSpec') type = `/SQLData/${ 1 }`;\r\n    console.log(type);\r\n    \r\n        // Get the user inloged User and send into the backend for getting the correct user records \r\n\r\n    axios.get(backendURL + type).then(response => {\r\n        // Store the incommingg API data in a variables\r\n        let incommingSQLRes = response.data[0];\r\n\r\n        console.log(response);\r\n        /*  If incomming status of 200 = OK\r\n            Data i push into a arry too  GlobalProps\r\n            The array is holding the data until the webbbrowser is closed \r\n          \r\n        Default get\r\n        */\r\n        if (response.status === 200 && getType === 'default') updateSavedSQLData(incommingSQLRes);\r\n        if (response.status === 200 && getType === 'userSpec') updateSavedSQLData(response);\r\n        \r\n        /*  If incomming status of 201 = Created:\r\n            Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        */\r\n        if (response.status === 201) {\r\n            \r\n            savedSQLDataArr[0].push(incommingSQLRes[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n        else{\r\n        }\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n}\r\nlet getUserId = () => {\r\n    let getUserId = JSON.parse(window.localStorage.getItem(\"userData\")).userId;\r\n    return getUserId;\r\n}\r\nexport let axiosPost = (postType, bodyData) => {  \r\n    console.log(postType);\r\n    let type = '';\r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    //console.log(sendToSqlBackend);\r\n    // Type of post method\r\n    if (postType === 'userValidate') type = 'UserValidate';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    if (postType === 'userReg') type = 'UserReg';\r\n    \r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).\r\n    then(response => {\r\n        console.log(response);\r\n        \r\n        if (postType === 'userValidate'){\r\n            // Incomming userdata. T\r\n            let logedInUserInfoObj = {\r\n                responsType: response.status,\r\n                logInMess: response.statusText, \r\n                incommingUserData: response.data,\r\n            };\r\n            //Send the incomming data for displaying the user login status\r\n            updateReturningUserData(logedInUserInfoObj);\r\n\r\n            console.log(logedInUserInfoObj);\r\n        }\r\n    }).\r\n    catch(error => {\r\n        //console.log(error.response);\r\n    });\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateLocalstorage, updateGotoPage, getLogStatus } from '../GlobalProps.js';\r\nimport { formInputObj } from '../../LogedOut.js';\r\n\r\nimport { axiosPost } from './Axios.js';\r\n\r\nimport '../CSS/LogInOut.css';\r\n\r\nimport { isArray } from 'util';\r\n\r\n/* export let updatedUserNameStr = ''\r\nexport let updatedUserPwdStr = ''; */\r\n\r\nexport let runLogInOut = (e) => {\r\n    let userInformation = {};\r\n    let targetBtn = e.target; \r\n    // Gets the element\r\n    let targetBtnId = targetBtn.id; \r\n    let targetBtnValue = targetBtn;\r\n    console.log(targetBtn);\r\n    // Things happen according to whare I click\r\n    if(targetBtnId === 'logIn') {\r\n        \r\n        /* Validate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: formInputObj.userNameStr, userPassWord: formInputObj.userPwdStr}\r\n        console.log(getLogStatus().type);\r\n\r\n        axiosPost('userValidate', userInformation);\r\n        // Check if you are able loggin according to the incomming data\r\n        if (getLogStatus().type === 200) updateGotoPage('LogIn');\r\n        if (getLogStatus().type === 203) return;\r\n    }\r\n    if(targetBtnId === 'logOout') {\r\n        updateLocalstorage({\r\n            responsType: null,\r\n            logInMess: null, \r\n            incommingUserData: {\r\n                loginName: null\r\n            }\r\n        });\r\n        \r\n        return <Redirect to=\"/\"/>;\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\n\r\nimport Spinner from '../Data/Spinner.js';\r\nimport { LogInOut } from '../Data/LogInOut.js';\r\nimport { axiosGet } from '../Data/Axios.js';\r\n\r\nimport '../CSS/SQLTable.css';\r\n\r\nimport axios from 'axios';\r\nimport { log } from 'util';\r\n\r\nexport let SQLTable = () => {\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n\r\n    let [ erroLoadingSQLData, updateErroLoadingSQLData ] = useState(false);\r\n\r\n    let [ addForm, setAddForm ] = useState(true);\r\n    console.log(incommingNewSQLData);\r\n    \r\n    let countGetMethod = 1;\r\n    let axiosGettingSQLData = () => {\r\n        let axiosUntilGettingData = new Promise((success, error) => {       \r\n            if (countGetMethod === 1) {\r\n                success();\r\n                countGetMethod++;\r\n            }\r\n            if (countGetMethod === 2) {\r\n                setTimeout(() => {\r\n                    updateErroLoadingSQLData(true)\r\n                }, 5000);\r\n            }\r\n            console.log(countGetMethod);\r\n            \r\n            //else error('Kunde inte ladda datan :(');\r\n        });\r\n\r\n        // Run default SQL list\r\n        axiosUntilGettingData.then((result) => {\r\n            axiosGet('default')\r\n        }).catch((result) =>{\r\n            updateErroLoadingSQLData(result);\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        axiosGettingSQLData();\r\n        \r\n        //setTimeout(() => {\r\n        //axiosUntilGettingData();\r\n          \r\n        //}, 3000);\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // IItcan handle the data an perform it task regardless the data infrastructure \r\n            \r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n     },[]); \r\n    let runAdmin = (e) => {\r\n        let targetBtn = e.target.dataset.admin;\r\n        if (targetBtn === 'logIn') setAddForm(true);\r\n        if (targetBtn === 'logOut') setAddForm(false);\r\n    }\r\n    return (\r\n        <section id=\"container__tableSchedule\">\r\n            <table id=\"tableSchedule__body\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Datum</th>\r\n                        <th className=\"tableCol4\">Akitvitet</th>\r\n                        <th>Status</th>\r\n                        <th>Berörda</th>\r\n                        <th>Typ</th>\r\n                        <th>Plats</th>\r\n                        <th className=\"tableCol9\">Innehåll</th>\r\n                   </tr>\r\n                </thead>\r\n                <tbody id=\"tableSchedule__tBody\">\r\n                    {(incommingNewSQLData.length !== 0) \r\n                        ?\r\n                        incommingNewSQLData.map((sqlDataObj, rowCounter) => {\r\n                            \r\n                            return(\r\n                                <tr key={ rowCounter }>\r\n                                    <td>{ sqlDataObj.date }</td>\r\n                                    <td className=\"tableCol4\">{ sqlDataObj.activity }</td>\r\n                                    <td>{ sqlDataObj.state }</td>\r\n                                    <td>{ sqlDataObj.concerned }</td>\r\n                                    <td>{ sqlDataObj.type }</td>\r\n                                    <td>{ sqlDataObj.place }</td>\r\n                                    <td className=\"tableCol9\">{ sqlDataObj.content }</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    :   \r\n                        <>\r\n                            <tr><td>\r\n                                {(erroLoadingSQLData !== true) \r\n                                    ? <Spinner wait={'Data laddas'}/>\r\n                                    :   <section>{`Data laddades inte ---> Hjälp!${ axiosGettingSQLData() }`}</section>\r\n                                }\r\n                            </td></tr>\r\n                        </>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../GlobalProps.js';\r\nimport '../CSS/SearchBar.css';\r\n\r\nlet activeMonthsStrArr = [];\r\nlet activeConcernedStrArr = [];\r\n\r\nlet checkedMonthsArr = [];\r\nlet checkedConcernedArr = [];\r\n\r\nlet concernedArr = [];\r\nlet monthsArr = [];\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <section className=\"searchBar__searchContainer\">\r\n                Komande sökfunktion!!!\r\n            {/* <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n            </button> */}\r\n\r\n        </section>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\nimport './Components/CSS/Generall.css';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { headName$, returningUserData$, getLogStatus } from './Components/GlobalProps.js';\r\n\r\nimport { log } from 'util';\r\nimport { SQLTable } from './Components/Structure/SQLTable.js';\r\nimport { SearchBar } from './Components/Structure/SearchBar.js';\r\n\r\nimport { runLogInOut } from './Components/Data/LogInOut.js';\r\nimport { nfapply } from 'q';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\nexport let LogedOut = () => {\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    const [ userNameStr, updateUserNameStr ] = useState(null);\r\n    const [ userPwdStr, updateUserPwdStr ] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        console.log('ecsfv');\r\n        \r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        returningUserData$.subscribe((returningUserDispalyingObj) => {\r\n            console.log(returningUserDispalyingObj);\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n    }, [inlogMess]);\r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        console.log(targetUserName);\r\n    \r\n        updateUserNameStr(targetUserName);\r\n        formInputObj['userNameStr'] = targetUserName;\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        console.log(targetUserPwd);\r\n        updateUserPwdStr(targetUserPwd);\r\n        formInputObj['userPwdStr'] = targetUserPwd;\r\n    }\r\n    let hideShowLoginMessPromise = () => {   \r\n        let loginMess = getLogStatus().mess;\r\n/*         let hideShowLoginMessPromise = () => {\r\n            \r\n            let hideShowMess = new Promise((showHide, error) => {       \r\n                showHide()\r\n            });\r\n            \r\n            loginMess = hideShowMess().then(() => {\r\n                setTimeout(() => {\r\n                    let loginMess= '';\r\n                    return loginMess;\r\n                }, 3000);\r\n                \r\n            })\r\n            return loginMess;\r\n        } */\r\n        \r\n    } \r\n        return (\r\n            <>  \r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n            <header>\r\n                <section className=\"headbar__headContainer\">\r\n                    <p className=\"headContainer__headline\">{ appName }</p>\r\n                    <section className=\"headContainer__logInOut\">\r\n\r\n                        <section className=\"logInOut__usernameContainer\">\r\n                            <p className=\"logInOut__username logInOut__inputLabelFormat\">Användarnamn</p>\r\n                            <input type=\"text\" className=\"username__input\" onChange={ onChangeUserName } value={ userNameStr } placeholder=\"...\"/>\r\n                        </section> \r\n                        <section className=\"logInOut__passwordContainer\">\r\n                            <p className=\"logInOut__password logInOut__inputLabelFormat\">Lösenord</p>\r\n                            <input type=\"text\" className=\"password__input\" onChange={ onChangeUserPwd } value={ userPwdStr } placeholder=\"...\"/> \r\n                        </section>  \r\n                        <section className=\"logInOut__btnOutContainer\">\r\n                            <button className=\"btnContainer__submitBtn\" onClick={ runLogInOut } id=\"logIn\">\r\n                                <p className=\"btnHeadline\" id='logIn'  onClick={ runLogInOut }>Logga In</p>\r\n                            </button>\r\n                                \r\n                        </section>\r\n                        <section className=\"logInOut__userInfo\">\r\n                            <p className=\"logInOut__loginErrorMess\">\r\n                                {(inlogStatus === 203)\r\n                                    ? (userNameStr === null && userPwdStr === null ) \r\n                                        ? inlogMess : null\r\n                                    : null\r\n                                }\r\n                            </p>\r\n                            <Link to=\"/UserReg\" className=\"logInOut__regLink\" onClick={ runLogInOut } id=\"logIn\">\r\n                                <p className=\"logInOut__regLink\">Registrera ny användare</p>\r\n                            </Link>   \r\n                        </section>\r\n                    </section>  \r\n                </section>\r\n            </header>\r\n            <main className=\"body__contents\">\r\n                <SearchBar/>\r\n                <SQLTable/>\r\n            </main>\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateHeadName, returningUserData$, gotoPage$ } from './Components/GlobalProps.js';\r\n \r\nimport { LogedOut } from './LogedOut.js';\r\nimport { LogedIn } from './LogedIn.js';\r\nimport { FormAdd } from './Components/Structure/FormAdd.js';\r\nimport { UserReg } from './Components/Structure/RegUser.js';\r\n\r\nlet MainApp = () => {\r\n  let [ appName, setAppName ] = useState('Årsklockan');\r\n  let [ isLogedIn, setIsLogedIn ] = useState(false);\r\n  let [ inlogedFullUserName, setInlogedFullUserName ] = useState('');\r\n  let [ gotoPage, updateGotoPage ] = useState('');\r\n  let [ gotoMain ] = useState(true);    \r\n\r\n  useEffect(() => {\r\n    returningUserData$.subscribe((returningUserData) => {\r\n      console.log(returningUserData);\r\n      setInlogedFullUserName(returningUserData);\r\n    });\r\n    gotoPage$.subscribe((gotoPage) => {\r\n      console.log(gotoPage);\r\n      updateGotoPage(gotoPage);\r\n    });\r\n    updateHeadName(appName);\r\n    if (gotoMain === true) return <Redirect to=\"/\"/>;\r\n  }, [gotoPage$]);  \r\n  return (\r\n    <>\r\n    frfg\r\n      <Router>\r\n        <Route exact path=\"/\" component={ LogedOut } />\r\n        {/* <Route exact path=\"/LogIn\" component={ LogedIn }/>\r\n          {(gotoPage === 'LogIn') ? <Redirect to=\"/LogIn\"/> : null}\r\n        <Route path=\"/Add\" component={ FormAdd }/>\r\n        <Route path=\"/UserReg\" component={ UserReg }/> */}\r\n      </Router>\r\n    </>\r\n  );\r\n} \r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Components/CSS/Generall.css';\r\n\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}