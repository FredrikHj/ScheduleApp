{"version":3,"sources":["Components/GlobalProps.js","MainApp.js","serviceWorker.js","index.js"],"names":["inlogedUserFullName","headName$","BehaviorSubject","returningUserData$","gotoPage$","MainApp","useState","appName","setInlogedFullUserName","updateGotoPage","gotoMain","useEffect","subscribe","returningUserData","console","log","gotoPage","headName","next","updateHeadName","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kYAEIA,EAAsB,GAQbC,GADuB,IAAIC,IAAgBF,GAC/B,IAAIE,IATd,KAUFC,EAAqB,IAAID,IARd,IAWXE,GAFuB,IAAIF,IARd,IAUD,IAAIA,IATd,KAWiB,IAAIA,IAAgB,I,0EC6BrCG,EAlCD,WAAO,IAAD,EACYC,mBAAS,iBADrB,mBACZC,EADY,aAEgBD,oBAAS,IAFzB,gCAGoCA,mBAAS,KAH7C,mBAGSE,GAHT,aAIiBF,mBAAS,IAJ1B,mBAIFG,GAJE,aAKCH,oBAAS,GAAtBI,EALY,oBAmBlB,OAZAC,qBAAU,WAUR,GATAR,EAAmBS,WAAU,SAACC,GAC5BC,QAAQC,IAAIF,GACZL,EAAuBK,MAEzBT,EAAUQ,WAAU,SAACI,GACnBF,QAAQC,IAAIC,GACZP,EAAeO,MDYd,SAAwBC,GACxBA,GAAUhB,EAAUiB,KAAKD,GCX5BE,CAAeZ,IACE,IAAbG,EAAmB,OAAO,kBAAC,IAAD,CAAUU,GAAG,QAC1C,CAAChB,IAEF,8CCnBgBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SDyH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b88a937.chunk.js","sourcesContent":["import {BehaviorSubject} from \"rxjs\";\r\nlet headName = '';\r\nlet inlogedUserFullName = '';\r\nlet returningUserData = '';\r\nlet incommingSQLDataArr = [];\r\nlet gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const returningUserData$ = new BehaviorSubject(returningUserData);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\n\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\n\r\nexport const localStorageObj$ = new BehaviorSubject('');\r\n\r\n/* The functions are triggered in another place and send in its data\r\nThe incomming data is stored in a new object and the object is then, in the last function, save too localstorage \r\n*/\r\nexport function getLogStatus(){\r\n    let getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n    let getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n\r\n    let logInStatus = {\r\n        type: getStatusType,\r\n        mess: getLogInMess\r\n    };\r\n    console.log(logInStatus);\r\n    \r\n    return logInStatus;\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    inlogedUserFullName = JSON.parse(window.localStorage.getItem(\"userData\")).incommingUserData.loginName;\r\n    inlogedUserFullName$.next(inlogedUserFullName);\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    console.log(incommingSQLDataArr);\r\n    \r\n    if(incommingSQLDataArr) {\r\n        incommingSQLDataArr$.next(incommingSQLDataArr);\r\n    }\r\n}\r\nexport function updateReturningUserData(logedInUserInfoObj){\r\n    console.log(logedInUserInfoObj);\r\n    \r\n    if(logedInUserInfoObj) {\r\n        returningUserData$.next(logedInUserInfoObj);\r\n    }\r\n    updateLocalstorage(logedInUserInfoObj);\r\n}\r\nexport let updateLocalstorage = (saveIntoLocalStorage) =>{\r\n    localStorage.setItem('userData', JSON.stringify(saveIntoLocalStorage));\r\n}\r\nexport function updateGotoPage(gotoPage){\r\n    console.log(gotoPage);\r\n    \r\n    if(gotoPage) {\r\n        gotoPage$.next(gotoPage);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\nimport { updateHeadName, returningUserData$, gotoPage$ } from './Components/GlobalProps.js';\r\n \r\nimport { LogedOut } from './LogedOut.js';\r\nimport { LogedIn } from './LogedIn.js';\r\nimport { FormAdd } from './Components/Structure/FormAdd.js';\r\nimport { UserReg } from './Components/Structure/RegUser.js';\r\n\r\nlet MainApp = () => {\r\n  let [ appName, setAppName ] = useState('Ã…rsklockan');\r\n  let [ isLogedIn, setIsLogedIn ] = useState(false);\r\n  let [ inlogedFullUserName, setInlogedFullUserName ] = useState('');\r\n  let [ gotoPage, updateGotoPage ] = useState('');\r\n  let [ gotoMain ] = useState(true);\r\n\r\n  useEffect(() => {\r\n    returningUserData$.subscribe((returningUserData) => {\r\n      console.log(returningUserData);\r\n      setInlogedFullUserName(returningUserData);\r\n    });\r\n    gotoPage$.subscribe((gotoPage) => {\r\n      console.log(gotoPage);\r\n      updateGotoPage(gotoPage);\r\n    });\r\n    updateHeadName(appName);\r\n    if (gotoMain === true) return <Redirect to=\"/\"/>;\r\n  }, [gotoPage$]);  \r\n  return (\r\n    <>\r\n    gregv\r\n{/*       <Router>\r\n        <Route exact path=\"/\" component={ LogedOut } />\r\n        <Route exact path=\"/LogIn\" component={ LogedIn }/>\r\n          {(gotoPage === 'LogIn') ? <Redirect to=\"/LogIn\"/> : null}\r\n        <Route path=\"/Add\" component={ FormAdd }/>\r\n        <Route path=\"/UserReg\" component={ UserReg }/>\r\n      </Router>\r\n */}\r\n    </>\r\n  );\r\n} \r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Components/CSS/Generall.css';\r\n\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}