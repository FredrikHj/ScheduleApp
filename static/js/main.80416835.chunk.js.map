{"version":3,"sources":["Components/Data/LocalStorage.js","Components/CommonFunctions.js","Components/Storage.js","Components/Data/RouteNames.js","Components/Style/SpecificStyle.js","Components/Style/RegStyle.js","Components/Style/CommonStyle.js","Components/Data/SubmitBtn.js","Components/Data/BackendURLPath.js","Components/Data/Axios.js","Components/Style/MainStyle.js","Components/Structure/Headbar.js","Components/Structure/RegUser.js","Components/Style/AuthStyle.js","Components/Data/Spinner.js","Components/Data/Authorization.js","Components/Style/SQLTableStyle.js","Components/Data/TableColsHeadline.js","Components/Data/runAppUrls.js","Components/Structure/ListSQLData.js","Components/Style/LogedInStyle.js","Components/Data/CellInput.js","Components/Structure/ListAddForm.js","Components/Structure/TableHead.js","Components/Structure/SearchBar.js","Components/Structure/MainContents.js","Components/Style/LoginFormStyle.js","Components/Data/LoginForm.js","MainPage.js","Components/Structure/LogedInStatus.js","Components/Data/CommonFunction.js","LogedIn.js","MainApp.js","serviceWorker.js","index.js"],"names":["getLocalStorageData","getData","JSON","parse","window","localStorage","getItem","token","jwt","require","inlogedUserFullName$","BehaviorSubject","incommingSQLDataArr$","incommingSiteLoga$","optionColListArr$","headName$","userData$","gotoPage$","updateLocalstorage","saveLoginData","setItem","stringify","updateInlogedUserFullName","next","inlogData","tokenData","verify","error","loginName","getTokenData","updateSavedSQLData","incommingSQLDataArr","updateGotoPage","gotoPage","routeName","specificStyleLogin","btn","width","height","right","marginTop","text","marginLeft","labelFormFocused","position","marginBottom","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","letterSpacing","color","specificStyleLogout","border","boxShadow","background","specificStyleAddRow","textTransform","specificStyleRemoveRecord","specificStyleUserReg","specificStyleNewUserSend","specificStyleCancelUserReg","RegStyle","headContainer","styled","section","regStatus","p","CommonBtnStyle","button","CommonTexStyle","btnHeadline","SubmitBtn","props","btnOptional","style","name","onClickFunction","id","onClick","data-optional","backendURL","savedSQLDataArr","axiosGet","getType","tokenStr","routes","axios","get","headers","Authorization","then","response","optionColListArr","status","incommingSiteLoga","updateSiteLoga","data","storageData","SQLData","structuringCols","push","catch","saveData","axiosPost","postType","bodyData","type","sendToSqlBackend","post","logedInUserInfoObj","responsType","logInMess","statusText","loginData","logaImage","HeadbarStyle","header","headerWidth","siteLogaContainer","appStatusContainer","headline","Headbar","appStatus","useState","inBackendURL","setInBackendUrl","logaNotSet","setLogaNotSet","siteLoga","setSiteLoga","appName","setInlogMess","setInlogStatus","gotoIntoPage","updateGotoIntoPage","useEffect","subscribe","userDispalyingObj","src","alt","RegUser","setAppName","userFullName","setUserFullName","userName","setUserName","userPwd","setUserPWD","headName","setStrsType","e","target","inputStr","value","dataset","Helmet","charSet","className","data-type","onChange","placeholder","targetBtnId","fullName","userPassWord","stopPropagation","AuthStyle","statusContainer","logInSpinnerMove","Spinner","str","Auth","setTimeout","SQLTableStyle","container","col1_3","col2","searchBar","body__contents","sideTool","sideToolRow1","sideToolRow2","AddSQLDataStyle","addDate","selectContainers","TableColsHeadline","correctRoutes","location","hash","split","ListSQLData","setAppUrl","updateRoutes","incommingNewSQLData","updateIncommingNewSQLData","updateErroLoadingSQLData","countGetMethod","correctDomain","domainHostname","hostname","localPubAppUrls","getSQLData","SQLDataArr","Promise","success","result","length","map","item","index","key","date","activity","concerned","place","content","LogedInStyle","userHelp","inlogedUser","UserInputForm","UserInputSelect","CellInput","dataType","cellIndex","inputOnChange","sOonClick","valueStr","data-typenr","options","optionIndex","data-cell","ListAddForm","updateOptionColListArr","choosenSelectOption","addedRecordData","SQLColListArr","Object","values","undefined","TableHead","SearchBar","MainContents","redirectToPage","updateRedirectToPage","updateAddedRecordData","createAddedRecordDataArr","puschToAddedRecordData","selectedOption","selectedStr","selectedIndex","cell","typenr","runRemove","targetBtn","removeId","optional","to","path","render","display","addId","timeStamp","LoginFormStyle","formContainer","usernameContainer","passwordContainer","labelFormNoFocus","label","inputForm","input","btnLoginContainer","userInfoContainer","userErrorMess","LoginForm","onChangeUserName","onChangeUserPwd","userNameStr","userPwdStr","runAuth","runNewUserReg","inlogStatus","inlogMess","specificFocusStyleUsrLabel","setSpecificFocusStyleUsrLabel","specificFocusStylePswLabel","setSpecificFocusStylePswLabel","handleInputForm","inputFormId","MainPage","appUrl","updateUserNameStr","updateUserPwdStr","returningUserDispalyingObj","targetUserName","targetUserPwd","exact","component","LogedInStatus","functionLogOut","runLogOut","clear","LogedIn","updateInlogedUser","console","log","inlogedUserFullName","updateHeadName","MainApp","basename","Boolean","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80416835.chunk.js","sourcesContent":["// ================================================== LocalStorage handler ==================================================\r\nexport let LocalStorageObj =  {\r\n    logedInState: false,\r\n    fullName: ''\r\n};\r\nexport function getLocalStorageData(getData){\r\n    // Run if a data i saved into the localstorage else no run\r\n    getData = JSON.parse(window.localStorage.getItem(\"loginData\")).token;\r\n    return getData;\r\n}","/* ================================================== Get token ==================================================\r\nImports module */\r\nlet jwt = require('jsonwebtoken');\r\n\r\nexport let getTokenData = (token, inlogData) => {\r\n    let tokenData = jwt.verify( token, 'inlogSecretKey', (error, token) => token);\r\n    if (inlogData === 'fullName') return tokenData.loginName;\r\n}\r\n","/* ==================================================  Props handler ==================================================\r\nImports module */\r\nimport {BehaviorSubject} from \"rxjs\";\r\n\r\nimport {getLocalStorageData} from './Data/LocalStorage';\r\nimport {getTokenData} from './CommonFunctions';\r\nconst inlogedUserFullName = '';\r\nconst incommingSQLDataArr = [];\r\nconst incommingSiteLoga = '';\r\nconst optionColListArr = [];\r\nconst headName = '';\r\nconst userData = '';\r\nconst gotoPage = '';\r\n\r\n//===============================================\r\n\r\nexport const inlogedUserFullName$ = new BehaviorSubject(inlogedUserFullName);\r\nexport const incommingSQLDataArr$ = new BehaviorSubject(incommingSQLDataArr);\r\nexport const incommingSiteLoga$ = new BehaviorSubject(incommingSiteLoga);\r\nexport const optionColListArr$ = new BehaviorSubject(optionColListArr);\r\nexport const headName$ = new BehaviorSubject(headName);\r\nexport const userData$ = new BehaviorSubject(userData);\r\nexport const gotoPage$ = new BehaviorSubject(gotoPage);\r\nexport const LocalStorage$ = new BehaviorSubject('');\r\n\r\nexport function updateUserData(loginData){\r\n    /* The functions are triggered in another place.\r\n        The function updateLocalstorage is triggered together with the incomming data.\r\n        The incomming data is saved for the subscriber.  \r\n    */\r\n    updateLocalstorage(loginData);\r\n    if(loginData) {\r\n        userData$.next(loginData);\r\n    }\r\n}\r\nexport const updateLocalstorage = (saveLoginData) =>{\r\n    // The localstorage is set with the data\r\n    localStorage.setItem('loginData', JSON.stringify(saveLoginData));\r\n}\r\n\r\nexport function getLogStatus(){\r\n    // Run if a data i saved into the localstorage else no run\r\n    if (window.localStorage.length !== 0) {\r\n        const getStatusType = JSON.parse(window.localStorage.getItem(\"userData\")).responsType;\r\n        const getLogInMess = JSON.parse(window.localStorage.getItem(\"userData\")).logInMess;\r\n        const logInStatus = {\r\n            type: getStatusType,\r\n            mess: getLogInMess\r\n        };\r\n        return logInStatus;\r\n    }\r\n}\r\nexport function updateInlogedUserFullName(){\r\n    if (updateInlogedUserFullName) inlogedUserFullName$.next(getTokenData(getLocalStorageData('token'), 'fullName'));\r\n}\r\nexport function updateHeadName(headName){\r\n    if(headName) headName$.next(headName);\r\n}\r\nexport function updateSiteLoga(incommingSiteLoga){\r\n    if(incommingSiteLoga) incommingSiteLoga$.next(incommingSiteLoga);\r\n}\r\nexport function updateSavedSQLData(incommingSQLDataArr){\r\n    if(incommingSQLDataArr) incommingSQLDataArr$.next(incommingSQLDataArr);\r\n}\r\nexport function updateOptionColList(optionColListArr){\r\n    if(optionColListArr) optionColListArr$.next(optionColListArr);\r\n}\r\nexport function updateGotoPage(gotoPage){    \r\n    if(gotoPage) gotoPage$.next(gotoPage);\r\n    return gotoPage;\r\n}","// ================================================== Routes Name ==================================================\r\nexport const routeName = {\r\n    mainPage: '/',\r\n    userReg: 'Registrera',\r\n    auth: 'Auth',\r\n    login: 'Inloggad',\r\n    addRecords: 'Add',\r\n  };","// ================================================== Style Rouls for a specific purposes ==================================================\r\nexport const specificStyleLogin = {\r\n    btn: {\r\n        width: '83px',\r\n        height: '30px',\r\n        right: '0px',\r\n        marginTop: 'calc(50% - 34px/9)',\r\n\r\n    },\r\n    text: {\r\n        marginLeft: '0',\r\n        marginTop: '10px',\r\n    }\r\n}\r\n\r\nexport const labelFormFocused = {\r\n    position:'absolute',\r\n    height: '50px',\r\n    marginLeft: '10px',\r\n    marginBottom : '-25px',\r\n    marginTop: '-25px',\r\n    fontFamily: 'Roboto',\r\n    fontStyle: '500',\r\n    fontWeight: 'normal',\r\n    fontSize: '12px',\r\n    lineHeight: '132%',\r\n    letterSpacing: '0.005em',\r\n    color: '#000000',\r\n}\r\nexport const specificStyleLogout = {\r\n    btn: {\r\n        border: 'none',\r\n        width: '135px',\r\n        marginLeft: '-25px',\r\n        marginTop: '8px',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        fontFamily: 'Roboto',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        fontSize: '18px',\r\n        color: 'black',\r\n    }\r\n}\r\nexport const specificStyleAddRow = {\r\n    btn: {\r\n        width: '83px',\r\n        height: '30px',\r\n        marginLeft: '0',\r\n        marginTop: '46px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        fontFamily: 'Roboto',\r\n        fontStyle: 'normal',\r\n        fontWeight: '900',\r\n        fontSize: '12px',\r\n        letterSpacing: '0.05em',\r\n        textTransform: 'uppercase',\r\n        color: 'black',\r\n    }\r\n}\r\nexport const specificStyleRemoveRecord = {\r\n    btn: {\r\n        width: '77px',\r\n        height: '34px',\r\n        marginTop: '0',\r\n        marginBottom: '-12px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        color: 'black',\r\n    }\r\n}\r\nexport const specificStyleUserReg = {\r\n    btn: {\r\n        width: '150px',\r\n        height: '21px',\r\n        marginLeft: '15px',\r\n        marginTop: '52px',\r\n        marginBottom: '-12px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        color: 'black',\r\n        fontSize: '18px',\r\n    }\r\n}\r\nexport const specificStyleNewUserSend = {\r\n    btn: {\r\n        width: '141px',\r\n        height: '40px',\r\n        marginLeft: '10px',\r\n        marginBottom: '-12px',\r\n    },\r\n    text: {\r\n        fontSize: '18px',\r\n        marginTop: '20px',\r\n    }\r\n}\r\nexport const specificStyleCancelUserReg = {\r\n    btn: {\r\n        width: '150px',\r\n        height: '21px',\r\n        marginLeft: '22px',\r\n        marginTop: '24px',\r\n        border: 'none',\r\n        boxShadow: 'none',\r\n        background:'none',\r\n    },\r\n    text: {\r\n        color: 'black',\r\n        fontSize: '18px',\r\n    }\r\n}","/* ================================================== Style Rouls for userReg ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== Reg ==============================\r\nexport let RegStyle = {\r\n    headContainer: styled.section`\r\n      width: 400px;\r\n      display: flex;\r\n      margin-left: 505px;\r\n      margin-top: 20px;\r\n    `,\r\n  regStatus: styled.p`\r\n      margin-left: 3px;\r\n    `,\r\n  }","/* ================================================== Style Rouls for Shared rouls ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== Common Style ==============================\r\nexport let CommonBtnStyle = {\r\n    btn: styled.button`\r\n        display: flex;\r\n        flex-direction: row;\r\n        padding: 8px 12px;\r\n        box-shadow: 0px 1px 2px rgba(98, 98, 98, 0.18), 0px 0px 2px rgba(98, 98, 98, 0.18);\r\n        border-radius: 9.5px;\r\n        background: #AE0B05;\r\n    `,\r\n}\r\nexport let CommonTexStyle = {\r\n    btnHeadline: styled.p`\r\n        right: 12px;\r\n        margin-top: -2px;\r\n        font-family: Roboto;\r\n        font-style: normal;\r\n        font-weight: 900;\r\n        font-size: 12px;\r\n        line-height: 150%;\r\n        display: flex;\r\n        align-items: center;\r\n        letter-spacing: 0.05em;\r\n        text-transform: uppercase;\r\n        color: #FFFFFF;\r\n        flex: none;\r\n        order: 0;\r\n        align-self: center;\r\n    `,\r\n}","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import inportant components for the specific page\r\nimport { CommonBtnStyle, CommonTexStyle } from '../Style/CommonStyle';\r\n\r\nexport let SubmitBtn = (props) => {\r\n    const {btnOptional, style, name, onClickFunction, id } = props;\r\n    return(\r\n        <>\r\n            <CommonBtnStyle.btn  id={ id } onClick={ onClickFunction } style={ style.btn }>\r\n                <CommonTexStyle.btnHeadline id={ id } onClick={ onClickFunction } data-optional={ btnOptional } style={ style.text }>{ name }</CommonTexStyle.btnHeadline>\r\n            </CommonBtnStyle.btn>\r\n        </>\r\n    );\r\n}","// Change this for working with the local or published Backend\r\nexport let backendURL = 'https://hbgworks-poc-event-schedule.herokuapp.com'; // Heroku Backend\r\n//export let backendURL = 'http://localhost:3001'; // Local Backend ","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport axios from 'axios';\r\nimport { updateSiteLoga, updateSavedSQLData, updateOptionColList, updateUserData, updateGotoPage } from '../Storage.js';\r\n\r\n// Import inportant components for the specific page\r\nimport { backendURL } from './BackendURLPath';\r\n\r\nlet savedSQLDataArr = [];\r\n\r\nexport let axiosGet = (getType, tokenStr) => {\r\n        let routes = '';\r\n\r\n    // Type of post method\r\n    if (getType === 'getLoga') routes = '/SiteLoga';\r\n    if (getType === 'default') routes = '/SQLData';\r\n    // The routes shall content the inlogging user\r\n    if (getType === 'userSpec') routes = `/SQLData/${ 'fredde' }`;\r\n \r\n    axios.get(backendURL + routes, {headers: {Authorization: `bearer ${tokenStr}`}}).then(response => {\r\n        updateSavedSQLData([]);\r\n        let incommingSQLResArr = []\r\n        /* Store the incomming API data in a variables - \r\n        Note that the data structure deppending on the conditions*/\r\n        if (response.status === 200 && getType === 'getLoga') updateSiteLoga(response.data);\r\n        if (response.status === 200 && getType === 'default') storageData(response.data[0]);\r\n        if (response.status === 200 && getType === 'userSpec') {\r\n            storageData(response.data.SQLData[0]);\r\n            updateOptionColList(response.data.structuringCols)\r\n        }\r\n       \r\n        //  If incomming status of 201 = Created: The Data i push into a arry that is holding the data until the webbbrowser is closed \r\n        if (response.status === 201) {\r\n            savedSQLDataArr[0].push(incommingSQLResArr[0][0]);\r\n            updateSavedSQLData[0](savedSQLDataArr);\r\n        }\r\n    }).\r\n    catch(error => {});\r\n}\r\nconst storageData = (saveData) => {\r\n    updateSavedSQLData(saveData);\r\n}\r\n\r\nexport let axiosPost = (postType, bodyData) => {      \r\n    let type = '';\r\n    if (postType === 'Auth') type = 'Auth';\r\n    if (postType === 'filter') type = 'filter';\r\n    if (postType === 'add') type = 'AddRecord';\r\n    if (postType === 'userReg') type = 'UserReg';\r\n    if (postType === 'runRemoveRecord') type = 'RemoveRecord';\r\n    \r\n    let sendToSqlBackend = {\r\n        bodyData,\r\n    };\r\n    axios.post(\r\n        `${backendURL}/SQLData/${ type }`\r\n        , sendToSqlBackend ).then(response => {\r\n            if (postType === 'Auth'){\r\n                // Incomming userdata.         \r\n                let logedInUserInfoObj = {\r\n                    responsType: response.status,\r\n                    logInMess: response.statusText, \r\n                    token: response.data,\r\n                    //getTokenData(response.data),\r\n                };\r\n                //Send the incomming data for displaying the user login status\r\n                updateUserData(logedInUserInfoObj);\r\n                if (response.status === 200) updateGotoPage(postType);\r\n            }\r\n        }).catch(error => {});\r\n}\r\n","/* ================================================== Style Rouls for Generall style ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== GenerallyStyle ==============================\r\nexport let GenerallyStyle = {\r\n  askMarkMove: styled.section`\r\n    float: right;\r\n  `,\r\n}\r\n// ============================== Headbar ==============================\r\nconst headerWidth = 1400;\r\nconst headContainerCenterPoss = headerWidth/2;\r\nexport const logaImage = {\r\n    width: '210px',\r\n    marginTop: '40px',\r\n    marginBottom: '0',\r\n}\r\n\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    background-color: white;\r\n    width: 100%;\r\n  `,\r\n  headContainer: styled.section`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: ${headerWidth}px;\r\n    margin-left: calc(50% - ${headContainerCenterPoss}px);\r\n    background: #FFFFFF;\r\n  `,\r\n  siteLogaContainer: styled.section`\r\n    margin-top: -23px;\r\n    margin-left: 90px;\r\n    width: 36%;\r\n  `,\r\n  appStatusContainer: styled.section`\r\n    width: 62%;\r\n  `,\r\n  headline: styled.section`\r\n    display: flex;\r\n    align-items: flex-end;\r\n    width: 500px;\r\n    height: 18px;\r\n    margin-left: 45px;\r\n    margin-top: -18px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 900;\r\n    font-size: 12px;\r\n    line-height: 150%;\r\n    letter-spacing: 0.05em;\r\n    text-transform: uppercase;\r\n    color: #3D3D3D;\r\n  `,\r\n}","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import inportant components for the specific page\r\nimport { HeadbarStyle, logaImage } from '../Style/MainStyle';\r\n\r\nimport { userData$, gotoPage$, incommingSiteLoga$ } from '../Storage.js';\r\nimport { backendURL } from '../Data/BackendURLPath';\r\nimport { axiosGet } from '../Data/Axios.js';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\n\r\nexport let Headbar = (props) => {\r\n    const { appStatus } = props;\r\n    let [ inBackendURL, setInBackendUrl ] = useState('');\r\n    let [ logaNotSet, setLogaNotSet ] = useState(false);\r\n    let [ siteLoga, setSiteLoga ] = useState('');\r\n    let [ appName ] = useState('******* ENHETEN • WORKSHOPS');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    let [ gotoIntoPage, updateGotoIntoPage ] = useState('');\r\n\r\n    useEffect(() => {\r\n        axiosGet('getLoga', '');\r\n        incommingSiteLoga$.subscribe((incommingSiteLoga) => {  \r\n            if (logaNotSet === false) {\r\n                setSiteLoga(incommingSiteLoga);\r\n                setLogaNotSet(true);\r\n            }\r\n        });\r\n        setInBackendUrl(backendURL);\r\n        userData$.subscribe((userDispalyingObj) => {\r\n            setInlogStatus(userDispalyingObj.responsType);\r\n            setInlogMess(userDispalyingObj.logInMess);\r\n        });\r\n        gotoPage$.subscribe((gotoPage) => {\r\n            updateGotoIntoPage(gotoPage);\r\n        });\r\n    }, [inBackendURL, gotoIntoPage]);\r\n    return (\r\n        <>\r\n            <HeadbarStyle.header>\r\n                <HeadbarStyle.headContainer>\r\n                    <HeadbarStyle.siteLogaContainer>\r\n                        <img src={ inBackendURL + siteLoga } style={ logaImage } alt=\"waef\"/>\r\n                        <HeadbarStyle.headline>{ appName }</HeadbarStyle.headline>\r\n                    </HeadbarStyle.siteLogaContainer>\r\n                    <HeadbarStyle.appStatusContainer>\r\n                        {appStatus}\r\n                    </HeadbarStyle.appStatusContainer>\r\n                </HeadbarStyle.headContainer>                     \r\n            </HeadbarStyle.header>\r\n        </>\r\n    );\r\n}","/* ================================================== UserReg ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// Import CSS rouls\r\nimport { specificStyleNewUserSend, specificStyleCancelUserReg } from '../Style/SpecificStyle';\r\nimport { RegStyle } from '../Style/RegStyle';\r\nimport '../Style/RegUser.css';\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, updateGotoPage } from '../Storage.js';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { axiosPost } from '../Data/Axios.js';\r\nimport { Headbar } from './Headbar.js';\r\n\r\nexport let RegUser = () => {\r\n    let [ appName, setAppName ] = useState(''); \r\n    \r\n    let [ userFullName, setUserFullName ] = useState('');\r\n    let [ userName, setUserName  ] = useState('');\r\n    let [ userPwd, setUserPWD ] = useState('');\r\n\r\n    useEffect(() => {\r\n        \r\n        headName$.subscribe((headName) => {\r\n            //console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n    }, []);\r\n    let runCancel = (e) => {\r\n        // Gets the element        \r\n        let targetBtnId = e.target.id; \r\n        updateGotoPage(targetBtnId);\r\n    };\r\n    let setStrsType = (e) => {\r\n        let type = e.target;\r\n        let inputStr = type.value;            \r\n        const {dataset} = type;\r\n        \r\n        if (dataset.type === 'fullName') setUserFullName(inputStr);\r\n        if (dataset.type === 'userName') setUserName(inputStr);\r\n        if (dataset.type === 'userPwd') setUserPWD(inputStr);\r\n    };\r\n    let runSendNewUser = (e) => {\r\n        let targetBtnId = e.target.id; \r\n        // Created a body for the added data\r\n        let sqlBody = {\r\n            fullName: userFullName,\r\n            userName: userName,\r\n            userPassWord: userPwd\r\n        }        \r\n        axiosPost(targetBtnId, sqlBody);\r\n            // Save the body into the table for showing it exckluding the first item\r\n            //sqlBody\r\n        // Get back to mainPage so you can loggin with the new user. Will fix some automatic later\r\n        updateGotoPage('/');\r\n        e.stopPropagation();\r\n    };\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Registrera`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <RegStyle.headContainer>\r\n                        <RegStyle.regStatus>{ 'Regstatus' }</RegStyle.regStatus>\r\n                        <SubmitBtn\r\n                            style={ specificStyleCancelUserReg }\r\n                            name={ 'Avbryt' }\r\n                            onClickFunction={ runCancel }\r\n                            id={ '/' }\r\n                            type=\"buttom\"\r\n                        />\r\n                    </RegStyle.headContainer>\r\n                }\r\n            />\r\n            <section className=\"regUser__regContainer\">\r\n                <form>\r\n                    <div>\r\n                        <label id=\"userFullName\">Ditt Namn</label>\r\n                        <input type=\"text\" id=\"userFullName\" data-type=\"fullName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userName\">Användarnamn</label>\r\n                        <input type=\"text\" id=\"userName\" data-type=\"userName\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label id=\"userPwd\">Lösenord</label>\r\n                        <input type=\"text\" id=\"userPwd\" data-type=\"userPwd\" onChange={ setStrsType } placeholder=\"  ...\"/>\r\n                    </div>\r\n                    <div>\r\n                    <SubmitBtn\r\n                        style={ specificStyleNewUserSend }\r\n                        name={ 'Registrera' }\r\n                        onClickFunction={ runSendNewUser }\r\n                        id={ 'userReg' }\r\n                        type=\"buttom\"\r\n                    />\r\n                    </div>\r\n                </form>\r\n            </section>\r\n        </>  \r\n    );\r\n}","/* ================================================== Style Rouls for Auth ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\nexport let AuthStyle = {\r\n  statusContainer: styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    margin-left: 490px;\r\n    margin-top: 40px;\r\n  `,\r\nlogInSpinnerMove: styled.section`\r\n    margin-left: 3px;\r\n  `,\r\n}","/* ================================================== Spinner ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import CSS rouls\r\nimport '../Style/Spinner.scss';\r\n\r\n// Import inportant components for the specific page\r\nexport let Spinner = (props) => {\r\n    return(\r\n        <>\r\n            { props.str } <span className=\"spinner spinner-dark\"></span>\r\n        </>\r\n    );\r\n}\r\nexport default Spinner;\r\n","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// Import CSS rouls\r\nimport { AuthStyle } from '../Style/AuthStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, updateGotoPage } from '../Storage.js';\r\nimport { Headbar } from '../Structure/Headbar.js';\r\nimport Spinner from './Spinner.js';\r\n\r\nexport let Auth = () => {\r\n    const [ appName, setAppName ] = useState('');  \r\n    \r\n    useEffect(() => {\r\n        headName$.subscribe((headName) => {\r\n            setAppName(headName);\r\n        }); \r\n    }, []);\r\n    let runLogin = () => {\r\n        setTimeout(() => {\r\n            updateGotoPage('Inloggad');\r\n        }, 500)\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n\r\n            <Headbar\r\n                appStatus={\r\n                    <AuthStyle.statusContainer>\r\n                        Du loggas in ...\r\n                        <Spinner/>\r\n                        {runLogin()}\r\n                    </AuthStyle.statusContainer>\r\n                }\r\n            /> \r\n        </>\r\n    );\r\n}","/* ================================================== Style Rouls for SQLTable ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== SQLTable ==============================\r\nexport let SQLTableStyle = {\r\n    container: styled.section`\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n    `,\r\n    col1_3: styled.section`\r\n        width: 10%;\r\n        height:500px;\r\n    `,\r\n    col2: styled.section`\r\n        width: 80%;\r\n    `,\r\n    searchBar: styled.section`\r\n        margin-left: calc(50% - 470px);\r\n        margin-top: 81px;\r\n        width: 862px;\r\n    `,\r\n    // Table  content ----------------------\r\n    body__contents: styled.section`\r\n        width: 920px;\r\n        margin-left: calc(50% - 450px);\r\n        display: flex;\r\n        flex-direction: row;\r\n    `,\r\n    sideTool: styled.section`\r\n        margin-left: 10px;\r\n        margin-top: 32px;\r\n    `,\r\n    sideToolRow1:styled.section`\r\n        margin-top: 0;\r\n    `,\r\n    sideToolRow2: styled.section`\r\n        margin-top: 30px;\r\n    `  ,\r\n}\r\n// ============================== Add Data ==============================\r\nexport let AddSQLDataStyle = {\r\n    addDate: styled.section`\r\n        font-size: 12px;\r\n        text-align: center;\r\n        color: red;\r\n        font-weight: bold;\r\n    `,\r\n}\r\nexport const selectContainers = {\r\n    width: '100%',\r\n}","// ================================================== SQLCol header ==================================================\r\nexport const TableColsHeadline = [\r\n    'Datum', 'Akitvitet', 'Berörda', 'Typ', 'Plats', 'Innehåll',\r\n];\r\n","/* ================================================== HeadBar ==================================================\r\n Handles the domain public dev or online pulished */\r\nexport let localPubAppUrls = () => {\r\n  let correctDomain = '';\r\n  let domainHostname = window.location.hostname;\r\n\r\n  // Check if in local or pub mode \r\n  if (domainHostname === 'localhost' || domainHostname === 'fredrikhj.github.io') correctDomain = '/'; \r\n \r\n  return correctDomain;\r\n}\r\n// Handles correct read of the url = /?????\r\nexport let correctRoutes = () => {\r\n  let routeName = window.location.hash.split('#')[1];\r\n  return routeName;\r\n}","/* ================================================== Render all the SQLData ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import inportant components for the specific page\r\nimport { getLocalStorageData } from '../Data/LocalStorage';\r\nimport { localPubAppUrls } from '../Data/runAppUrls.js';\r\nimport { correctRoutes } from '../Data/runAppUrls';\r\nimport { incommingSQLDataArr$ } from '../Storage';\r\nimport { axiosGet } from '../Data/Axios';\r\nimport Spinner from '../Data/Spinner.js';\r\n\r\nexport let ListSQLData = () => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ routes, updateRoutes ] = useState('');\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ erroLoadingSQLData, updateErroLoadingSQLData ] = useState(false);\r\n\r\n    let countGetMethod = 1;\r\n    useEffect(() =>{\r\n        setAppUrl(localPubAppUrls());\r\n        getSQLData();        \r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure\r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n        updateRoutes(correctRoutes());\r\n    },[routes])\r\n    let getSQLData = () => {\r\n        let axiosUntilGettingData = new Promise((success, error) => {\r\n            if (countGetMethod === 1) {\r\n                success();\r\n                countGetMethod++;\r\n            }\r\n            if (countGetMethod === 2) {\r\n                setTimeout(() => {\r\n                    updateErroLoadingSQLData(true)\r\n                }, 1000);\r\n            }\r\n            \r\n            //else error('Kunde inte ladda datan :(');\r\n        });\r\n        \r\n        // Run default SQL list\r\n         axiosUntilGettingData.then((result) => {            \r\n            if(routes === '/') axiosGet('default', '');\r\n            if(routes === '/Inloggad' || routes === '/Add') axiosGet('userSpec', getLocalStorageData('token'));\r\n        }).catch((result) =>{\r\n            updateErroLoadingSQLData(result);\r\n        })\r\n    }\r\n    return(\r\n        <>\r\n            {(incommingNewSQLData.length !== 0) \r\n                ?\r\n                incommingNewSQLData.map((item, index) => {\r\n                    return(\r\n                        <tr key={ index }>\r\n                            <td>{ item.date }</td>\r\n                            <td>{ item.activity }</td>\r\n                            <td>{ item.concerned }</td>\r\n                            <td>{ item.type }</td>\r\n                            <td>{ item.place }</td>\r\n                            <td>{ item.content }</td>\r\n                        </tr>\r\n                    );\r\n                })\r\n            :   \r\n                <>\r\n                    <tr>\r\n                        <td>\r\n                            <Spinner str={'Tabellen laddas'}/>\r\n                        </td>\r\n                    </tr>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","/* ================================================== Style Rouls for user LogedIn ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== Already logedIn ==============================\r\nexport let LogedInStyle = {\r\n  headContainer:styled.section`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    width: 52%;\r\n    margin-left: 41.5%;\r\n    height: 0;\r\n    padding-top: 40px;\r\n  `,\r\n  userHelp: styled.section`\r\n    margin-left: -50px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n  `,\r\n  inlogedUser: styled.section`\r\n    width: 300px;\r\n    margin-left: 30px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n  `,\r\n}\r\n// ============================== UserSpecificStyle ==============================\r\nexport const UserInputForm = {\r\n  width: \"100%\",\r\n}\r\nexport let UserInputSelect = {\r\n  container: styled.section`\r\n    margin-left: 0;\r\n    margin-top: 0;\r\n  `,\r\n}\r\n","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import CSS rouls\r\nimport { UserInputForm, UserInputSelect } from '../Style/LogedInStyle';\r\nimport { selectContainers } from '../Style/SQLTableStyle';\r\nimport { AddSQLDataStyle } from'../Style/SQLTableStyle';\r\n\r\nexport let CellInput = (props) => {\r\n    const { dataType, cellIndex, inputOnChange, sOonClick, valueStr } = props;\r\n    return(\r\n        <>\r\n            {(cellIndex === 0)\r\n                ?   <>\r\n                        <input \r\n                            type=\"text\"\r\n                            style={ UserInputForm }\r\n                            data-type={ dataType } \r\n                            data-typenr={ cellIndex }\r\n                            onChange={ inputOnChange }\r\n                            value={ valueStr }\r\n                        />\r\n                        <AddSQLDataStyle.addDate> 20yy-mm-dd </AddSQLDataStyle.addDate>\r\n                    </>\r\n                :   <>\r\n                        <input \r\n                            type=\"text\"\r\n                            style={ UserInputForm }\r\n                            data-type={ dataType } \r\n                            data-typenr={ cellIndex }\r\n                            onChange={ inputOnChange }\r\n                            value={ valueStr }\r\n                        />\r\n                        <UserInputSelect.container>\r\n                            <select key={ cellIndex } style={ selectContainers } onChange={ sOonClick }>\r\n                                <option>Välj</option>\r\n                                {(props.options !== false) &&\r\n                                    props.options.map((item, optionIndex) => {\r\n                                        return(\r\n                                            <option key={ optionIndex } data-cell={ cellIndex }id={ optionIndex } value={ item }>{ item }</option>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </select>\r\n                        </UserInputSelect.container>\r\n                    </>\r\n            }\r\n        </>\r\n    );\r\n}","/* ================================================== AddRecord ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import inportant components for the specific page\r\nimport { TableColsHeadline } from '../Data/TableColsHeadline';\r\nimport { optionColListArr$ } from '../Storage';\r\nimport { CellInput } from '../Data/CellInput';\r\n\r\nexport let ListAddForm = (props) => {\r\n    let [ optionColListArr, updateOptionColListArr ] = useState([]);\r\n    const { setStrsType, choosenSelectOption, addedRecordData } = props;\r\n\r\n    useEffect(() => {\r\n        optionColListArr$.subscribe((SQLColListArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure \r\n            if (SQLColListArr) if(optionColListArr.length === 0) updateOptionColListArr(Object.values(SQLColListArr));\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n    });\r\n    return(\r\n        <>\r\n            <tr>\r\n                {\r\n                    TableColsHeadline.map((item, cellIndex) => {                   \r\n                        return(\r\n                            <td key={ cellIndex }>                \r\n                                <CellInput \r\n                                    dataType={ item }\r\n                                    cellIndex={ cellIndex }\r\n                                    inputOnChange={ setStrsType }\r\n                                    sOonClick={ choosenSelectOption }\r\n                                    valueStr={ addedRecordData[cellIndex] }\r\n                                    options={ optionColListArr[cellIndex] !== undefined && optionColListArr[cellIndex] }\r\n                               />\r\n                            </td>\r\n                        );\r\n                    })\r\n                }                          \r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    Dina Aktiviteter\r\n                </td>\r\n            </tr>\r\n        </>          \r\n    );\r\n}","/* ================================================== Tables head part ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import CSS rouls\r\nimport '../Style/SQLTable.css';\r\n\r\n// Import inportant components for the specific page\r\nimport { TableColsHeadline } from '../Data/TableColsHeadline';\r\n\r\nexport let TableHead = () => {\r\n    return(\r\n        <thead>\r\n            <tr>\r\n                {\r\n                    TableColsHeadline.map((item, index) => {\r\n                        return(\r\n                            <th key={ index }>{ item } </th> \r\n                        );\r\n                    })\r\n                }\r\n            </tr>\r\n        </thead>\r\n    );\r\n}","/* ================================================== Search SQLData ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect, Link } from \"react-router-dom\";\r\n\r\nimport { axiosPost, axiosGet } from '../Data/Axios.js';\r\nimport { incommingSQLDataArr$ } from '../Storage.js';\r\nimport '../Style/SearchBar.css';\r\n\r\n\r\nlet SQLStatementsObj = {};\r\nexport let SearchBar = () => {\r\n   /*  let [ incommingSQLData, updateincommingSQLData ] = useState([]);\r\n    let [ activeFilter, updateActiveFilter ] = useState(false); */\r\n\r\n    //useEffect(() => {\r\n\r\n  /*\r\n    let getFilterStr = (filtering) => {\r\n        \r\n            Check if the incommingg str is found in the array, if the string is found. \r\n            The stirng is add else not added \r\n        \r\n        for (let index = 0; index < incommingSQLData.length; index++) {\r\n            let sqlMonthStr = incommingSQLData[index].month;\r\n            let sqlConcerned = incommingSQLData[index].concerned;\r\n    \r\n            if (!monthsArr.includes(incommingSQLData[index].month)) monthsArr.push(sqlMonthStr);\r\n            if (!concernedArr.includes(incommingSQLData[index].concerned)) concernedArr.push(sqlConcerned);\r\n        }\r\n        if (filtering === 'month') return monthsArr;\r\n        if (filtering === 'concerned') return concernedArr;\r\n    }\r\n        /*\r\n        * If the filtered months is checked the text and the background i turn according the css roule (If checked)!\r\n        * The function at the end is running to filter the table according the month/s\r\n    */\r\n\r\n/*     let sqlFiltering = (e) => {\r\n        updateActiveFilter(true); \r\n        // Gets the element\r\n        let targetFilterMonthsBtn = e.target;          \r\n\r\n        // Gets element´s name\r\n        let filterType = targetFilterMonthsBtn.name;    \r\n\r\n        // Set all of the name values as a object   \r\n        const {dataset} = targetFilterMonthsBtn;    \r\n\r\n        console.log(dataset);\r\n\r\n        let targetCheckboxName = dataset.checkboxname;\r\n        \r\n        // Add and remove filtering string by the checked or unchecked checlboxies\r\n        let targetCheckboxChecked = targetFilterMonthsBtn.checked;\r\n        checkFilterType(filterType, targetCheckboxChecked, targetCheckboxName);\r\n    }\r\n    let checkFilterType = (filterType, targetCheckboxChecked, targetCheckboxName) => {\r\n        \r\n            If month or concerned and if checkbox is check send the string/boolean to a respectively array. If checkbox is uncheck\r\n            Remove the respectivelu balue of string and send false to the array who showuing the active filter.\r\n        \r\n         if (filterType === 'month') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeMonthsStrArr.push(targetCheckboxName);\r\n                checkedMonthsArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeMonthsStrArr.splice(checkboxIndex, 1);\r\n                checkedMonthsArr.pop(true);\r\n                updateActiveFilter(false);\r\n            }\r\n            getFilterObj(activeMonthsStrArr.join(\"', '\"), filterType);\r\n    }\r\n        if (filterType === 'concerned') {\r\n            // Check if something is checked=Marked\r\n            if (targetCheckboxChecked === true){\r\n                activeConcernedStrArr.push(targetCheckboxName);\r\n                checkedConcernedArr.push(true);\r\n            }\r\n            if (targetCheckboxChecked !== true) {\r\n                let checkboxIndex = activeMonthsStrArr.indexOf(targetCheckboxName);            \r\n                activeConcernedStrArr.splice(checkboxIndex, 1);\r\n                checkedConcernedArr.pop(true);\r\n                updateActiveFilter(false);\r\n            // =========================================================================================================================\r\n            }\r\n            /* Triggering the function and send two attributes:\r\n                1 = Turn the array into a string array separate by comma\r\n                2 = The current filterType to filet on\r\n            \r\n            getFilterObj(activeConcernedStrArr.join(), filterType);              \r\n        }\r\n    }\r\n    \r\n    let getFilterObj = (SQLFilterStr, filterType) => {     \r\n        if (filterChecked() === false){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'default',\r\n                }\r\n            );\r\n        } \r\n        if (filterChecked() === true){\r\n            axiosPost(\r\n                'filter', {\r\n                    filterType: 'filter',\r\n                    operator: 'WHERE NOT',\r\n                    filterIn: filterType,\r\n                    SQLFilterStr: SQLFilterStr\r\n                }\r\n            );\r\n        }\r\n        //axiosGet();\r\n    } */\r\n    let runFilter = ()  => {\r\n\r\n    }\r\n\r\n    let sqlFilterRemove = () => {\r\n        SQLStatementsObj = {\r\n            type: 'select',\r\n            typeOfStatement: 'default',\r\n        }\r\n        //correctSQLStatements(SQLStatementsObj);\r\n    }\r\n   \r\n    return(\r\n        <>\r\n                Komande sökfunktion!!!\r\n            {/* <input type=\"text\" className=\"searchContainer__searchBar\" id=\"searchBar\" placeholder=\"  Sök\"/>\r\n            <button className=\"searchContainer__searchBtn\" onClick={ runFilter} id=\"searchBtn\">\r\n                <Link to=\"/SearchResult\" className=\"searchContainer__searchHeadline\" onClick={ runFilter } id=\"searchBtn\">Sök</Link>\r\n            </button> */}\r\n\r\n        </>\r\n    );\r\n}","/* ================================================== MainContents ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\n\r\n// Import CSS rouls\r\nimport { specificStyleAddRow, specificStyleRemoveRecord } from '../Style/SpecificStyle';\r\nimport { SQLTableStyle } from '../Style/SQLTableStyle';\r\nimport '../Style/SQLTable.css';\r\n\r\n// Import inportant components for the specific page\r\nimport { TableColsHeadline } from '../Data/TableColsHeadline';\r\nimport { getLocalStorageData } from '../Data/LocalStorage';\r\nimport { axiosPost, axiosGet } from '../Data/Axios';\r\nimport { correctRoutes } from '../Data/runAppUrls';\r\nimport { incommingSQLDataArr$ } from '../Storage';\r\nimport { routeName } from '../Data/RouteNames';\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport { ListSQLData } from './ListSQLData';\r\nimport { ListAddForm } from './ListAddForm';\r\nimport { TableHead } from './TableHead';\r\nimport { SearchBar } from './SearchBar';\r\nimport { gotoPage$ } from '../Storage';\r\n\r\nexport let MainContents = () => {\r\n    let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n    let [ incommingNewSQLData, updateIncommingNewSQLData ] = useState([]);\r\n    let [ addedRecordData, updateAddedRecordData ] = useState([]);\r\n    useEffect(() => {\r\n        gotoPage$.subscribe((gotoPage) => {            \r\n            updateRedirectToPage(gotoPage);\r\n        });\r\n        incommingSQLDataArr$.subscribe((SQLDataArr) => {\r\n            // It can handle the data an perform its task regardless the data infrastructure\r\n            if (SQLDataArr) updateIncommingNewSQLData(SQLDataArr);\r\n            //if (SQLDataArr.statusText === 'OK') updateIncommingNewSQLData(SQLDataArr.data[0]);\r\n        });\r\n        createAddedRecordDataArr();\r\n\r\n    },[ redirectToPage, addedRecordData ]);\r\n    const createAddedRecordDataArr = () => {\r\n        const puschToAddedRecordData = [...addedRecordData];\r\n        for (let index = 0; index < TableColsHeadline.length; index++) puschToAddedRecordData.push('');\r\n        if (addedRecordData.length === 0) updateAddedRecordData(puschToAddedRecordData);\r\n    }\r\n    const choosenSelectOption = (e) => {\r\n        const puschToAddedRecordData = [...addedRecordData];\r\n        const selectedOption = e.target; \r\n        const selectedStr = selectedOption.value;\r\n        const selectedIndex = selectedOption.options.selectedIndex;\r\n        const selectedCellIndex = selectedOption.options[selectedIndex].dataset.cell;\r\n        puschToAddedRecordData[selectedCellIndex] = selectedStr;\r\n        updateAddedRecordData(puschToAddedRecordData);\r\n    }\r\n    let setStrsType = (e) => {\r\n        const puschToAddedRecordData = [...addedRecordData];\r\n        let type = e.target;\r\n        let inputStr = type.value;                    \r\n        const {dataset} = type;        \r\n        for (let index = 0; index < TableColsHeadline.length; index++) if (dataset.type === TableColsHeadline[index]) puschToAddedRecordData[dataset.typenr] = inputStr;\r\n        updateAddedRecordData(puschToAddedRecordData);\r\n    }\r\n    const runAddRow  = (e) => {\r\n        const addId = e.target.id;\r\n        axiosPost(addId, addedRecordData);\r\n        setTimeout(() => {\r\n            axiosGet('userSpec', getLocalStorageData('token'));\r\n        }, 400);\r\n        e.stopPropagation();\r\n    }\r\n    const runRemove  = (e) => {\r\n        let targetBtn = e.target;\r\n        const removeId = targetBtn.id;\r\n        const {dataset} = targetBtn; \r\n        axiosPost(removeId, dataset.optional);\r\n        setTimeout(() => {\r\n            axiosGet('userSpec', getLocalStorageData('token'));\r\n        }, 400);\r\n        e.stopPropagation();\r\n    }\r\n    return (\r\n        <> \r\n            <SQLTableStyle.container>\r\n                <SQLTableStyle.col1_3>\r\n                </SQLTableStyle.col1_3>\r\n\r\n                <SQLTableStyle.col2>\r\n                    <SQLTableStyle.searchBar><SearchBar/></SQLTableStyle.searchBar>\r\n                    <SQLTableStyle.body__contents>\r\n                        <table id=\"table1_body\">\r\n                            <TableHead/>\r\n                            <tbody id=\"table1_tbody\">\r\n                                {correctRoutes() === routeName.login && <Redirect to={ `/${ routeName.login }`} />}\r\n                                <Route path={ '/inloggad' } render={(props) => <ListAddForm {...props}\r\n                                        setStrsType={ setStrsType }\r\n                                        choosenSelectOption={ choosenSelectOption }\r\n                                        addedRecordData={ addedRecordData }\r\n                                    />}\r\n                                />\r\n                                <ListSQLData/>\r\n                            </tbody>                    \r\n                        </table>\r\n                        <SQLTableStyle.sideTool style={(correctRoutes() === `/${ routeName.login }` ) ? {display: 'block'} : {display: 'none'}}>\r\n                            <SQLTableStyle.sideToolRow1>\r\n                                <SubmitBtn\r\n                                    style={ specificStyleAddRow }\r\n                                    name={ 'Lägg Till' }\r\n                                    onClickFunction={ runAddRow }\r\n                                    id={ 'add' }\r\n                                />\r\n                            </SQLTableStyle.sideToolRow1>\r\n                            <SQLTableStyle.sideToolRow2> \r\n                                {\r\n                                    incommingNewSQLData.map((item, index) => {\r\n                                    \r\n                                        return(\r\n                                            <SubmitBtn key={ index }\r\n                                                style={ specificStyleRemoveRecord }\r\n                                                name={ 'TA BORT' }\r\n                                                onClickFunction={ runRemove }\r\n                                                id={ 'runRemoveRecord' }\r\n                                                btnOptional={ item.timeStamp }\r\n                                            />\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n                            </SQLTableStyle.sideToolRow2>\r\n                        </SQLTableStyle.sideTool>\r\n                    </SQLTableStyle.body__contents>\r\n\r\n                </SQLTableStyle.col2>\r\n                <SQLTableStyle.col1_3>\r\n\r\n                </SQLTableStyle.col1_3>\r\n            </SQLTableStyle.container>\r\n        </>\r\n    );\r\n}","/* ================================================== Style Rouls for LoginForm ==================================================\r\nImports module */\r\nimport styled from 'styled-components';\r\n\r\n// ============================== Headbar ==============================\r\nexport let HeadbarStyle = {\r\n  header: styled.section`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: -39px 0px 0px -5px;\r\n    `,\r\n  headContainer: styled.section`\r\n    width: 1400px;\r\n    height: 103px;\r\n    margin-left: calc(50% - 700px);\r\n    background: #FFFFFF;\r\n  `,\r\n  headline: styled.section`\r\n    width: 221px;\r\n    height: 50px;\r\n    margin-left: 32px;\r\n    margin-top: 46px;\r\n    font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 24px;\r\n    line-height: 80px;\r\n    color: #AE0B05;\r\n  `,\r\n  statusContainer: styled.section`\r\n    width: 706px;\r\n    height: 75px;\r\n    margin-left: 770px;\r\n    margin-top: -53px;\r\n  `,\r\n  }\r\n// ============================== LoginForm ==============================\r\nexport let LoginFormStyle = {\r\n  headContainer: styled.section`\r\n    width: 400px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-left: -54px;\r\n    margin-top: -8px;\r\n  `,\r\n  formContainer: styled.section`\r\n    width: 600px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-left: 70px;\r\n    margin-top: 22px;\r\n    padding-top: 23px;\r\n  `,\r\n  usernameContainer: styled.section`\r\n    position: relative;\r\n\r\n  `,\r\n  passwordContainer: styled.section`\r\n    position: relative;\r\n    margin-left: 8px;\r\n  `,\r\n  labelFormNoFocus: styled.label`\r\n    position: absolute;\r\n    height: 50px;\r\n    margin-left: 10px;\r\n    margin-bottom: -25px;\r\n    font-family: Roboto;\r\n    font-style: 500;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 150%;\r\n    letter-spacing: 0.005em;\r\n    color: #000000;\r\n    background-color: none;\r\n    \r\n  `,\r\n  inputForm: styled.input`\r\n      border: 1px solid red;\r\n    width: 232px;\r\n    height: 29px;\r\n    margin-left: 0px;\r\n    margin-top: -32px;\r\n    background: none; /*   background: #F5F5F5; */\r\n    border: 1px solid #E5E5E5;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n  `,  \r\n  btnLoginContainer: styled.section`\r\n    width: 181px;\r\n    height: 80%;\r\n    margin-left: 8px;\r\n    margin-top: 2px;\r\n  `,\r\n  userInfoContainer: styled.section`\r\n    width: 377px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  `,\r\n  userErrorMess: styled.p`\r\n    margin-top: 14px;\r\n    margin-left: 18px;\r\n    width: 149px;\r\n    font-size: 13.5px;\r\n    color: #AE0B05;\r\n    font-weight: bold;\r\n  `,\r\n}\r\n","/* ================================================== HeadBar ==================================================\r\nImports module */\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Import CSS rouls\r\nimport { specificStyleLogin, labelFormFocused, specificStyleUserReg } from '../Style/SpecificStyle';\r\nimport { LoginFormStyle } from '../Style/LoginFormStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\n\r\nexport let LoginForm = (props) => {\r\n    const {onChangeUserName, onChangeUserPwd, userNameStr, userPwdStr, runAuth, runNewUserReg, inlogStatus, inlogMess} = props;    \r\n    const [ specificFocusStyleUsrLabel, setSpecificFocusStyleUsrLabel ] = useState({});\r\n    const [ specificFocusStylePswLabel, setSpecificFocusStylePswLabel ] = useState({});\r\n    useEffect(() => {\r\n\r\n    }, [specificFocusStyleUsrLabel])\r\n    // Handle the inlogg forms and its behaviour when clicking\r\n    const handleInputForm = (e) => {\r\n        const targetForm = e.target;\r\n        const inputFormId = targetForm.id;\r\n        if(inputFormId === \"labelUserName\") setSpecificFocusStyleUsrLabel(labelFormFocused);\r\n        if(inputFormId === \"labelPassword\") setSpecificFocusStylePswLabel(labelFormFocused);\r\n    }\r\n    return(\r\n        <LoginFormStyle.headContainer>\r\n            <LoginFormStyle.formContainer>\r\n                <LoginFormStyle.usernameContainer>\r\n                    <LoginFormStyle.labelFormNoFocus id=\"labelUserName\" style={ specificFocusStyleUsrLabel } onClick={ handleInputForm }>Användarnamn</LoginFormStyle.labelFormNoFocus>\r\n                    <LoginFormStyle.inputForm id=\"labelUserName\" type=\"text\" onChange={ onChangeUserName } value={ userNameStr } onClick={ handleInputForm }/>\r\n                </LoginFormStyle.usernameContainer> \r\n                <LoginFormStyle.passwordContainer>\r\n                    <LoginFormStyle.labelFormNoFocus id=\"labelPassword\" style={ specificFocusStylePswLabel } onClick={ handleInputForm }>Lösenord</LoginFormStyle.labelFormNoFocus>\r\n                    <LoginFormStyle.inputForm id=\"labelPassword\" type=\"text\" onChange={ onChangeUserPwd } value={ userPwdStr } onClick={ handleInputForm }/>\r\n                </LoginFormStyle.passwordContainer>  \r\n            </LoginFormStyle.formContainer>\r\n                <LoginFormStyle.btnLoginContainer>\r\n                <SubmitBtn\r\n                    style={ specificStyleLogin }\r\n                    name={ 'Logga In' }\r\n                    onClickFunction={ runAuth }\r\n                    id={ 'Auth' }\r\n                    type=\"buttom\"\r\n                />\r\n            </LoginFormStyle.btnLoginContainer>\r\n            <SubmitBtn\r\n                    style={ specificStyleUserReg }\r\n                    name={ 'Ny Användare' }\r\n                    onClickFunction={ runNewUserReg }\r\n                    id={ 'Registrera' }\r\n                    type=\"buttom\"\r\n            />\r\n            <LoginFormStyle.userInfoContainer>\r\n                <LoginFormStyle.userErrorMess>\r\n                    {(inlogStatus === 203)\r\n                        ? (userNameStr === null && userPwdStr === null ) \r\n                            ? inlogMess : null\r\n                        : null\r\n                    }\r\n                </LoginFormStyle.userErrorMess>\r\n\r\n            </LoginFormStyle.userInfoContainer>\r\n        </LoginFormStyle.headContainer>\r\n    );\r\n}","/* ================================================== MainApp for the app ==================================================\r\n   Imports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n// React Router - ES6 modules\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, userData$, updateGotoPage} from './Components/Storage.js';\r\nimport { MainContents } from './Components/Structure/MainContents';\r\nimport { Headbar } from './Components/Structure/Headbar.js';\r\nimport { routeName } from './Components/Data/RouteNames';\r\nimport { LoginForm } from './Components/Data/LoginForm'\r\nimport {axiosPost } from './Components/Data/Axios';\r\n\r\n// Sending over formData for RunLogInOut\r\nexport let formInputObj = {};\r\n\r\nexport let MainPage = () => {\r\n    let [ appUrl, setAppUrl ] = useState('/');\r\n    let [ appName, setAppName ] = useState('');\r\n    let [ inlogMess, setInlogMess ] = useState('');\r\n    let [ inlogStatus, setInlogStatus ] = useState(0);\r\n    const [ userNameStr, updateUserNameStr ] = useState('');\r\n    const [ userPwdStr, updateUserPwdStr ] = useState('');\r\n    let [ redirectToPage ] = useState('Auth');\r\n\r\n    useEffect(() => {   \r\n        headName$.subscribe((headName) => {\r\n            setAppName(headName);\r\n        });\r\n        userData$.subscribe((returningUserDispalyingObj) => {\r\n            setInlogStatus(returningUserDispalyingObj.responsType);\r\n            setInlogMess(returningUserDispalyingObj.logInMess);\r\n        });\r\n        if(redirectToPage === routeName.userReg) return <Redirect to={ `${ routeName.userReg }` } />\r\n        \r\n    }, [ redirectToPage ]);\r\n    let onChangeUserName = (e) => {\r\n        let targetUserName = e.target.value;\r\n        updateUserNameStr(targetUserName);\r\n    }\r\n    let onChangeUserPwd = (e) => {\r\n        let targetUserPwd = e.target.value;\r\n        updateUserPwdStr(targetUserPwd);\r\n    }\r\n    let runAuth = (e) => {\r\n        let userInformation = {};\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n  \r\n        /* Authorization with a token as response backValidate that the user is found as a valid user\r\n            if user do not find it will not login and shows an error mess instead\r\n        */\r\n        userInformation = {userName: userNameStr, userPassWord: userPwdStr}\r\n        \r\n        axiosPost(targetBtnId, userInformation);    \r\n        updateGotoPage(targetBtnId);\r\n        //if (inlogStatus === 203) return; \r\n    }\r\n    let runNewUserReg = (e) =>{\r\n        // Gets the element\r\n        let targetBtnId = e.target.id; \r\n        updateGotoPage(targetBtnId); \r\n    }    \r\n    return (\r\n        <>  \r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Utloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LoginForm\r\n                        appUrl={appUrl}\r\n                        onChangeUserName={onChangeUserName}\r\n                        userNameStr={userNameStr}\r\n                        onChangeUserPwd={onChangeUserPwd}\r\n                        userPwdStr={userPwdStr}\r\n                        runAuth={runAuth}\r\n                        runNewUserReg={runNewUserReg}\r\n                        inlogStatus={inlogStatus}\r\n                        inlogMess={inlogMess}\r\n                    />\r\n                }\r\n            />            \r\n            <Route exact path={appUrl} component={ MainContents }/>\r\n        </>\r\n    );\r\n}","/* ================================================== Headbar Stgatus when user is logedIn ==================================================\r\nImports module */\r\nimport React from 'react';\r\n\r\n// Import CSS rouls\r\nimport { specificStyleLogout } from '../Style/SpecificStyle';\r\nimport { LogedInStyle } from '../Style/LogedInStyle';\r\n\r\n// Import inportant components for the specific page\r\nimport { SubmitBtn } from '../Data/SubmitBtn';\r\nimport Spinner from '../Data/Spinner';\r\n\r\nexport let LogedInStatus = (props) => {\r\n    const { inlogedUser, functionLogOut } = props;\r\n    return(\r\n        <LogedInStyle.headContainer>\r\n            <LogedInStyle.userHelp>\r\n                Hjälp\r\n            </LogedInStyle.userHelp>\r\n            <LogedInStyle.inlogedUser>\r\n                {(inlogedUser === '' ) \r\n                    ? <>\r\n                            Välkommen in ... <Spinner/>\r\n                        </>\r\n                    : `Välkommen in ${ inlogedUser }`\r\n                }\r\n            </LogedInStyle.inlogedUser>\r\n                <SubmitBtn\r\n                    style={ specificStyleLogout }\r\n                    name={ 'Logga Ut' }\r\n                    onClickFunction={ functionLogOut }\r\n                    id={ '/' }\r\n                    btnOptional={ '' }\r\n                /> \r\n        </LogedInStyle.headContainer>\r\n    );\r\n}","// ================================================== Shared functions ==================================================\r\n// Import inportant components for the specific page\r\nimport { updateLocalstorage, updateGotoPage } from '../Storage.js';\r\n\r\nexport let runLogOut = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    updateGotoPage(targetBtnId);\r\n\r\n    updateLocalstorage(window.localStorage.clear());\r\n}\r\nexport let runAddRecord = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    updateGotoPage(targetBtnId);\r\n}\r\nexport let runReturnFromAddRecord = (e) => {\r\n    // Gets the element\r\n    let targetBtnId = e.target.id;     \r\n    updateGotoPage(targetBtnId);\r\n}\r\n","/* ================================================== LogedIn page ==================================================\r\n   Imports module */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\n// Import inportant components for the specific page\r\nimport { headName$, updateInlogedUserFullName, inlogedUserFullName$ } from './Components/Storage.js';\r\nimport { MainContents } from './Components/Structure/MainContents';\r\nimport { LogedInStatus } from './Components/Structure/LogedInStatus';\r\nimport { runLogOut } from './Components/Data/CommonFunction';\r\nimport { Headbar } from './Components/Structure/Headbar';\r\n\r\nexport let LogedIn = () => {\r\n    let [ inlogedUser, updateInlogedUser ] = useState('');\r\n    let [ appName, setAppName ] = useState('');\r\n\r\n    useEffect(() => {\r\n        //setTimeout(() => {\r\n            updateInlogedUserFullName();\r\n        //}, 1000);\r\n        headName$.subscribe((headName) => {\r\n            console.log(headName);\r\n            setAppName(headName);\r\n        });\r\n        inlogedUserFullName$.subscribe((inlogedUserFullName) => {         \r\n            updateInlogedUser(inlogedUserFullName);\r\n        }); \r\n    }, []); \r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{`${appName} - Inloggad`}</title>\r\n            </Helmet>\r\n            <Headbar\r\n                appStatus={ \r\n                    <LogedInStatus\r\n                        inlogedUser={ inlogedUser }\r\n                        functionLogOut={ runLogOut }\r\n                    />\r\n                }\r\n            />  \r\n            <MainContents/>                 \r\n        </>\r\n    );\r\n}\r\n","/* ================================================== MainApp for the app ==================================================\r\n   Imports module */\r\nimport React, { useState, useEffect } from 'react';\r\n// React Router - ES6 modules\r\nimport { HashRouter, Route, Redirect } from \"react-router-dom\";\r\n\r\n// Import inportant components for the specific page\r\nimport { updateHeadName, gotoPage$ } from './Components/Storage.js';\r\nimport { routeName } from './Components/Data/RouteNames';\r\nimport { RegUser } from './Components/Structure/RegUser';\r\nimport { Auth } from './Components/Data/Authorization';\r\nimport { MainPage } from './MainPage.js';\r\nimport { LogedIn } from './LogedIn';\r\n\r\nupdateHeadName('Årsklockan');\r\n\r\nlet MainApp = () => {\r\n  let [ appUrl, setAppUrl ] = useState('/');\r\n  let [ redirectToPage, updateRedirectToPage ] = useState('');\r\n  \r\n  useEffect(() => {\r\n    gotoPage$.subscribe((gotoPage) => {\r\n      updateRedirectToPage(gotoPage);\r\n    });\r\n    \r\n  },[redirectToPage]);\r\n\r\n  return (\r\n    <HashRouter basename='/'>\r\n      {redirectToPage === routeName.mainPage && <Redirect to={ `/`} />} \r\n      {redirectToPage === routeName.auth  && <Redirect to={ `/${ routeName.auth }`}/>}  \r\n      {redirectToPage === routeName.userReg  && <Redirect to={ `/${ routeName.userReg }`}/>} \r\n      {redirectToPage === routeName.login && <Redirect to={ `/${ routeName.login }`} />} \r\n\r\n      <Route exact path={ appUrl } component={ MainPage } />\r\n      <Route exact path={ appUrl + routeName.auth } component={ Auth }/>\r\n      <Route exact path={ appUrl + routeName.userReg } component={ RegUser }/>   \r\n      <Route exact path={ appUrl + routeName.login } component={ LogedIn }/>  \r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default MainApp; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n         console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n             console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n             console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n     console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// Imports the mail CSS file, is meant to be a container for the basic rouls that you not need touching\r\nimport './Components/Style/Body.css';\r\nimport MainApp from './MainApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}